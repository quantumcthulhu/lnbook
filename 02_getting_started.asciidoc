[[getting-started]]
== Починаємо

У цьому розділі ми почнемо з того, з чого починають більшість людей, коли вперше стикаються з Lightning Network - із вибору програмного забезпечення для участі в економіці Lightning Network. Ми розглянемо вибір двох користувачів, які представляють загальний випадок використання Lightning Network, і навчимось на їх прикладах. Клієнтка кав'ярні Аліса використовуватиме Lightning-гаманець на своєму мобільному пристрої, щоб купувати каву в кафе Боба. Торговець Боб буде використовувати Lightning-ноду і гаманець для отримання платежів у своєму кафе через Lightning Network.

=== Lightning-ноди

Доступ до Lightning Network здійснюється за допомогою програм, які вміють спілкуватися через протокол Lightning Network. _Нода Lightning Network_ (або просто "нода") - це програмний застосунок, що має три важливі характеристики. По-перше, ноди повинні взаємодіяти peer-to-peer з іншими Lightning-нодами, утворюючи мережу. Також ноди мають функціональність "гаманця", тобто вони можуть надсилати та отримувати платежі через Lightning Network, як гаманці у мережі Біткоїн. Нарешті, Lightning-нодам потрібен доступ до блокчейну Біткоїна (або інших блокчейнів для інших криптовалют) для гарантування безпеки коштів, які беруть участь в платежах.

Користувачі мають найвищий рівень контролю, коли використовують власні  Біткоїн- та Lightning- ноди. Також Lightning-ноди можуть використовувати для взаємодії з Біткоїн-блокчейном полегшену Біткоїн-ноду, що відома як Simplified Payment Verification (Спрощена Верифікація Платежів, SPV).

=== Lightning-експлорер

Експлорер (Провідник, Explorer) Lightning Network - це корисний інструмент для відображення статистики нод, каналів та об'єму мережі.

Нижче наведено невичерпний перелік (в алфавітно-цифровому порядку):

* https://1ml.com/, 1ML Lightning-експлорер
* https://explorer.acinq.co/, Lightning-експлорер від ACINQ з гарною візуалізацією 
* https://lightblock.me/, Lightblock Lightning-експлорер
* https://hashxp.org/lightning/node/, hashXP Lightning-експлорер

[TIP]
====
Зверніть увагу, що при використанні Lightning-експлорерів, як і випадку з блокчейн-експлорерами,
конфіденційність користувачів може постраждати, так як веб-сайт може відстежувати їхні IP-адреси та збирати інформацію про поведінку користувачів (наприклад, ноди, якими вони цікавились).

Також варто зазначити, що, оскільки не існує глобального консенсусу ані щодо поточного графу Lightning, ані щодо поточного стану будь-якої існуючої політики каналів, користувачі ніколи не повинні покладатися на Lightning-експлорери для отримання актуальної інформації. Lightning-експлорери слід використовувати лише для збору широкої статистики Lightning Network.
====

=== Lightning-гаманці

Термін "Lightning-гаманець" є дещо неоднозначним, оскільки він може описувати широкий спектр компонентів у поєднанні з інтерфейсом користувача. До найпоширеніших складових частин Lightning-гаманця належать:

* Сховище ключів для зберігання секретних ключів.
* Lightning-нода, що спілкується через peer-to-peer мережу, як було описано вище.
* Біткоїн-нода, що зберігає блокчейн та спілкується з іншими Біткоїн-нодами.
* "Карта" нод і каналів, що анонсовані у Lightning Network.
* "Пліткар", який збирає інформацію про ноди і канали в мережі для побудови "мапи" мережі.
* Сховище для зберігання інформації про відкриті канали.
* Менеджер каналів, який може відкривати та закривати канали.
* Система пошуку маршруту з'єднаних каналів від джерела платежу до призначення платежу.

Lightning-гаманець може виконувати всі ці функції, будучи "повним" гаманцем, незалежним від сторонніх сервісів. Або одна чи кілька з перерахованих функцій може повністю або частково перекладатися на сторонні сервіси.

Ключова відмінність (гра слів) полягає в тому, виконує гаманець функцію зберігання ключів чи покладає її на сторонній сервіс. В блокчейнах контроль над ключами визначає контроль над монетами, що виражається у вислові "твої ключі - твої монети; не твої ключі - не твої монети". Всякий гаманець, який передає управління ключами на аутсорсинг, називається "кастодіальним" (від англ. "custody" - "зберігання", "охорона"), оскільки сторона, яка зберігає ключі, контролює кошти користувача, а не сам користувач. Відповідно, "некастодіальним" є такий гаманець, що самостійно виконує функцію зберігання ключів, і ключі контролюються лише користувачем. Термін "некастодіальний" гаманець просто означає, що сховище ключів є локальним і знаходиться під контролем користувача. При цьому один або більше функцій гаманця (крім сховища ключів) можуть бути передані довіренним стороннім сервісам.

Блокчейни, особливо відкриті блокчейни, такі як Біткоїн, намагаються мінімізувати або взагалі усунути необхідність довіри до третіх сторін і передати повноваження самим користувачам. Цю модель часто називають "trustless" (без довіри), хоча більш підходящим словосполученням є "модель з мінімізованою довірою". В таких системах користувач довіряє правилам програмного забезпечення замість довіри до третіх осіб. Таким чином питання контролю над ключами є головним фактором при виборі Lightning-гаманця.

Кожен інший компонент Lightning-гаманця викликає подібні міркування щодо довіри. Якщо всі компоненти перебувають під контролем користувача, тоді довіра до третіх сторін зводиться до мінімуму, забезпечуючи максимальну владу користувача. Звісно, разом із такою владою виникає відповідальність користувача за управління складним програмним забезпеченням.

Кожен користувач повинен враховувати власні технічні навички, перш ніж вирішити, який тип гаманця використовувати. Тим, хто має сильні технічні навички, слід користуватись гаманцем Lightning, який передає всі функції під безпосередній контроль користувача. Тим, у кого менше технічних навичок, але є бажання контролювати свої кошти, слід обрати _некастодіальний_ Lightning-гаманець.
Часто довіра у цих випадках стосується конфіденційності.
Коли користувачі вирішують передати деякі функції третій стороні, то вони, як правило, частково втрачають конфіденційність, оскільки третя сторона дізнається деяку інформацію про них.

Нарешті, ті, хто прагне простоти та зручності, навіть за рахунок контролю та безпеки, можуть вибрати кастодіальний Lightning-гаманець. Це найпростіший варіант, але він _підриває модель довіри криптовалюти_ і, отже, його слід розглядати лише як сходинку до більшого контролю та незалежності.

Існує багато способів охарактеризувати або класифікувати гаманці.
Найважливішими є такі питання:

- Цей Lightning-гаманець утримує свою повну Lightning-ноду чи він використовує сторонню Lightning-ноду?
- Цей Lightning-гаманець утримує свою повну Біткоїн-ноду чи він використовує сторонню Біткоїн-ноду? footnote:[Якщо Lightning-гаманець використовує сторонню Lightning-ноду, то ця стороння Lightning-нода вирішує, як їй спілкуватися з мережею Біткоїн. Отже, використання сторонньої Lightning-ноди автоматично означає використання і сторонньої Біткоїн-ноди. Лише в протилежному випадку - коли Lightning-гаманець використовує власну Lightning-ноду - існує вибір "власна Біткоїн-нода" чи "стороння Біткоїн-нода". ]
- Цей Lightning-гаманець зберігає ключі під контролем користувача, або ключі зберігаються у стороннього кастодіала?

На найвищому рівні абстракції питання 1 і 3 є найбільш елементарними.
З цих двох питань ми можемо вивести чотири можливі категорії.
Ми можемо розмістити ці чотири категорії в квадранті, як показано в Таблиці <<lnwallet-categories>>.
Але пам’ятайте, що це лише один із способів класифікувати Lightning-гаманці.

[[lnwallet-categories]]
.Квадрант Lightning-гаманців
[options="header"]
|===
|                        | *Повна Lightning-нода*      | *Стороння Lightning-нода*
| *Некастодіальний*         | Q1: Сильні технічні навички, найменша довіра до третіх сторін, потребує найменше дозволів | Q2: Технічні навички нижче середнього, довіра до третіх сторін нижче середнього, потребує деяких дозволів
| *Кастодіальний*            | Q3: Технічні навички вище середнього, довіра до третіх сторін вище середнього, потребує деяких дозволів | Q4: Слабкі технічні навички, найбільша довіра до третіх сторін, потребує найбільше дозволів
|===

Ситуація визначена у квадранті Q3, коли у гаманця є власна Lightning-нода, але ключі знаходяться у кастодіала, на данний момент не трапляється. 
Майбутні гаманці із цього квадранта дозволять користувачеві турбуватися про операційні аспекти своєї ноди, але делегуватимуть доступ до ключів третій стороні, яка може використовувати переважно холодне зберігання ключів.

Lightning-гаманці можна встановити на різні пристрої, включаючи ноутбуки, сервери та мобільні пристрої. Щоб запустити повну Lightning-ноду (ту, що бере участь у "плітках" і створює власну карту мережі для пошуку та маршрутизації шляхів), вам потрібно буде використовувати сервер або настільний комп'ютер, оскільки мобільні пристрої та ноутбуки зазвичай недостатньо потужні в сенсі ємності, швидкості обробки, часу автономної роботи та підключення до мережі.

Категорія "Сторонні Lightning-ноди" може бути поділена на:

- Легкі: Lightning-нода управляється третьою стороною, гаманець отримує необхідну інформацію від сторонньої Lightning-ноди через API.
- Ніякі: означає, що не тільки Lightning-нода управляється третьою стороною, але й більшою частиною гаманця керує третя сторона, розташована в клауді, так що гаманцю навіть не потрібно викликати API.

Ці підкатегорії використані в таблиці <<lnwallet-examples>>.

Інші терміни, які потребують пояснення в Таблиці <<lnwallet-examples>> у стовпці "Біткоїн-нода":

- Neutrino: Neutrino - це специфічна реалізація протоколу для отримання даних з Біткоїн-мережі, згідно BIP 157 і BIP 158. Біткоїн-нода управляється третьою стороною і доступ до неї здійснюється за допомогою "neutrino".
- Electrum: Це означає, що гаманець підключається до сервера Electrum. Біткойн-нода управляється третьою стороною і доступ до неї здійснюється за протоколом "Electrum".
- Bitcoin Core: реалізація повної Біткоїн-ноди.
- btcd: інша реалізація повної Біткоїн-ноди.

У <<lnwallet-examples>> ми бачимо кілька прикладів популярних на даний момент гаманців для різних типів пристроїв.

// TODO: Add a lot more wallet/node examples, confirm the details for correctness
[[lnwallet-examples]]
.Приклади Популярних Lightning-гаманців
[options="header"]
|===
| Застосунок    | Пристрій  | Lightning-нода | Біткоїн-нода          | Сховище ключів
| lnd            | Сервер  | Повна нода   | Bitcoin Core/btcd     | Некастодіальне
| c-lightning    | Сервер  | Повна нода   | Bitcoin Core          | Некастодіальне
| Eclair Server  | Сервер  | Повна нода   | Bitcoin Core/Electrum | Некастодіальне
| Zap Desktop    | Настільний комп'ютер | Повна нода   | Neutrino              | Некастодіальне
| Eclair Mobile  | Смартфон  | Легка нода | Electrum              | Некастодіальне
| Breez Wallet   | Смартфон  | Повна нода   | Neutrino              | Некастодіальне
| Phoenix Wallet | Смартфон  | Легка нода | Electrum              | Некастодіальне
| Blue Wallet    | Смартфон  | Ніяка        | Ніяка                  | Кастодіальне
|===

=== Balancing complexity and control

Lightning wallets have to strike a careful balance between complexity and user control. Those that give the user the most control over their funds, the highest degree of privacy, and the greatest independence from third party services are necessarily more complex and difficult to operate. As the technology advances, some of these trade-offs will become less stark, and users may be able to get more control without more complexity. However, for now, different companies and projects are exploring different positions along this control-complexity spectrum and hoping to find the "sweet spot" for the users they are targeting.

When selecting a wallet, keep in mind that even if you don't see these trade-offs, they still exist. For example, many wallets will attempt to remove the burden of channel management from its users. To do so, they introduce central "hub" nodes that all their wallets connect to automatically. While this trade-off simplifies the user interface and user experience, it introduces a Single Point of Failure (SPoF) as these "hub nodes" become indispensable for the wallet operation. Furthermore, relying on a "hub" like this can reduce user privacy since the hub knows the sender and potentially (if constructing the payment route on behalf of the user) also the recipient of each payment made by the user's wallet.

In the next section, we will return to our first user and walk through her first Lightning wallet setup. She has chosen a wallet that is more sophisticated than the easier custodial wallets. This allows us to show some of the underlying complexity and introduce some of the inner workings of an advanced wallet during our example. You may find that your first ideal wallet is further towards "ease of use", by accepting some of the control and privacy trade-offs. Or perhaps you are more of a "power user" and want to run your own Lightning and Bitcoin nodes as part of your wallet solution.

=== Alice's First Lightning Wallet

Alice is a long time Bitcoin user. We first met Alice in Chapter 1 of _"Mastering Bitcoin"_ footnote:["Mastering Bitcoin 2nd Edition, Chapter 1" Andreas M. Antonopoulos (https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch01.asciidoc).], when she bought a cup of coffee from Bob's cafe using a bitcoin transaction. Now, Alice is eager to learn about and experiment with the Lightning Network. First, she has to select a Lightning wallet that meets her needs.

Alice does not want to entrust custody of her bitcoin to third parties. She has learned enough about cryptocurrency to know how to use a wallet. She also wants a mobile wallet so that she can use it for small payments on-the-go, so she chooses the _Eclair_ wallet, a popular non-custodial mobile Lightning wallet.

==== Downloading and Installing a Lightning Wallet

When looking for a new cryptocurrency wallet, you must be very careful to select a secure source for the software.

Unfortunately, many fake wallet applications will steal your money, and some of these even find their way onto reputable and supposedly vetted software sites like the Apple and Google application stores. Whether you are installing your first or your tenth wallet, always exercise extreme caution. A rogue app cannot only steal any money you entrust it with, but it might also be able to steal keys and passwords from other applications by compromising your mobile device operating system.

Alice uses an Android device and will use the Google Play Store to download and install the Eclair wallet. Searching on Google Play, she finds an entry for "Eclair Mobile", as shown in <<eclair-playstore>>.

[[eclair-playstore]]
.Eclair Mobile in the Google Play Store
image:images/eclair-playstore.png["Eclair wallet in the Google Play Store"]

Alice notices a few different elements on this page, that help her ascertain that this is, most likely, the correct "Eclair Mobile" wallet she is looking for. Firstly, the organization "ACINQ" footnote:[ACINQ: Developers of the Eclair Mobile Lightning wallet (https://acinq.co/).] is listed as the developer of this mobile wallet, which Alice knows from her research is the correct developer. Secondly, the wallet has been installed "10,000+" times and has more than 320 positive reviews. It is unlikely this is a rogue app that has snuck into the Play Store. As third step, she goes to the ACINQ website (https://acinq.co/). She verifies that the webpage is secure (https, not http) which is shown as a green lock by some browsers. On the website she goes to the Download section or looks for the link to the Google App store. She finds the link and clicks it. She compares that this link brings her to the very same app in the Google App Store. Satisfied by these findings, Alice installs the Eclair app on her mobile device.

[WARNING]
====
Always exercise great care when installing software on any device. There are many fake cryptocurrency wallets that will not only steal your money but might also compromise all other applications on your device.
====

=== Creating a New Wallet

When Alice opens the Eclair Mobile app for the first time, she is presented with a choice to "Create a New Wallet" or to "Import an Existing Wallet". Alice will create a new wallet, but let's first discuss why these options are presented here and what it means to "import an existing wallet".

==== Responsibility with Key Custody

As we mentioned in the beginning of this section, Eclair is a _non-custodial_ wallet, meaning that Alice has sole custody of the keys used to control her bitcoin. This also means that Alice is responsible for protecting and backing up those keys. If Alice loses the keys, no one can help her recover the bitcoin, and they will be lost forever.

[WARNING]
====
With the Eclair Mobile wallet, Alice has custody and control of the keys and, therefore, full responsibility to keep the keys safe and backed up. If she loses the keys, she loses the bitcoin, and no one can help her recover from that loss!
====

==== Mnemonic Words

Similar to most Bitcoin wallets, Eclair Mobile provides a _mnemonic phrase_ for Alice to back up. The mnemonic phrase consists of 24 English words, selected randomly by the software, and used as the basis for the keys that are generated by the wallet. The mnemonic phrase can be used by Alice to restore all the transactions and funds in the Eclair Mobile wallet in the case of an event such as a lost mobile device, a software bug, or memory corruption.

[TIP]
====
The _mnemonic phrase_ is often mistakenly called a "seed". In fact, a seed is constructed _from the mnemonic_ and is something different.
====

When Alice chooses to "Create a New Wallet", she will be shown a screen with her mnemonic phrase, which looks like the screenshot in <<eclair-mnemonic>>.

[[eclair-mnemonic]]
.New Wallet Mnemonic Phrase
image:images/eclair-mnemonic.png["New Wallet Mnemonic Phrase"]

In <<eclair-mnemonic>>, we have purposely obscured part of the mnemonic phrase to prevent readers of this book from reusing the mnemonic.

[[mnemonic-storage]]
==== Storing the Mnemonic Safely

Alice needs to be careful to store the mnemonic phrase in a way that balances the need to prevent theft and accidental loss. The recommended way to properly balance these risks is to write two copies of the mnemonic phrase on paper, with each of the words numbered as the order matters.

Once Alice has recorded the mnemonic phrase, after touching "OK GOT IT" on her screen, she will be presented with a _quiz_ to make sure that she correctly recorded the mnemonic. The quiz will ask for three or four of the words at random. Alice wasn't expecting a quiz, but since she recorded the mnemonic correctly, she passes without any difficulty.

Once Alice has recorded the mnemonic phrase and passed the quiz, she should store each copy in a separate secure location such as a locked desk drawer or a fireproof safe.

[WARNING]
====
Never attempt a "DIY" security scheme that deviates in any way from the best practice recommendation in <<mnemonic-storage>>. Do not cut your mnemonic in half, make screenshots, store on USB drives or cloud drives, encrypt it, or try any other non-standard method. You will tip the balance in such a way as to risk permanent loss or theft. Many people have lost funds, not from theft but because they tried a non-standard solution without having the expertise to balance the risks involved. The best practice recommendation is carefully balanced by experts and suitable for the vast majority of users.
====

After Alice initializes her Eclair Mobile wallet, she will see a brief tutorial that highlights the various elements of the user interface. We won't replicate the tutorial here, but we will explore all of those elements as we follow Alice's attempt to buy a cup of coffee!

=== Loading Bitcoin Into the Wallet

Alice now has a Lightning wallet. But, it's empty! She now faces one of the more challenging aspects of this experiment: she has to find a way to acquire some bitcoin and load it onto her Eclair wallet.

[[acquiring-bitcoin]]
==== Acquiring Bitcoin

There are several ways Alice can acquire bitcoin:

* She can exchange some of her national currency (e.g. USD) at a crypto-currency exchange
* She can buy some from a friend, or an acquaintance from a Bitcoin Meetup, in exchange for cash
* She can find a _Bitcoin ATM_ in her area, which acts as a vending machine, selling bitcoin for cash
* She can offer her skills or a product she sells and accepts payment in bitcoin
* She can ask her employer or clients to pay her in bitcoin

All of these methods have varying degrees of difficulty, and many will involve paying a fee. Some will also require Alice to provide identification documents to comply with local banking regulations. However, with all these methods, Alice will be able to receive bitcoin.

==== Receiving Bitcoin

Let's assume Alice has found a local Bitcoin ATM and has decided to buy some bitcoin in exchange for cash. An example of a Bitcoin ATM, one built by the Lamassu company, is shown in <<bitcoin-atm>>. Such Bitcoin ATMs accept national currency (cash) through a cash slot and send bitcoin to a Bitcoin Address scanned from a user's wallet using a built-in camera.

[[bitcoin-atm]]
.A Lamassu Bitcoin ATM
image:images/bitcoin-atm.png[]

To receive the bitcoin in her Eclair Lightning wallet, Alice will need to present a _Bitcoin Address_ from the Eclair Lightning wallet to the ATM. The ATM can then send Alice's newly acquired bitcoin to this bitcoin address.

To see a Bitcoin Address on the Eclair wallet, Alice must swipe to the left column titled "YOUR BITCOIN ADDRESS" (see <<eclair-receive>>), where she will see a square barcode (called a _QR code_) and a string of letters and numbers below.

[[eclair-receive]]
.Alice's bitcoin address, shown in Eclair
image:images/eclair-receive.png[]

The QR code contains the same string of letters and numbers as shown below it, in an easy to scan format. This way, Alice doesn't have to type the Bitcoin Address. In the screenshot <<eclair-receive>>, we have purposely blurred both, to prevent readers from inadvertently sending bitcoin to this address.

[NOTE]
====
Both Bitcoin addresses and QR codes contain error detection information that prevents any typing or scanning errors from producing a "wrong" Bitcoin address. If there is a mistake in the address, any Bitcoin wallet will notice the error and refuse to accept the Bitcoin Address as valid.
====

Alice can take her mobile device to the ATM and show it to the built-in camera, as shown in <<bitcoin-atm-receive>>. After inserting some cash into the slot, she will receive bitcoin in Eclair!

[[bitcoin-atm-receive]]
.Bitcoin ATM scans the QR code.
image:images/bitcoin-atm-receive.png[]

Alice will see the transaction from the ATM in the "TRANSACTION HISTORY" tab of the Eclair wallet. While Eclair will detect the bitcoin transaction in just a few seconds, it will take approximately one hour for the bitcoin transaction to be "confirmed" on the Bitcoin blockchain. As you can see in <<eclair-tx1>>, Alice's Eclair wallet shows "6+ conf" below the transaction, indicating that the transaction has received the required minimum of six confirmations, and her funds are now ready to use.

[[eclair-tx1]]
.Alice receives bitcoin
image:images/eclair-tx1-btc.png[]

While in this example Alice used an ATM to acquire her first bitcoin, the same basic concepts would apply even if she used one of the other methods in <<acquiring-bitcoin>>. For example, if Alice wanted to sell a product or provide a professional service in exchange for bitcoin, her customers could scan the Bitcoin Address with their wallets and pay her in bitcoin.

Similarly, if she billed a client for a service offered over the Internet, Alice could send an email or instant message with the Bitcoin Address or the QR code to her client, and they could paste or scan the information into a Bitcoin wallet to pay her.

Alice could even print the QR code and affix it to a sign and display it publicly to receive tips. For example, she could have a QR code affixed to her guitar and receive tips while performing on the street!

Finally, if Alice bought bitcoin from a crypto-currency exchange, she could (and should) "withdraw" the bitcoin by pasting her Bitcoin Address into the exchange website. The exchange will then send the bitcoin to her address directly.

=== From Bitcoin to Lightning Network

Alice's bitcoin is now controlled by her Eclair wallet and has been recorded on the Bitcoin blockchain. At this point, Alice's bitcoin is "on-chain," meaning that the transaction has been broadcast to the entire Bitcoin network, verified by all Bitcoin nodes, and "mined" (recorded) onto the Bitcoin blockchain.

So far, the Eclair Mobile wallet has behaved only as a Bitcoin wallet, and Alice hasn't used the Lightning Network features of Eclair. As is the case with many Lightning wallets, Eclair bridges Bitcoin and the Lightning Network by acting as both a Bitcoin wallet and a Lightning wallet.

Now, Alice is ready to start using the Lightning Network by taking her bitcoin "off-chain" in order to take advantage of the fast, cheap, and private payments that the Lightning Network offers.

==== Lightning Network Channels

Swiping right, Alice accesses the "LIGHTNING CHANNELS" section of Eclair. Here she can manage the channels that will connect her wallet to the Lightning Network.

Let's review the definition of a "Lightning Network Channel" at this point, to make things a bit clearer. Firstly, the word "channel" is a metaphor for a _financial relationship_ between Alice's Lightning wallet and another Lightning wallet. We call it a channel because it is a means for Alice's wallet and this other wallet to exchange many payments with each other on the Lightning Network (off-chain) without committing transactions to the Bitcoin blockchain (on-chain).

The wallet or _node_ that Alice opens a channel to is called her _channel peer_. Once "opened", a channel can be used to send many payments back and forth between Alice's wallet and her channel peer.

Furthermore, Alice's channel peer can _forward_ payments via other channels further into the Lightning Network. This way, Alice can _route_ a payment to any wallet (e.g. Bob's Lightning wallet) as long as Alice's wallet can find a _path_ made by hopping from channel to channel, all the way to Bob's wallet.

In other words: Alice needs one or more channels that connects her to one or more other nodes on the Lightning Network. She doesn't need a channel to connect her wallet directly to Bob's Cafe in order to send Bob a payment, though she can choose to open a direct channel too. Any node in the Lightning Network can be used for Alice's first channel. The more well-connected a node is the more people Alice can reach. In this example, since we want to also demonstrate payment routing, we won't have Alice open a channel directly to Bob's wallet. Instead, we will have Alice open a channel to a well-connected node and then later use that node to forward her payment, routing it through any other nodes as necessary to reach Bob.

At first, there are no open channels, so as we see in <<eclair-tutorial2.png>>, the "LIGHTNING CHANNELS" tab displays an empty list. If you notice, on the bottom right corner, there is a plus symbol (+), which is a button to open a new channel.

[[eclair-channels]]
.Lightning Channels Tab
image:images/eclair-tutorial2.png["Lightning Channels Tab"]

Alice presses the plus symbol and is presented with four possible ways to open a channel:

* Paste a node URI
* Scan a node URI
* Random node
* ACINQ node

A "node URI" is a Universal Resource Identifier (URI) that identifies a specific Lightning node. Alice can either paste such a URI from her clipboard or scan a QR code containing that same information. An example of a node URI is shown as a QR code in <<node-URI-QR>> and below it as a text string:

[[node-URI-QR]]
.node URI as a QR code
image:images/node-URI-QR.png[width=120]

[[node-URI-example]]
.node URI
++++
0237fefbe8626bf888de0cad8c73630e32746a22a2c4faa91c1d9877a3826e1174@1.ln.aantonop.com:9735
++++

While Alice could select a specific Lightning node, or use the "Random node" option to have the Eclair wallet select a node at random, she will select the "ACINQ Node" option to connect to one of ACINQ's well-connected Lightning nodes.

Choosing the ACINQ node will slightly reduce Alice's privacy, as it will give ACINQ the ability to see all of Alice's transactions. It will also create a Single Point of Failure, since Alice will only have one channel, and if the ACINQ node is not available, Alice will not be able to make payments. To keep things simple at first, we will accept these trade-offs. In subsequent chapters we will gradually learn how to gain more independence and make fewer trade-offs!

Alice selects "ACINQ Node" and is ready to open her first channel on the Lightning network.

==== Opening a Lightning Channel

When Alice selects a node to open a new channel, she is asked to select how much bitcoin she wants to allocate to this channel. In subsequent chapters, we will discuss the implications of these choices, but for now, Alice will allocate almost all her funds to the channel. Since she will have to pay transaction fees to open the channel, she will select an amount a few dollars (or a few thousandths of a bitcoin) less than her total balance.

Alice allocates 0.018BTC of her 0.020 total to her channel and accepts the default fee rate, as shown in <<eclair-open-channel>>.

[[eclair-open-channel]]
.Opening a Lightning Channel
image:images/eclair-open-channel-detail.png[]

Once she clicks "OPEN", her wallet constructs the special Bitcoin transaction that opens a Lightning channel, known as the _funding transaction_. The "on-chain" funding transaction is sent to the Bitcoin Network for confirmation.

Alice now has to wait again (see <<eclair-channel-waiting>>) for the transaction to be recorded on the Bitcoin blockchain. As with the initial Bitcoin transaction that she used to acquire her bitcoin, she has to wait for six or more confirmations (approximately one hour).

[[eclair-channel-waiting]]
.Waiting for the Funding Transaction to Open the Channel
image:images/eclair-channel-waiting.png["Waiting for the Funding Transaction to Open the Channel"]

Once the funding transaction is confirmed, Alice's channel to the ACINQ node is open, funded and ready, as shown in <<eclair-channel-open>>:

[[eclair-channel-open]]
.Channel is Open
image:images/eclair-channel-open.png["Channel is Open"]

[TIP]
====
Did you notice that the channel amount seems to have changed? It hasn't: the channel contains 0.018 BTC, but in the time between screenshots the BTC exchange rate changed, so the USD value is different. You can choose to show balances in BTC or USD, but keep in mind that USD values are calculated in real time and will change!
====

=== Buying a Cup of Coffee

Alice now has everything ready to start using the Lightning Network. As you can see, it took a bit of work and a bit of time waiting for confirmations. However, now subsequent actions are fast and easy. The Lightning Network enables payments without having to wait for confirmations, as funds get settled in seconds.

Alice grabs her mobile device and runs to Bob's Cafe in her neighborhood. She is excited to try her new Lightning wallet and use it to buy something!

==== Bob's Cafe

Bob has a simple Point-of-Sale (PoS) application for the use of any customer who wants to pay with bitcoin over the Lightning Network. As we will see in the next chapter, Bob uses the popular open source platform _BTCPay Server_ which contains all the necessary components for an e-commerce or retail solution, such as:

* A Bitcoin Node using the Bitcoin Core software
* A Lightning Node using the c-lightning software
* A simple PoS application for a tablet

BTCPay Server makes it simple to install all the necessary software, upload pictures and product prices, and launch a store quickly.

On the counter at Bob's Cafe, there is a tablet device showing <<bob-cafe-posapp>>:

[[bob-cafe-posapp]]
.Bob's Point-of-Sale Application
image:images/bob-cafe-posapp.png[]

==== A Lightning Invoice

Alice selects the "Cafe Latte" option from the screen and is presented with a _Lightning Invoice_ as shown in <<bob-cafe-invoice>>

[[bob-cafe-invoice]]
.Lightning Invoice for Alice's latte
image:images/bob-cafe-invoice.png[]

To pay the invoice, Alice opens her Eclair wallet and selects the "Send" button (which looks like a right-facing arrow) under the "TRANSACTION HISTORY" tab, as shown in <<alice-send-start>>.

[[alice-send-start]]
.Alice Send
image:images/alice-send-start.png[width=300]

Alice selects the option to "scan a payment request" and scans the QR code displayed on the screen of the tablet (see <<bob-cafe-invoice>>), and is prompted to confirm her payment, as shown in <<alice-send-detail>>:

[[alice-send-detail]]
.Alice's Send Confirmation
image:images/alice-send-detail.png[width=300]

Alice presses "PAY," and a second later, Bob's tablet shows a successful payment. Alice has completed her first Lightning Network payment! It was fast, inexpensive, and easy. Now she can enjoy her latte which was purchased using the most advanced payment technology in the world. And from now on, whenever Alice feels like drinking a coffee at Bob's Cafe she selects an item on Bob's tablet screen, scans the QR code with her cell phone, clicks pay and is served a coffee, all within seconds and all without "on-chain" transaction.


=== Conclusion

In this chapter, we followed Alice as she downloaded and installed her first Lightning wallet, acquired and transferred some bitcoin, opened her first Lightning channel, and bought a cup of coffee by making her first payment on the Lightning Network. In the following chapters, we will look "under the covers" at how each component in the Lightning Network works, and how Alice's payment reached Bob's Cafe.
