[[operating_ln_node]]
== Керування Нодою Lightning Network

Якщо ви дійшли до цього місця, то вже мабуть налаштували Lightning-гаманець. У цьому розділі ми зробимо ще один крок вперед і налаштуємо повну Lightning-ноду. Окрім налаштування ми дізнаємося, як нею керувати та підтримувати впродовж часу.

Є багато причин, чому ви можете бажати підняти власну Lightning-ноду. Серед них:

* Бути повноцінним, активним учасником Lightning Network, а не просто кінцевим споживачем.
* Запустити магазин електронної комерції або отримувати Lightning-платежі.
* Заробляти на комісіях за маршрутизацію.
* Розробляти нові сервіси, застосунки або плагіни для Lightning Network.
* Підвищити свою фінансову конфіденційність шляхом використання Lightning.
* Для використання деяких програм, що працюють поверх Lightning, наприклад, мессенджерів через Lightning.
* Заради фінансової свободи, незалежністі та суверенітету.

Утримання ноди Lightning Network вимагає певних витрат. Вам потрібен комп’ютер, постійне з’єднання з Інтернетом, багато місця на диску та багато часу!
Операційні витрати включатимуть витрати на електроенергію.

Проте навички, які ви отримаєте завдяки цьому досвіду, мають свою цінність і можуть бути застосовані до багатьох інших завдань.

Давайте розпочнемо!

[NOTE]
====
Важливо мати правильні очікування, виходячи із вірних фактів.
Якщо ви плануєте керувати Lightning-нодою _виключно_ для отримання доходу від комісій за маршрутизацію платежів, будь ласка, спочатку старанно виконайте домашнє завдання. Вести прибутковий бізнес, керуючи нодою Lightning точно _не_ легко. Розрахуйте всі свої початкові та постійні витрати в електронній таблиці. Уважно вивчіть статистику Lightning Network.
Який поточний обсяг платежів? Який обсяг на ноду? Які в середньому поточні комісії за маршрутизацію? Спілкуйтесь на форумах, запитуйте
поради та відгуки від досвідчених членів спільноти. Сформуйте свою власну думку _після_ того, як ретельно виконаєте вправи. Більшість людей бачать власну мотивацію керувати нодою не у фінансовій вигоді, а в чомусь іншому.
====

=== Вибір платформи

Є багато різних варіантів місць, де ви можете підняти Lightning-ноду - на невеликому міні-ПК, розміщеному у вас вдома, на виділеному сервері або у хмарному хостингу. Обраний вами спосіб залежатиме від наявних у вас ресурсів і від того, скільки грошей ви хочете витратити.

==== Чому надійність важлива для роботи Lightning-ноди?

Для Біткоїна апаратне забезпечення не має особливого значення, якщо тільки мова не йде про майнинг.
Програмне забезпечення ноди Bitcoin Core можна запускати на будь-якій машині, яка відповідає його мінімальним вимогам. Для отримання платежів не потрібно бути онлайн; лише для відправлення.
Якщо Біткоїн-нода не працює протягом тривалого періоду часу, користувач може просто її перезавантажити, і як тільки вона підключиться до мережі, то повторно синхронізує блокчейн.

У Lightning користувач повинен бути в мережі, щоб надсилати _і_ отримувати платежі. Якщо користувач Lightning перебуває оффлайн, він не може приймати жодних платежів, а його відкриті інвойси не можуть бути оплачені.
Крім того, відкриті канали оффлайн ноди не можуть використовуватися для маршрутизації платежів. Ваші партнери по каналу помітять, що ви перебуваєте оффлайн і не зможуть зв’язатись з вами для здійснення платежу. Якщо ви перебуваєте оффлайн занадто часто, вони можуть розцінити заблоковані у ваших з ними каналах біткоїни, як недостатньо використовувані, і можуть закрити ці канали. Ми вже обговорювали випадок протокольної атаки, коли ваш партнер по каналу намагається вдатися до шахрайства, транслюючи в мережу попередню транзакцію зобов'язання. Якщо ви перебуваєте оффлайн і не слідкуєте за вашими каналами, то спроба крадіжки може мати успіх, і ви не встигнете звернутися до рятівних засобів після закінчення терміну блокування за часом.
Отже, надійність надзвичайно важлива для Lightning-ноди.

Існують також проблеми з відмовою обладнання та втратою даних. У Біткоїні апаратний збій може бути тривіальною проблемою, якщо у користувача є резервна копія мнемонічної фрази або приватних ключів. Біткоїн-гаманець і біткоїни в ньому можна легко відновити за допомогою закритих ключів на новому комп'ютері. Більшість інформації можна повторно завантажити з блокчейну.

На відміну від цього, у Lightning інформація про канали користувача, включаючи транзакції зобов’язань та секрети відкликання, не є публічною і зберігається лише на апаратному забезпеченні окремого користувача.
Тому збої програмного та апаратного забезпечення в мережі Lightning можуть легко призвести до втрати коштів.

==== Які є типи обладнання для Lightning-нод?

* **Комп’ютери Загального Призначення**: ноду Lightning Network можна запустити на домашньому комп’ютері чи на ноутбуці під управлінням Windows, Mac OS або Linux. Зазвичай вона запускається разом з Біткоїн-нодою.
* **Виділене Обладнання**: Lightning-ноду також можна запустити на спеціальному обладнанні, такому як Raspberry Pi, Rock64 або міні-ПК. При цьому зазвичай запускається стек програмного забезпечення, включаючи Біткоїн-ноду та інші програми. Такий підхід популярний, адже в цьому випадку обладнання використовується виключно для запуску та обслуговування Lightning-ноди, і зазвичай воно налаштовується за допомогою інсталяційного "помічника".
* **Попередньо Налаштоване Обладнання**: ноду Lightning Network також можна запустити на спеціальному обладнанні, підібраному та налаштованому для цього. Сюди входять рішення "з коробки" у вигляді комплекту для збірки або готові під ключ.

==== Запуск в "хмарі"

_Віртуальний Приватний Сервер_ (VPS) та послуги "хмарних обчислень", такі як Microsoft Azure, Google Cloud, Amazon Web Services (AWS) або DigitalOcean, цілком доступні і можуть бути налаштовані дуже швидко. Хостинг Lightning-ноди може коштувати від 20 до 40 доларів на місяць на такому сервісі.

Однак, як кажуть, "'хмара' - це просто комп'ютери, які належать іншим людям". Використання цих сервісів означає запуск вашої ноди на комп’ютерах інших людей. Це призводить до відповідних переваг та недоліків. Серед ключових переваг - зручність, ефективність, аптайм та, можливо, навіть вартість. Хмарний оператор керує та запускає ноду у більшій мірі автоматично, забезпечуючи вам зручність та ефективність. Вони забезпечують прекрасний аптайм та доступність, часто набагато краще тих, що можна досягти вдома. Якщо врахувати, що витрати лише на електроенергію для роботи сервера в багатьох західних країнах становлять близько 10 доларів на місяць, то, додавши до цього вартість пропускної здатності мережі та самого обладнання, пропозиція VPS стає фінансово конкурентоспроможною. Нарешті, з VPS вам не потрібне місце для ПК вдома, і у вас не виникає проблем із шумом або нагріванням ПК.
З іншого боку, такий підхід має кілька помітних недоліків. Lightning-нода, що працює в "хмарі", завжди буде менш захищеною і менш приватною, ніж нода на вашому власному комп'ютері. Крім того, послуги хмарних обчислень дуже централізовані. Переважна більшість нод Біткоїн і Lightning, що працюють на таких сервісах, розташовані в декількох датацентрах у Вірджинії, Саннівейлі, Сіетлі, Лондоні та Франкфурті. Коли мережі або датацентри цих провайдерів знаходяться на сервісному обслуговуванні, це впливає на тисячі нод у так званих "децентралізованих" мережах.

Якщо у вас є можливість та пропускна здатність мережі для роботи ноди на власному комп’ютері вдома або в офісі, то це може бути ліпшим варіантом, ніж запуск її в хмарі. Тим не менше, якщо варіант із власним сервером є неможливим, неодмінно розгляньте можливість роботи на VPS.

==== Запуск ноди вдома

Якщо у вас вдома чи в офісі є Інтернет-з'єднання з прийнятною пропускною здатністю, ви можете запустити Lightning-ноду там. Будь-якого "широкосмугового" з'єднання буде достатньо для запуску легкої ноди, а швидке з'єднання дозволить вам також запустити повну Біткоїн-ноду.

Хоча ви можете запустити Lightning-ноду (і навіть Біткоїн-ноду) на своєму ноутбуці, це почне дратувати вас досить швидко. Ці програми споживають ресурси вашого комп’ютера і повинні працювати цілодобово 24/7. Ваші програми, такі як браузер або електронна таблиця, будуть конкурувати з фоновими сервісами Lightning за ресурси вашого комп’ютера. Іншими словами, ваш браузер та інші робочі програми почнуть тормозити.
І коли ваш текстовий редактор підвісить ваш ноутбук, ваша Lightning-нода також впаде. Крім того, вам ніколи не слід вимикати ноутбук.
Все це в сукупності призводить до ситуації, далекої від ідеалу. Те саме стосуватиметься вашого настільного ПК для щоденного користування.

Натомість більшість користувачів оберуть запустити ноду на окремому комп’ютері. На щастя, для цього вам не потрібен комп’ютер "серверного" класу. Ви можете запустити Lightning-ноду на міні-ПК, такому як Raspberry Pi або ПК на базі Atom без кулерів. Це прості комп’ютери, які зазвичай використовуються в якості медіа-серверу або хабу для автоматизації будинку. Вони відносно недорогі, ціною від 50 до 150 доларів США на момент написання цього тексту. Для роботи міні-ПК вам знадобиться зовнішній жорсткий USB-диск, який знову ж таки відносно недорогий і коштує приблизно 50 доларів США. Перевага окремого міні-ПК як платформи для Lightning- та Біткоїн-нод полягає в тому, що він може працювати безперервно, безшумно та ненав’язливо у вашій домашній мережі, сховавшись за вашим роутером або телевізором. Ніхто навіть не дізнається, що ця маленька коробочка насправді є частиною світової банківської системи!

==== Яке обладнання необхідне для запуску ноди Lightning?

Як мінімум, для запуску Lightning-ноди потрібно:

* **CPU**: для запуску Біткоїн-ноди потрібна процесорна потужність достатня для постійного завантаження та верифікації нових блоків. Користувач також має врахувати початкове завантаження блоків при налаштуванні нової Біткоїн-ноди, яке може зайняти від кількох годин до декількох днів. Рекомендується 2- або 4-ядерний процесор.

* **RAM**: система з 2 ГБ оперативної пам’яті буде _ледве_ тягнути Біткоїн- і Lightning-ноди. 4 ГБ буде набагато краще. Початкове завантаження блоків буде особливо важким завданням для систем з менше 4 ГБ оперативної пам'яті. Більше 8 ГБ оперативної пам'яті не потрібно, оскільки вузьким місцем для таких сервісів є центральний процесор через криптографічні операції, такі як перевірка підписів.

* **Накопичувач**: це може бути жорсткий диск або твердотільний накопичувач (SSD). SSD-диск буде значно швидшим для Біткоїн-ноди. Більшу частину диска займатиме блокчейн Біткоїна, який займає понад 340 ГБ (станом на вересень 2020 року).

* **Інтернет-з'єднання**: для завантаження нових блоків Біткоїну, а також для комунікації з іншими пірами Lightning потрібне надійне підключення до Інтернету. Під час роботи передбачається скачування від 10 ГБ до 100 ГБ даних на місяць залежно від конфігурації. При першому запуску повна Біткоїн-нода завантажує блокчейн розміром 340 Гб станом на вересень 2020 р.

* **Блок Живлення**: потрібне надійне джерело живлення, оскільки Lightning-ноди повинні бути постійно онлайн. Збій живлення спричиняє збій незавершених платежів. Для нод маршрутизації з великим навантаженням бажано мати резервне джерело живлення або джерело безперебійного живлення (UPS) на випадок відключення електроенергії.
В ідеалі вам також слід підключити свій Інтернет-роутер до цього UPS.

* **Бекап (Резервне Копіювання)**: Резервне копіювання має вирішальне значення, оскільки збій може призвести до втрати даних, а отже до втрати коштів.
Користувачу знадобиться якесь рішення для бекапу. Це може бути автоматизоване резервне копіювання на сервер або веб-сервіс, керований користувачем. Також це може бути автоматизований локальний бекап на інше обладнанні, наприклад на другий жорсткий диск. Для найкращих результатів можна поєднувати як локальне, так і віддалене резервне копіювання.

==== Переключення конфігурації хмарного сервера

При оренді хмарного сервера часто економічно вигідно змінювати конфігурацію між двома фазами роботи: під час початкового завантаження блоків (наприклад, у перший день) знадобиться швидший процесор і швидший диск. Після синхронізації блокчейну вимоги до процесора та швидкості диску набагато менше, тому параметри сервера можна знизити до більш економічного рівня.

Наприклад, у хмарі Amazon для початкового завантаження блоків ми б використовували конфігурацію з 8-16 ГБ оперативної пам'яті, 8-ядерним процесором (наприклад, t3-large або m3.large) і швидким SSD на 400 ГБ (1000+ provisioned IOPS), що зменшило б час завантаження блоків до 6-8 годин. Після завершення, ми б зменшили конфігурацію до 2 ГБ оперативної пам'яті, 2-ядерного процесора (наприклад, t3.small) і звичайного HDD на 1 ТБ. Це коштує приблизно стільки ж, якщо б весь час ви використовували повільніший сервер, але це допоможе вам запустити роботу менш ніж за день замість того, аби чекати майже тиждень на початкове завантаження блоків.

===== Постійне сховище даних (накопичувач)

Якщо ви використовуєте міні-ПК або орендуєте сервер, сховище може бути найдорожчою частиною і коштуватиме, як комп’ютер та підключення разом взяті.

Давайте подивимось на різні доступні варіанти. По-перше, існує два основних типи накопичувачів, жорсткі диски (HDD) і твердотільні накопичувачі (SSD). HDD дешевші, SSD швидші, але обидва вони роблять свою роботу.

Найшвидші SSD, що доступні сьогодні, використовують інтерфейс NVMe. NVMe SSD швидші у висококласних машинах, але й дорожчі.
Традиційні SATA SSD дешевші, але не такі швидкі. SATA SSD працюють достатньо добре для вашої ноди.
Менші комп’ютери можуть бути не в змозі скористатися перевагами NVMe SSD.
Наприклад, Raspberry Pi 4 не може ними скористатися через обмежену пропускну здатність USB-порту.

Щоб обрати розмір, подивимось на блокчейн Біткоїну. Станом на вересень 2020 року його розмір становить 340 ГБ, включаючи індекс транзакцій, і збільшується приблизно на 60 ГБ/рік. Якщо ви хочете мати деякий запас для майбутнього росту або встановити ще щось на свою ноду, придбайте принаймні 512 ГБ або краще 1 ТБ.

=== Використання інсталлятора або помічника

Встановлення ноди Lightning або Bitcoin може бути лякаючим, якщо ви не знайомі з середовищем командного рядка. На щастя, існує низка проектів, які створюють "помічників", тобто програмне забезпечення, яке встановлює та налаштовує різні компоненти замість вас. Вам все одно доведеться вивчити деякі "заклинання" командного рядка, щоб взаємодіяти з вашою нодою, але більшість початкових робіт робиться за вас.

==== RaspiBlitz

Одним з найпопулярніших та найбільш повних "помічників" є _RaspiBlitz_, проект, побудований Крістіаном Ротцоллом. Він призначений для встановлення на Raspberry Pi 4. RaspiBlitz постачається з рекомендованим апаратним «набором», який ви можете зібрати за лічені години або максимум за вікенд. Якщо ви відвідуєте Lightning "хакатон" у своєму місті, то, швидше за все, побачите багато людей, які працюють над налаштуванням своїх RaspiBlitz, обмінюються порадами та допомагають один одному. Ви можете знайти проект RaspiBlitz тут:

https://github.com/rootzoll/raspiblitz

image::images/raspiblitz.jpg[]

На додаток до нод Bitcoin та Lightning, RaspiBlitz може встановити ряд додаткових сервісів, таких як:

* TOR (для запуску Прихованих Сервісів)
* ElectRS (Electrum сервер мовою Rust)
* BTCPayServer (Процессинг криптовалютних платежів)
* BTC-RPC-Explorer (Експлорер блокчейну Bitcoin)
* Ride The Lightning (GUI для керування Lightning-нодою)
* LNbits (Lightning гаманець/система аккаунтів)
* SpecterDesktop (GUI для хардварних мультисиг-гаманців Trezor, Ledger, Coldcard & Specter-DIY)
* LNDmanage (Просунута система управління каналами з командного рядка)
* Loop (сервіс для Submarine Swaps)
* JoinMarket (CoinJoin сервіс)


==== MyNode

_MyNode_ - це ще один популярний "помічник" з відкритим кодом, що включає багато програм, пов'язаних з Бткоїном. Встановити його просто: ви «прошиваєте» програму встановлення на SD-карту та завантажуєте свій міні-ПК з SD-карти. Вам не потрібен монітор, щоб використовувати myNode, оскільки панель адміністрування доступна віддалено через браузер. Якщо у вашому міні-ПК немає монітора, миші чи клавіатури, ви можете керувати ним з іншого комп'ютера або навіть зі свого смартфона. Після встановлення перейдіть на http://mynode.local/ і створіть гаманець і вузол Lightning у два кліки.

Ви можете знайти проект MyNode тут:

https://mynodebtc.com/

На додаток до нод Bitcoin та Lightning, MyNode може додатково встановити різні додаткові сервіси, такі як:

- Ride The Lightning (GUI для керування Lightning-нодою)
- Підтримка VPN для віддаленного управління (OpenVPN)
- lndmanage (система управління з командного рядка)
- btc-rpc-explorer (Експлорер блокчейну Bitcoin)

==== BTCPay Server

Платформа для електронної комерції та платежів _BTCPay Server_ спочатку не була створена як інсталяційний "помічник", але вона має надзвичайно просту систему установки, яка використовує docker-контейнери та +docker-compose+ для встановлення Біткоїн-ноди, Lightning-ноди, платіжного шлюзу та багатьох інших послуг. _BTCPay Server_ можна встановити на різне апаратне забезпечення від простого Raspberry Pi 4 (рекомендується 4 ГБ) до міні-ПК, старого ноутбука, настільного комп'ютера або сервера.

_BTCPay Server_ - це повнофункціональна само-кастодіальна платформа для електронної комерції, яка може бути інтегрована з багатьма платформами електронної комерції, такими як Wordpress Woocommerce та іншими. Встановлення повної ноди є лише кроком встановлення платформи електронної комерції.
Хоча спочатку _BTCPay Server_ був розроблений як функціональна заміна комерційної платіжного сервісу та API _Bitpay_, він розвинувся, щоб стати повною платформою для BTC та Lighting сервісів, пов’язаних з електронною комерцією. Для багатьох продавців або магазинів це електронне комерційне рішення під ключ.

Більше інформації тут:

https://btcpayserver.org/

На додаток до нод Bitcoin та Lightning, BTCPay Server може додатково встановити різні додаткові сервіси, такі як:

- Lightning-нода c-Lightning або LND
- Підтримка Litecoin
- Підтримка Monero
- Spark server (c-lightning веб-гаманець)
- Charge server (c-lightning API для електронної комерції)
- Ride The Lightning (GUI для керування Lightning-нодою)
- Багато форків BTC
- BTCTransmuter (сервіс обробки подій з підтримкою обміну валют)

Кількість додаткових сервісів та функцій швидко зростає, тому наведений вище список - лише невелика частина того, що доступно на платформі BTCPay Server.

==== Повна або легка нода Біткоїн

Важливим вибором є вибір ноди Біткоїн та її конфігурації. _Bitcoin Core_, референсна реалізація, є найпоширенішим вибором, але не єдиним з доступних. Одним з альтернативних варіантів є _btcd_, імплементація ноди Біткоїн мовою Go. Btcd підтримує деякі функції, недоступні в Bitcoin Core, але корисні для запуску Lightning-ноди LND.

Друге питання - утримувати _архівну_ Біткоїн-ноду з повною копією блокчейну (близько 350 ГБ в середині 2020 року) або _обрізаний_ (_pruned_) блокчейн, який зберігає лише найновіші блоки. Обрізаний блокчейн може заощадити деяке місце на диску, але повний блокчейн все одно потрібно буде завантажити принаймі один раз (під час початкового завантаження блоків), тому це не зекономить мережевий трафік. Використання обрізаної ноди для запуску Lightning-ноди все ще є експериментальним і може не підтримувати весь функціонал. Однак багато людей успішно використовують таку ноду.

Нарешті, у вас також є можливість взагалі не запускати Біткоїн-ноду. Натомість ви можете використовувати Lightning-ноду LND у "полегшеному" режимі, використовуючи протокол _neutrino_ для отримання інформації про блокчейн із загальнодоступних Біткоїн-нод, що утримуються іншими людьми. Такий спосіб означатиме, що ви використовуєте ресурси мережі Біткоїн, нічого не віддаючи взамін. Натомість ви даєте свої ресурси та робите внесок у спільноту Lightning Network. Для невеликих Lightning-нод це, як правило, зменшує мережевий трафік порівняно із запуском повної ноди Біткоїн.

Майте на увазі, що управління Біткоїн-нодою дозволяє вам підтримувати інші сервіси, також і такі що працюють поверх Lightning. Для цих інших сервісів може знадобитися архівна (не обрізана) Біткоїн-нода, і вони часто взагалі не зможуть працювати без Біткоїн-ноди. Подумайте заздалегідь, які інші сервіси ви можете хотіти використовувати зараз чи в майбутньому, щоб прийняти обґрунтоване рішення щодо типу обраної вами Біткоїн-ноди.

Суть цього рішення полягає в наступному: Якщо ви можете дозволити собі диск розміром більше 500 Гб, запустіть повну архівну ноду Біткоїн. Ви будете вносити ресурси в систему Біткоїн і допомагати іншим, хто не може собі цього дозволити. Якщо ви не можете дозволити собі настільки великий диск, запустіть обрізану ноду. Якщо ви не можете дозволити собі диск або пропускну здатність навіть для обрізаної ноди, запустіть легку ноду LND з neutrino.

==== Вибір операційної системи

Наступним кроком є вибір операційної системи для вашої ноди. Переважна більшість Інтернет-серверів працює на якомусь із варіантів Linux. Linux - це обрана платформа для Інтернету, оскільки це потужна операційна система з відкритим кодом. Однак Linux потребує вивчення і вимагає добре розумітися у середовищі командного рядка. Це часто відлякує нових користувачів.

Зрештою, більшість служб можна запустити на будь-якій сучасній операційній системі що працює згідно із стандартом POSIX, що включає Mac OS, Windows і, звичайно, Linux. Ваш вибір має засновуватися на вашому знайомстві та комфортній роботі з операційною системою та вашими навчальними цілями. Якщо ви хочете розширити свої знання та навчитися керувати системою Linux, це чудова можливість зробити це на конкретному проекті та маючи чітку мету. Якщо ви просто хочете, щоб нода був працювала, оберіть ту ОС, яку знаєте.

У наш час багато сервісів також поставляються у вигляді контейнерів, як правило, на базі системи _Docker_. Ці контейнери можна розгорнути на різних операційних системах, абстрагуючись від базової ОС. Можливо, вам доведеться вивчити деякі команди командного рядку Linux, оскільки більшість контейнерів запускають якийсь варіант Linux всередині.

=== Choose your Lightning node implementation

As with the choice of operating system, your choice of Lightning node implementation should depend primarily on your familiarity with the programming language and development tools used by the projects. While there are some small differences in features between the various node implementations, those are relatively minor and most implementations converge on the common standards defined by the BOLTs.

Familiarity with the programming language and build system, on the other hand, is a good basis for choosing a node. That's because installation, configuration, ongoing maintenance, and troubleshooting will all involve interacting with the various tools used by the build system. This includes:

* make, autotools, and GNU utilities for c-lightning
* go utilities for LND
* Java/Maven for Eclair

The programming language doesn't just influence the choice of build system but also many other aspects of the program. Each programming language comes with a whole design philosophy and affects many other aspects, such as:

* Format and syntax of configuration files
* File locations (in the filesystem)
* Command-line arguments and their syntax
* Error message formatting
* Prerequisite libraries
* Remote Procedure Call interfaces

When you choose your Lightning node, you are also choosing all of the above characteristics. So your familiarity with these tools and design philosophies will make it easier to run a node. Or harder, if you land in an unfamiliar domain.

On the other hand, if this is your first foray into the command-line and server/service environment, you will find yourself unfamiliar with any implementation and have the opportunity to learn something completely new. In that case you might want to decide based on a number of other factors, such as:

* Quality of support forums and chat rooms
* Quality of documentation
* Degree of integration with other tools you want to run

As a final consideration, you may want to examine the performance and reliability of different node implementations. This is especially important if you will be using this node in a production environment and expect heavy traffic and high reliability requirements. This might be the case if you plan to run the payment system of a shop on it.

=== Installing a Bitcoin or Lightning node

You decided not to use an installation "helper" and instead to dive into the command-line of a Linux operating system? That is a brave decision and we'll try to help you make it work. If you'd rather not try to do this manually, consider using an application that helps you install the node software or a container based solution, as described in <<helpers>>.

[WARNING]
====
This section will delve into the advanced topic of system administration from the command-line. You will need to do additional research and learn more skills not covered here. Linux administration is a complicated topic and there are many pitfalls. Proceed with caution!
====

In the next few sections we will briefly describe how to install and configure a Bitcoin and Lightning node on a Linux operating system. You will need to review the installation instructions for the specific Bitcoin and Lightning node applications you decided to use. You can usually find these in a file called +INSTALL+ or in the +docs+ sub-directory of each project. We will only describe some of the common steps that apply to all such services, and the instructions we offer will be necessarily incomplete.

==== Background services

For those accustomed to running applications on their desktop or smartphone, an application always has a graphical user interface even if it may sometimes run in the background. The Bitcoin and Lightning node applications, however, are very different. These applications do not have a graphical user interface built in. Instead, they run as _headless_ background services, meaning they are always operating in the background and do not interact with the user directly.

This can create some confusion for users who are not used to running background services. How do you know if such a service is currently running? How do you start and stop it? How do you interact with it? The answers to these questions depend on the operating system you are using. For now we will assume you are using some Linux variant and answer them in that context.

==== Process isolation

Background services usually run under a specific user account in order to isolate them from the operating system and each other. For example, Bitcoin Core is configured to run as user +bitcoin+. You will need to use the command-line to create a user for each of the services you run.

In addition, if you have connected an external drive, you will need to tell the operating system to relocate the user's home directory to that drive. That's because a service like Bitcoin Core will create files under the user's home directory. If you are setting it up to download the full Bitcoin blockchain, these files will take up several hundred Gigabytes. Here, we assume you have connected the external drive and it is located on the +/external_drive/+ path of the operating system.

On most Linux systems you can create a new user with the +useradd+ command, like this:

----
$ sudo useradd -d /external_drive/bitcoin -s /dev/null bitcoin
----

The +d+ flag assigns the user's home directory. In this case, we put it on the external drive. The +s+ flag assigns the user's interactive shell. In this case we set it to +/dev/null+ to disable interactive shell use. The last argument is the new user's username +bitcoin+.

==== Node startup

For both Bitcoin and Lightning node services, "installation" also involves creating a so called _startup script_ to make sure that the node starts when the computer boots. Startup and shutdown of background services is handled by an operating system process, which in Linux is called _init_ or _systemd_. You can usually find a system startup script in the +contrib+ sub-directory of each project. For example, if you are on a modern Linux OS that uses +systemd+, you would find a script called +bitcoind.service+, that can start and stop the Bitcoin Core node service.

Here's an example of what a Bitcoin node's startup script looks like, taken from the Bitcoin Core code repository:

.From bitcoin/contrib/init/bitcoind.service
----
[Unit]
Description=Bitcoin daemon
After=network.target

[Service]
ExecStart=/usr/bin/bitcoind -daemon \
                            -pid=/run/bitcoind/bitcoind.pid \
                            -conf=/etc/bitcoin/bitcoin.conf \
                            -datadir=/var/lib/bitcoind

# Make sure the config directory is readable by the service user
PermissionsStartOnly=true
ExecStartPre=/bin/chgrp bitcoin /etc/bitcoin

# Process management
####################

Type=forking
PIDFile=/run/bitcoind/bitcoind.pid
Restart=on-failure
TimeoutStopSec=600

# Directory creation and permissions
####################################

# Run as bitcoin:bitcoin
User=bitcoin
Group=bitcoin

# /run/bitcoind
RuntimeDirectory=bitcoind
RuntimeDirectoryMode=0710

# /etc/bitcoin
ConfigurationDirectory=bitcoin
ConfigurationDirectoryMode=0710

# /var/lib/bitcoind
StateDirectory=bitcoind
StateDirectoryMode=0710

[...]

[Install]
WantedBy=multi-user.target
----

As the root user, install the script by copying it into the +systemd+ service folder +/lib/systemd/system/+ and then reload +systemd+:

----
$ sudo systemctl daemon-reload
----

Next, enable the service:

----
$ sudo systemctl enable bitcoind
----

You can now start and stop the service. Don't start it yet, as we haven't configured the Bitcoin node.

----
$ sudo systemctl start bitcoind
$ sudo systemctl stop bitcoind
----

==== Node configuration

To configure your node, you need to create and reference a configuration file. By convention, this file is usually created in +/etc+, under a directory with the name of the program. For example, Bitcoin Core and LND configurations would usually be stored in:

+/etc/bitcoin/bitcoin.conf+
+/etc/lnd/lnd.conf+

These configuration files are text files with each line expressing one configuration option and its value. Default values are assumed for anything not defined in the configuration file. You can see what options can be set in the configuration in two ways. First, running the node application with a +help+ argument will show the options that can be defined on the command-line. These same options can be defined in the configuration file. Second, you can usually find an example configuration file, with all the default options, in the code repository of the software.

You can find one example of a configuration file in each of the docker images we used in <<set_up_a_lightning_node>>. For example, the file +code/docker/bitcoind/bitcoind/bitcoin.conf+:

.Configuration file for docker bitcoind (code/docker/bitcoind/bitcoind/bitcoin.conf)
----
include::code/docker/bitcoind/bitcoind/bitcoin.conf[]
----

That particular configuration file configures Bitcoin Core for operation as a +regtest+ node and provides a weak username and password for remote access, so you shouldn't use it for your node configuration. However, it serves to illustrate the syntax of a configuration file and you can make adjustments to it in the docker container to experiment with different options. See if you can use the +bitcoind -help+ command to understand what each of the options does in the context of the docker network we build in <<set_up_a_lightning_node>>.

Often, the defaults suffice, and with a few modifications your node software can be configured quickly. To get a Bitcoin Core node running with minimal customization, you only need four lines of configuration:

----
server=1
daemon=1
txindex=1
rpcuser=USERNAME
rpcpassword=PASSWORD
----

Even the +txindex+ option is not strictly necessary, though it will ensure your Bitcoin node creates an index of all transactions, which is required for some applications. The +txindex+ option is not required to run a Lightning node.

A c-lightning Lightning node running on the same server also only requires a few lines in the configuration:

----
network=mainnet
bitcoin-rpcuser=USERNAME
bitcoin-rpcpassword=PASSWORD
----

In general, it is a good idea to minimize the amount of customization of these systems. The default configuration is carefully designed to support the most common deployments. If you modify a default value, it may cause problems later on or reduce the performance of your node. In short, modify only when necessary!

==== Network configuration

Network configuration is normally not an issue when configuring a new application. However, peer-to-peer networks like Bitcoin and the Lightning network present some unique challenges for network configuration.

In a centralized service, your computer connects to the "big servers" of some corporation, and not vice-versa. Your home Internet connection is actually configured on the assumption that you are simply a consumer of services provided by others. But in a peer-to-peer system, every peer both consumes from and provides services to other nodes. If you're running a Bitcoin or Lightning node at your home, you are providing a service to other computers on the internet. Your internet service by default is not configured to allow you to run servers and may need some additional configuration to enable others to reach your node.

If you want to run a Bitcoin or Lightning node, you need to make it possible for other nodes on the internet to connect to you. That means enabling incoming TCP connections to the Bitcoin port (port 8333 by default) or Lightning port (port 9735 by default). While you can run a Bitcoin node without incoming connectivity, you can't do that with a Lightning node. A Lightning node must be accessible to others from outside your network.

By default, your home internet router does not expect incoming connections from the outside, and in fact incoming connections are blocked. Your internet router IP address is the only externally accessible IP address, and all the computers you run inside your home network share that single IP address. This is achieved by a mechanism called _Network Address Translation (NAT)_ which allows your internet router to act as an intermediary for all outbound connections. If you want to allow an inbound connection you have to set up _Port Forwarding_, which tells your internet router that incoming connections on specific ports should be forwarded to specific computers inside the network. You can do this manually by changing your internet router configuration or,  if your router supports it, through an automatic port forwarding mechanism called _Universal Plug and Play (UPNP)_.

An alternative mechanism to port forwarding is to enable The Onion Router (TOR), which provides a kind of virtual private network overlay that allows incoming connections to an _onion address_. If you run TOR, you don't need to do port forwarding nor enable incoming connections to Bitcoin or Lightning ports. If you run your nodes using TOR, all traffic goes through TOR and no other ports are used.

Let's look at different ways you can make it possible for others to connect to your node. We'll look at these alternatives in order, from easiest to most difficult.

===== It just works!

There is a possibility that your internet service provider or router is configured to support UPNP by default and everything just works automatically. Let's try this approach first, just in case we are lucky.

Assuming you already have a Bitcoin or Lightning node running, we will try and see if they are accessible from the outside.

[NOTE]
====
For this test to work, you have to have either a Bitcoin or Lightning node (or both) up and running on your home network. If your router supports UPNP, the incoming traffic will automatically be forwarded to the corresponding ports on the computer running the node.
====

You can use some very popular and useful websites to find out what is your external IP address and whether it allows and forwards incoming connections to a known port. Here are two that are reliable:

https://canyouseeme.org/

https://www.whatismyip.com/port-scanner/

By default, these services only allow you to check incoming connections to the IP address from which you are connecting. This is done to prevent you from using the service to scan other people's networks and computers. You will see your router's external IP address and a field for entering a port number. If you haven't changed the default ports in your node configuration, try port 8333 (Bitcoin) and/or 9735 (Lightning).

[[ln_port_check]]
.Checking for incoming port 9735
image::images/ln_port_check.png[]

In <<ln_port_check>> you can see the result of checking port 9735 on a server running Lightning, using the +whatismyip.org+ port scanner tool. It shows that the server is accepting incoming connections to the Lightning port. If you see a result like this, you are all set!

===== Automatic port forwarding using UPNP

Sometimes, even if your internet router supports UPNP, it may be turned off by default. In that case you need to change your internet router configuration from its web administration interface:

. Connect to your internet router's configuration website. Usually this can be done by connecting to the _gateway address_ of your home network using a web browser. You can find the gateway address by looking at the IP configuration of any computer on your home network. It is often the first address in one of the non-routable networks, like 192.168.0.1 or 10.0.0.1. Check all stickers on your router as well for the _gateway address_. Once found, open a browser and enter the IP address into the browser URL/Search box, e.g. "192.168.0.1" or "http://192.168.0.1".

. Find the administrator username and password for the web configuration panel of the router. This is often written on a sticker on the router itself and may be as simple as "admin" and "password". A quick web search for your ISP and router model can also help you find this information.

. Find a setting for UPNP and turn it on.

Restart your Bitcoin and/or Lighting node and repeat the open port test with one of the websites we used in the previous section.

===== Using TOR for incoming connections

_The Onion Router (TOR)_ is a virtual private network with the special property that it encrypts communications between hops, such that any intermediary node cannot determine the origin or destination of a packet. Both Bitcoin and Lightning nodes support operation over TOR, which enables you to operate a node without revealing your IP address or location. Hence, it provides a high level of privacy to your network traffic. An added benefit of running TOR is that because it operates as a VPN, it resolves the problem of port forwarding from your internet router. Incoming connections are received over the TOR tunnel, and your node can be found through an ad-hoc generated _onion address_ instead of an IP address.

Enabling TOR requires two steps: First you must install the TOR router and proxy on your computer. Second, you must enable the use of the TOR proxy in your Bitcoin or Lightning configuration.

To install TOR on a Ubuntu Linux system that uses the +apt+ package manager, run:

----
sudo apt install tor
----

Next, we configure our Lightning node to use TOR for its external connectivity. Here is an example configuration for LND:

----
[Tor]
tor.active=true
tor.v3=true
tor.streamisolation=true
listen=localhost
----

This will enable TOR (+tor.active+), establish a v3 onion service (+tor.v3=true+), use a different onion stream for each connection (+tor.streamisolation+), and restrict listening for connections to the local host only, to avoid leaking your IP address (+listen=localhost+).

You can check if TOR is correctly installed and working by running a simple one-line command. This command should work on most flavors of Linux:

----
curl --socks5 localhost:9050 --socks5-hostname localhost:9050 -s https://check.torproject.org/ | cat | grep -m 1 Congratulations | xargs
----

If everything is working properly, the response of this command should be +"Congratulations. This browser is configured to use Tor."+.

Due to the nature of TOR, you can't easily use an external service to check if your node is reachable via an onion address. Nonetheless, you should see your TOR onion address in the logs of your Lightning node. It is a long string of letters and numbers followed by the suffix +.onion+. Your node should now be reachable from the internet, with the added bonus of privacy!

===== Manual port forwarding

This is the most complex process and requires quite a bit of technical skill. The details depend on the type of internet router you have, your service provider settings and policies, and a lot of other context. Try UPNP or TOR first, before you try this much more difficult mechanism.

The basic steps are as follows:

. Find the IP address of the computer your node is on. This is usually dynamically allocated by the Dynamic Host Configuration Protocol (DHCP) and is often somewhere in the 192.168.0.X or 10.0.0.X range.

. Find the Media Access Control (MAC) address of your node's network interface. This can be found in the internet settings of that computer.

. Assign a static IP address for your node so that it is always the same one. You can use the IP address it currently has. On your internet router, look for "Static Leases" under the DHCP configuraiton. Map the MAC address to the IP address you selected. Now your node will always have that IP address allocated to it. Alternatively, you can look at your router's DHCP configuration and find out what its DHCP address range is. Select an unused address _outside_ of the DHCP address range. Then, on the server, configure the network to stop using DHCP and hard-code the selected non-DHCP IP address into the operating system network configuration.

. Finally, set up "Port Forwarding" on your internet router to route incoming traffic on specific ports to the selected IP address of your server.

Once done reconfiguring, repeat the port check using one of the websites from the previous sections.

=== Security of your node

A Lightning node is, by definition, a hot-wallet. That means that the funds (both on-chain and off-chain) controlled by a Lightning node are directly controlled by keys that are loaded in the node's memory or stored on the node's hard disk. If a Lightning node is compromised, it is trivial to create on-chain or off-chain transactions to drain its funds. It is therefore critically important that you protect it from unauthorized access.

Security is a holistic effort, meaning that you have to secure every layer of a system. As the saying goes: the chain is only as strong as the weakest link. This is an important concept in information security and we will apply it to our node.

Despite all security measures you will take, remember that the Lightning Network is an early-stage experimental technology and there are likely to be exploitable bugs in the code of any project you use. *Do not put more money than you are willing to risk losing on the Lightning Network.*


==== Operating system security

Securing an operating system is a vast topic that is beyond the scope of this book. However, we can establish some basics concepts at a high level.

To secure your operating system, here are some of the top items to consider:

. Provenance - Start by ensuring that you are downloading the correct operating system image and verify any signatures or checksums before installing it. Extend this to any software that you install. Double-check any source or URL from where you download. Verify the integrity and correctness of the downloaded software via signature and checksum verification.
. Maintenance - Make sure that you keep your operating system up to date. Enable automated daily or weekly installation of security updates.
. Least Privilege - Set up users for specific processes and give them the least access needed to run a service. Do not run processes with admin privileges (e.g. root).
. Process Isolation - Use the operating system features to isolate processes from each other.
. File System Permissions - Configure the file system carefully, on the least-privilege principle. Do not make files readable or writeable by everyone.
. Strong Authentication - Use strong randomly generated passwords or, whenever possible, public-key authentication. E.g. it is safer to use Secure Shell (SSH) with a cryptographic key pair instead of a password.
. Two-factor Authentication (2FA) - Use two-factor authentication wherever possible, including Universal 2-Factor (U2F) with hardware security keys. This applies to all external services you might be using such as your cloud service provider. But you can apply this also to your own set-up such as your own SSH configuration. Use 2FA also for indirect services. Say you are using a cloud service. You gave your cloud service provider an email address. Also protect your email address with 2FA.
. Backup - Make backups of your system, but make sure you protect the backups with encryption too. Perform these backups periodically. At least once test if you can restore your backup and that your backup is complete and accessible. If possible, keep one copy of your backups on a different disk to avoid that a single hard disk failure destroys _both_ your active node as well as your backup copies. 
. Vulnerability & Exposure Management - Use remote scanning to ensure you have minimized the attack surface of your system. Close any unnecessary services or ports.
- Minimize - Install only software and packages that you really need and use. Uninstall packages that you no longer use. It is recommended that you do _not_ use your node computer for non-node activities that you can perform on another of your computers. Especially, if you can, do _not_ use your node computer for browsing, surfing the internet, or reading your email.

This is a list of the most basic security measures. It is by no means exhaustive.

==== Node Access

Your Lightning node will expose a Remote Procedure Call (RPC) Application Programming Interface (API). This means that your node can be controlled remotely by commands sent to a specific TCP port. Access control to that RPC API is achieved by some form of user authentication. Depending on the type of Lightning node you set up, this will either be done by username/password authentication or by a mechanism called an authentication _macaroon_. As the name implies, a macaroon is a more sophisticated type of cookie. Unlike a cookie, it is cryptographically signed and can express a set of access capabilities.

For example, LND uses macaroons to grant access to the RPC API. By default, the LND software creates three macaroons with different levels of access, called +admin+, +invoice+, and +readonly+. Depending on which macaroon you copy and use in your RPC client, you either have "readonly" access, "invoice" access (which includes the "readonly" capabilities), or "admin" access which gives you full control. There is also a macaroon "bakery" function in LND that can construct macaroons with any combination of capabilities with very fine-grained control.

If you use a username/password authentication model, make sure you select a long and random password. You will not have to type this password often as it will be stored in the configuration files. You should therefore pick one that cannot be guessed. Many of the examples you will see include poorly chosen passwords, and often people copy these into their own systems, proving easy access to anyone. Don't do that! Use a password manager to generate a long random alpha-numeric password. Since certain special characters such as these +$?/!*\&%`"'+ can interfere with the command line, it is best to avoid those for passwords that will be used in a shell environment. To avoid problems stick with long random alpha-numeric password.

A plain alphanumeric sequence that is longer than 12 characters and randomly generated is usually sufficient. If you plan to store large amounts of money on your Lightning node and are concerned about remote brute-force attacks, select a password length of more than 20 characters to make such attacks practically infeasible.

=== Node and channel backups

A very important consideration when running a Lightning node is the issue of backups. Unlike a Bitcoin wallet, where a BIP39 mnemonic phrase can recover all the state of the wallet, in Lightning this is _not_ the case.

Lightning wallets do use a BIP39 mnemonic phrase backup, but only for the on-chain wallet. However, due to the way channels are constructed, the mnemonic phrase is _not_ sufficient to restore a Lightning node. An additional layer of backups is needed, which is called the _Static Channel Backup (SCB)_. Without an SCB, a Lightning node operator may lose _all_ the funds that are in channels if they lose the Lightning node data store.

[WARNING]
====
Do _not_ fund channels until you have put a system in place to continuously backup your channel state. Your backups should be moved "offsite" to a different system and location from your node, so that they can survive a variety of system failures (power loss, data corruption, etc.) or natural disasters (flood, fire, etc.).
====

Static Channel Backups are not a panacea. First, the state of each channel needs to be backed up every time there is a new commitment transaction. Second, restoring from a channel backup is dangerous. If you do not have the _last_ commitment transaction and you accidentally broadcast an old (revoked) commitment, your channel peer will assume you are trying to cheat and claim the entire channel balance with a penalty transaction. To make sure you are closing the channel, you need to do a _cooperative close_. But a malicious peer could mislead your node into broadcasting an old, revoked commitment during that cooperative close, thereby cheating you by making your node inadvertently try to "cheat".

Furthermore, the backups of your channels need to be encrypted to maintain your privacy and your channel security. Otherwise, anyone who finds the backups can not only see all your channels, they could use the backups to close all your channels in a way that hands over the balance to your channel peers. In other words, a malicious person that gets access to your backups can cause you to lose all your channel funds.

You can see that SCBs are not a fool-proof safeguard. They are a weak compromise because they swap one type of risk (data corruption or loss) for another type of risk (malicious peer). To restore from a static channel backup, you have to interact with your channel peers and hope they don't try to cheat you by either giving you an old commitment or by fooling your node into broadcasting a revoked commitment so they can penalize you. Despite the weaknesses of SCB, SCBs do make sense and you should perform them. If you do not perform SCBs and you lose your node data, you lost your channel funds forever. Guaranteed! However, if you _do_ perform SCBs and you lose your node data, then you have a reasonable chance that some of your peers are honsest and that you can recuperate some of your channel funds. If you are lucky, you might recover all your funds. In conclusion, it is best for you to perform continuous Static Channel Backups to a disk other than the primary node hard disk.

Channel backup mechanisms are still a work-in-progress and a weakness in most Lightning implementations.

==== Static Channel Backups (SCB)

At the time of writing this book, only LND offers a built-in mechanism for channel backups. Eclair has no backup on the server side, although Eclair mobile does offer optional backup to a Google Drive. C-lightning recently merged the necessary interfaces for a plugin to implement channel backups. Unfortunately, there is no consistent, agreed upon backup mechanism across different node implementations.

File-based backups of the Lightning node databases are at best a partial solution because you run the risk of backing up an inconsistent database state. In addition, you may not reliably catch the latest state commitments. It is much better to have a backup mechanism that is triggered every time there is a state change in a channel, thereby ensuring data consistency.

To set up static channel backups in LND, set the +backupfilepath+ parameter either on the command-line or in the configuration file. LND will then save an SCB file in that directory path. Of course, that's only the first step of the solution. Now, you have to setup a mechanism that monitors this file for changes. Each time the file changes the backup mechanism must copy this file to another, possibly "off-site" disk. Such backup mechanisms are beyond the scope of this book. Nonetheless, any sophisticated backup solution should be able to handle this sceanrio. Recall, the backup files should be encrypted too.

==== Hot wallet risk

As we've discussed previously, the Lightning Network consists of a network of _hot wallets_. The funds you store in a Lightning wallet are *online all the time*. This makes them vulnerable. Hence, you should not store large amounts in a Lightning wallet. Large amounts should be kept in a _cold_ wallet that is _not_ online and can transact only on-chain.

Even if you start small, as time passes you may still find you have a significant amount of money in a Lightning wallet. This is a typical scenario for store owners. If you use a Lightning node for an e-commerce operations, your wallet will likely receive funds often but send funds rarely. You will therefore end up having two problems simultaneously: First, your channels will be imbalanced with large local balances outweighing small remote balances. Secondly, you will have too much money in the wallet. Fortunately, you can solve both of these problems simultaneously.

Let's look at some of the solutions you can use to reduce the funds exposed in a hot wallet.

==== Sweeping funds

If your Lightning wallet balance becomes too large for your risk tolerance, you will need to "sweep" funds out of the wallet. You can do so in three ways: on-chain, off-chain, and loop-out. Let's look at each one of these options in the next few sections.

===== On-chain sweep

Sweeping funds on-chain is accomplished by moving the funds from the Lightning wallet to a presumably more secure Bitcoin wallet such as a hardware wallet or cold storage. You do that by closing channels. When you close a channel, all funds from your local balance are "swept" to a Bitcoin address. The Bitcoin address for on-chain funds is usually generated by your Lightning wallet. So it is still a hot-wallet. You may need to do an additional on-chain transaction to move the funds to a more secure address, such as one generated on your hardware wallet.

Closing channels will incur an on-chain fee and will reduce your Lightning node's capacity and connectivity. However, if you run a popular e-commerce node you will not lack incoming capacity and can strategically close channels with large local balances, essentially "bundling" your funds for movement on-chain. You may need to use some channel re-balancing techniques (see <<channel_rebalancing>>) before you close channels to maximize the benefit of this strategy.

===== Off-chain sweep

Another technique you can use involves running a second Lightning node that is not advertised on the network. You can establish large capacity channels from your public node (e.g. the one running your shop) to your unadvertised (hidden) node. On a regular basis, "sweep" funds by making a Lightning payment to your hidden node.

The advantage of this technique lies in the fact that the Lightning node that receives payments for your shop will be publicly known. This makes it a target for hackers, as any Lightning node associated with a shop would be assumed to have a large balance. A second node that is not associated with your shop will not easily be identified as a valuable target.

As an additional measure of security, you can make your second node a hidden TOR service so that its IP address is not known. That further reduces the opportunity for attacks and increases your privacy.

You will need to set up a script that runs at regular intervals. The purpose of this script is to creates an invoice on your hidden node and to pay that invoice from your shop's node, thereby shifting funds over to your hidden node.

Keep in mind that this technique does not move funds into cold storage. Both Lightning nodes are hot wallets. The objective of this sweep is to move funds from a very well known hot wallet to an obscure hot wallet.

===== Submarine swap sweep

Another way to reduce your Lightning hot-wallet balance is to use a technique called a _submarine swap_. Submarine swaps, conceptualized by co-author Olaoluwa Osuntokun and Alex Bosworth, allow the exchange of on-chain bitcoin for Lightning payments and vice versa.

A node operator can initiate a submarine swap and send all available channel balances to the other party who will send them as a result on-chain bitcoin in exchange.

In the future this could be a paid service offered by nodes on the Lightning Network who advertise exchange rates or charge a flat fee for the conversion.

The advantage of a submarine swap for sweeping funds is that no channel needs to be closed. That means that we preserve our channels and only re-balance our channels through this operation. As we send a Lightning payment out, we shift some balance from local to remote on one or more of our channels. Not only does that reduce the balance exposed in our node's hot wallet, it also increases the balance available for future incoming payments.

You could do this by trusting an intermediary to act as a gateway for your funds and not steal them. But in the case of a submarine swap, the operation does not require trust. Submarine swaps are non-custodial _atomic_ operations. That means that the counterparty in your submarine swap cannot steal your funds because the on-chain payment depends on the completion of the off-chain payment and vice-versa. We will discuss submarine swaps in more detail in <<submarine_swaps>>.

===== Submarine swaps with Loop

One example of a submarine swap service is _Loop_ by Lightning Labs, the company that builds the LND Lightning node. Loop comes in two variations: _Loop In_ and _Loop Out_. _Loop In_ accepts a Bitcoin on-chain payment and converts it into a Lightning off-chain payment. _Loop Out_ converts a Lightning payment into a Bitcoin payment.

[NOTE]
====
To use the _Loop_ service you must be running an LND Lightning node.
====

For the purpose of reducing the balance of your Lightning hot wallet, you would use the Loop Out service. To use the Loop service, you need to install some additional software on your node. The Loop software runs alongside your LND node and provides some command-line tools to execute submarine swaps. You can find the Loop software and installation instructions here:

https://github.com/lightninglabs/loop

Once you have the software installed and running, a Loop Out operation is as simple as running a single command:

----
loop out --amt 501000 --conf_target 400
Max swap fees for 501000 sat Loop Out: 25716 sat
Regular swap speed requested, it might take up to 30m0s for the swap to be executed.
CONTINUE SWAP? (y/n), expand fee detail (x): x

Estimated on-chain sweep fee:        149 sat
Max on-chain sweep fee:              14900 sat
Max off-chain swap routing fee:      10030 sat
Max no show penalty (prepay):        1337 sat
Max off-chain prepay routing fee:    36 sat
Max swap fee:                        750 sat
CONTINUE SWAP? (y/n): y
Swap initiated

Run `loop monitor` to monitor progress.
----

Note that your maximum fee, which represents a worst-case scenario, will depend on the confirmation target that you select.

=== Lightning node uptime and availability

Unlike Bitcoin, Lightning nodes need to be online almost continuously. Your node needs to be online to receive payments, open channels, close channels (cooperatively), and monitor protocol violations. Node availability is such an important requirement in the Lightning Network that it is a metric used by various automatic channel management tools (e.g. +autopilot+) to decide with which nodes to open channels. You can also see "availability" as a node metric on popular node explorers (see <<ln_explorer>>) such as +1ml.com+.

Node availability is especially important to mitigate and resolve potential protocol violations (i.e. revoked commitments). While you can afford short interruptions from an hour up to one or two days, you cannot have your node offline for longer periods of time without risking loss of funds.

Keeping a node online continuously is not easy, as various bugs and resource limitations can and will occasionally cause downtime. Especially if you run a busy and popular node, you will run into limitations of memory, swap space, number of open files, disk space, and so forth. A whole host of different problems will cause your node or your server to crash.

==== Tolerate faults and automate

If you have the time and skills you should test some basic fault scenarios on the Lightning testnet. On the testnet you will learn valuable lessons without risking any funds. Any step you perform to automate your system will improve your availability.

- Automatic computer server restart: What happens when your server or the operating system crashes? What happens when there is a power outage? Simulate this fault by pressing the "reset" button on your PC or by unplugging the power cable. After crash, reset, or power failure the computer should automatically restart itself. Some computers have a setting in their BIOS to specify how the computer should react on power failures. Test it to make sure the computer really restarts automatically on power failure without human intervention. 

- Automatic node restart: What happens when your node or one of your nodes crashes? Simulate this fault by killing the corresponding node processes. If a node crashes it should automatically restart itself. Test it to make sure the node or nodes really restart automatically on failure without human intervention. If this is not the case, most likely your node is not set up correctly as an operating system service.

- Automatic network reconnection: What happens if your network goes down? What happens when your ISP goes temporarily down? What happens when your ISP assigns a new IP address to your router or your computer? When the network comes back, does the node or do the nodes automatically reconnect to the network? Simulate this fault by unplugging and later re-plugging the Ethernet cable from and to your PC. The nodes should automatically reconnect and continue operation without human intervention.

- Configure your log files: All of the above failures should leave textual entries behind in the corresponding log files. Turn up the verbosity of logging if needed. Find these error entries in the log files and use them for monitoring. 

==== Monitoring node availability

Monitoring your node is an important part of keeping it running. You need to monitor not only the availability of the computer itself, but also the availability and correct operation of the Lightning node software.

There are a number of ways to do this, but most require some customization. You can use generic infrastructure monitoring or application monitoring tools, but you have to customize them specifically to query the Lightning node API to ensure the node is running, synchronized to the blockchain, and connected to channel peers.

There is a specialized service that offers Lightning node monitoring. It uses a Telegram bot to notify you of any interruptions in service. This is a free service, though you can pay (over Lightning of course) to get faster alerts. Find more information at:

https://lightning.watch

Over time, we expect more third-party services to provide specialized Lightning node monitoring payable via micro-payments. Perhaps such services and their APIs will become standardized and will one day be directly supported by Lightning node software.

==== Watchtowers

_Watchtowers_ are a mechanism for outsourcing the monitoring and penalty resolution of Lightning protocol violations.

As we mentioned in previous chapters, the Lightning protocol maintains security through a penalty mechanism. If one of your channel partners broadcasts an old commitment transaction, your node will need to exercise the revocation clause and broadcast a penalty transaction to avoid losing money. But if your node is down during the protocol violation, you might lose money.

To solve this problem, we can use one or more _watchtowers_ to outsource the job of monitoring protocol violations and issuing penalty transactions. There are two parts to a watchtower setup: a watchtower server (or simply "watchtower") that monitors the blockchain and a watchtower client that asks the watchtower server for this monitoring service.

Watchtower technology is still in the early stages of development and is not widely supported. However, below we list some experimental implementations that you can try.

LND software includes both a watchtower server and a watchtower client. You can activate the watchtower server by adding the following configuration options:

----
[watchtower]
watchtower.active=1
watchtower.towerdir=/path_to_watchtower_data_directory
----

You can use LND's watchtower client by activating it in the configuration and then using the command-line to connect it to a watchtower server. The configuration is:

----
[wtclient]
wtclient.active=1
----

LND's command-line client +lncli+ shows the following options for managing the watchtower client:

----
$ lncli wtclient

NAME:
   lncli wtclient - Interact with the watchtower client.

USAGE:
   lncli wtclient command [command options] [arguments...]

COMMANDS:
     add     Register a watchtower to use for future sessions/backups.
     remove  Remove a watchtower to prevent its use for future sessions/backups.
     towers  Display information about all registered watchtowers.
     tower   Display information about a specific registered watchtower.
     stats   Display the session stats of the watchtower client.
     policy  Display the active watchtower client policy configuration.

OPTIONS:
   --help, -h  show help
----

C-lightning has the API hooks necessary for a watchtower client plugin, though no such plugin has been implemented yet.

Finally, a popular standalone watchtower server is _The Eye of Satoshi_ (TEOS). It can be found here:

https://github.com/talaia-labs/python-teos

=== Channel management

As a Lightning node operator, one of the recurring tasks you will need to perform is management of your channels. This means opening outbound channels from your node to other nodes, as well as getting other nodes to open inbound channels to your node. In the future, cooperative channel construction may be possible, so you can open symmetric channels that have funds committed on both ends on creation. For now, however, new channels only have funds on one end, on the originator's side. Hence, to make your node _balanced_ with both inbound and outbound capacity, you need to open channels to others and entice others to open channels to your node.

==== Opening outbound channels

As soon as you get your Lightning node up and running, you can fund its Bitcoin wallet and then start opening channels with those funds.

This task can be partially automated with the use of an _autopilot_, which is a software module that opens channels automatically based on some heuristic rules. Autopilot software is still in its infancy and it doesn't always select the best channel partners for you. It might be better, especially in the beginning, to open channels manually.

You must choose channel partners carefully as your node's ability to send payments depends on who your channel partners are and how well connected they are to the rest of the Lightning Network. You also want to have more than one channel to avoid being susceptible to a single point of failure. Since Lightning now supports multi-path payments, you can split your initial funds into several channels and route bigger payments by combining their capacity. At the same time, avoid making your channels too small. Since you need to pay Bitcoin transaction fees to open and close a channel, the channel balance should not be so small that the on-chain fees consume a significant portion. It's all about balance!

To summarize:

* Connect to few, but to well connected nodes
* Open more than one channel
* Don't open too many channels
* Don't make the channels too small

One way to find well connected nodes is to open a channel to a popular merchant selling products on the Lightning Network. These nodes tend to be well funded and well connected. So, when you are ready to buy something online via Lightning, you can open a channel directly to the merchant's node. The merchant's node ID will be in the invoice you will receive when you try to buy something. That makes it easy.

Another way to find well connected nodes is to use a Lightning Explorer (see <<ln_explorer>>) such as +1ml.com+ and browse the list of nodes sorted by channel capacity and number of channels. Don't go for the biggest nodes as that encourages centralization. Go for a node in the middle of the list, so that you can help them grow. Another factor to consider might be the time span a node is in operation. Nodes having been established more than a year ago tend to be more reputable and less risky than nodes that started operation a week ago.

===== Autopilot

The task of opening channels can be partially automated with the use of an _autopilot_, which is software that opens channels automatically based on some heuristic rules. Autopilot software is still relatively new and it doesn't always select the best channel partners for you. Especially in the beginning it might be better to open channels manually.
Autopilots currently exist in 3 forms.

- +lnd+ incorporates an autopilot that is fully integrated with +lnd+ and runs constantly in the background while turned on.
- +lib_autopilot.py+ can offer autopilot computations for any node implementation based on the gossip and channel data.
- A +c-lighting+ plugin based on +lib_autopilot.py+ exists that provides an easy to use interface for +c-lightning+ users.

Be aware that the +lnd+ autopilot will start running in the background as soon as it is turned on via the config file. As a result it will start opening channels immediately if you have onchain outputs in your +lnd+ wallet.
If you want to have full control over the bitcoin transactions that you make and the channels that you open, make sure to turn the autopilot off _before_ you load your +lnd+ wallet with bitcoin funds.
If the autopilot was previously turned on, you might have to restart your +lnd+ before you top up your wallet with an on-chain transaction or before you close channels, which effectively gives you on-chain funds again.
It is crucial that you set key configuration values if you want to run the autopilot. 
Have a look at this example configuration:


----
[lnd-autopilot]
autopilot.active=1
autopilot.maxchannels=40
autopilot.allocation=0.70
autopilot.minchansize=500000
autopilot.maxchansize=5000000
autopilot.heuristic=top_centrality:1.0
----

This configuration file would activate the autopilot.
It would open channels as long as the following two conditions are met:

1. Your node has currently less than 40 channels open.
2. Less than 70% of your total funds are off-chain in payment channels.

The numbers 40 and 0.7 are chosen completely arbitrarily here as we cannot make any recommendations that are valid for everyone about how many channels one should have open and what percentage of one's funds should be off chain.
The autopilot in +lnd+ will not take into account on-chain fees. In other words, it will not delay opening channels to a time period when fees are low.
To reduce fees you can manually open channels during a time period when fees are low, e.g. during the weekend.
The autopilot will make channel recommendations whenever the conditions are met and will immediately try to open a channel by using the appropriate current fees.
According to the above configuration file, the channels will be between 5 mBTC (minchansize=500000 satoshi) and 50 mBTC (maxchansize=5000000 satoshi) in size.
As is common, the amounts in the configuration file are enumerated in satoshis.
Currently channels below 1 mBTC are not very useful and we do not recommend to open channels that are too small and below this amount.
With the wider adoption of multipath payments smaller channels are less of a burden but for the time being this is our recommendation.

The +c-lightning+ plugin works very differently in comparison to the +lnd+ autopilot.
First, it differs in the algorithms used to make the recommendations. We will not cover this here. Secondly, it differs in its user interface.
You will need to download the _autopilot plugin_ from the +c-lightning+ plugin repository at https://github.com/lightningd/plugins/tree/master/autopilot and activate it.
We have already explained how to activate plugins in +c-lightning+.
The autopilot in +c-lightning+ is controlled via 3 configuration values which can be set in the config file or as command line arguments when you start +lightningd+.

----
[c-lightning-autopilot]
autopilot-percent=75
autopilot-num-channels=10
autopilot-min-channel-size-msat=100000000msat
----

These values are the actual default config and you do not need to set them at all.

The autopilot will not automatically run in the background like in +lnd+.
Instead, you have to start a run specifically with `lightning-cli autopilot-run-once` if you want the autopilot to open the recommended channels.
But if you want it to just provide you with recommendations, from which you can handpick the nodes, you can append the optional `dryrun` argument.

A key difference between the +lnd+ and the +c-lightning+ autopilots is that the +c-lightning+ autopilot will also make a recommendation for the channel size.
For example, if the autopilot recommends to open a channel with a small node that only has small channels, it will not recommend to open a large channel.
However, if it opens a channel with a well connected node that also has many large channels, it will probably recommend a larger channel size.

As you can see the +c-lightning+ autopilot is not as automatic as +lnd+'s, but it gives you a little bit more control.
These differences reflect personal preferences and could actually be the deciding factor for you to chose one implementation over the other.

Keep in mind that current autopilots will primarily use public information from the gossip protocol about the current topology of the Lightning network.
It is obvious that your personal requirements for channels can and will be reflected only to a certain degree.
More advanced autopilots would use historical and usage information that your node has gathered by running in the past, including information about routing successes, whom you have paid in the past, and who paid you.
Such improved autopilots might in the future use this collected data to also make recommendations on closing channels and re-allocating funds.
Take this as a word of caution to not depend or rely too heavily on the autopilot feature at the time of writing of this book.

==== Getting inbound liquidity

In the current design of the Lightning Network, it is more typical for users to obtain outbound liquidity _before_ obtaining inbound liquidity.
They will do so by opening a channel with another node, and more often they'll be able to spend Bitcoin before they can receive it.
There are three typical ways of getting inbound liquidity:

* Open a channel with outbound liquidity and then spend some of those funds. Now the balance is on the other end of the channel, which means that you can receive payments.

* Ask someone to open a channel to your node. Offer to reciprocate, so that both of your nodes become better connected and balanced.

* Use a _submarine swap_ (e.g. +Loop-In+) to exchange on-chain BTC for an inbound channel to your node.

* Pay a third party service to open a channel with you. Several such services exist. Some charge a fee to provide liquidity, some are free.

Here is a list of currently available liquidity providers who will open a channel to your node for a fee:

* Bitrefill's _Thor_ service at https://www.bitrefill.com/thor-lightning-network-channels/

* _Lightning To Me_ at https://lightningto.me/

* _LNBig_ at https://lnbig.com/

* _Lightning Conductor_ at https://lightningconductor.net/channels


Creating inbound liquidity is challenging from both a practical and user experience perspective. Inbound liquidity does not happen automatically, so you have to find ways to build it for your node. This asymmetry of payment channels is also not intuitive. In most other payment systems you get paid first (inbound) before you pay others (outbound).

The challenge of creating inbound liquidity is most noticeable if you are a merchant or sell your services for Lightning payments. In that case, you need to be vigilant to ensure that you have enough inbound liquidity to be able to continue to receive payments. What if there is a surge of buyers on your store, but they can't actually pay you because there is no more inbound capacity?

In the future these challenges can be partially mitigated by the implementation of dual-funded channels, which are funded from both sides and offer balanced inbound and outbound capacity. The burden could also be mitigated by more sophisticated autopilot software, which could request and pay for inbound capacity as needed.

Ultimately, Lightning users need to be strategic and proactive about channel management to ensure that sufficient inbound capacity is available to meet their needs.

==== Closing channels

As discussed earlier in the book, a _Mutual Close_ is the preferred way of closing a channel. However, there are instances where a _Force Close_ is neccessary.

Some examples:

* Your channel partner is offline and cannot be contacted to initiate a mutual close.
* Your channel partner is online, but is not responding to requests to initiate a mutual close.
* Your channel partner is online and your nodes are negotiating a mutual close, but they become stuck and cannot reach a resolution.

==== Re-balancing channels

In the course of transacting and routing payments on Lightning, the combination of inbound and outbound capacities can become unbalanced.

For example, if one of your channel partners is frequently routing payments through your node, you will exhaust the inbound capacity on that channel, while also exhausting the outbound capacity on the outgoing channels. Once that happens, you can no longer route payments through that route.

There are many ways to re-balance channels, each with different advantages and disadvantages. One way is to use a _submarine swap_ (e.g. +Loop-Out+) as described previously in this chapter. Another way to re-balance is to simply wait for routed payments that flow in the opposite direction. If your node is well connected, when a specific route becomes exhausted in one direction, the same route becomes available in the opposite direction. Other nodes may "discover" that route in the opposite direction and start using it as part of their payment path, thereby re-balancing the funds again.

A third way to re-balance channels is to purposefully create a _circular route_ that sends a payment from your node back to your node, via the Lightning Network. By sending a payment out on a channel with large local capacity and arranging the path so that it returns to your node on a channel with large remote capacity, both of those channels will become more balanced. An example of a circular route re-balancing strategy can be seen in <<circular-rebalancing>>.

[[circular-rebalancing]]
.Circular route re-balancing
image::images/circular-rebalancing.png[]

Circular re-balancing is supported by most Lightning node implementations and can be done on the command-line or via one of the web management interfaces such as _Ride the Lightning (RTL)_ (see <<rtl>>).

Channel rebalancing is a complex issue that is the subject of active research and covered in more detail in <<rebalancing_channels>>.

=== Routing fees

Running a Lightning node allows you to earn fees by routing payments across your channels. Routing fees are generally not a significant source of income and dwarfed by the cost of operating a node. For example, on a relatively busy node that routes a dozen payments a day, the fees amount to no more than 2000 satoshis.

Nodes compete for routing fees by setting their desired fee rate on each channel. Routing fees are set by two parameters on each channel: a fixed _base fee_ that is charged for any payment and an additional variable _fee rate_ that is proportional to the payment amount.

When sending a Lightning payment, a node will select a path so as to minimize fees, minimize hops, or both. As a result, a routing fee market emerges from these interactions. There are currently many nodes that charge very low or no fees for routing, creating downward pressure on the routing fee "market".

If you make no choices, your Lightning node will set a default base fee and fee rate for each new channel. The default values depend on the node implementation you use. 
The _base fee_ is set in the unit of _millisatoshi_ (thousandths of a satoshi). The proportional _fee rate_ is set in the unit of _millionths_ and is applied to the payment amount. 
The unit of _millionths_ is often abbreviated with _ppm_ (parts per million).
For example, a _base fee_ of 1,000 (millisatoshi) and a _fee rate_ of 1,000 ppm (millionths) would result in the following charges for a 100,000 satoshi payment:

[latexmath]
====
P = 100,000 satoshi

F_base = 1,000 millisatoshi = 1 satoshi

F_rate = 1,000 ppm = 1,000/1,000,000 = 1/1,000 = 0.001 = 0.1%

F_total = F_base + ( P * F_rate )

 \Rightarrow  F_total = 1 satoshi + ( 100,000/1,000 ) satoshi

 \Rightarrow  F_total = 1 satoshi + 100 satoshi = 101 satoshi
====

Broadly speaking, you can take one of two approaches to routing fees. You can route lots of payments with low fees, making up for low fees by high volume. Alternatively, you can choose to charge higher fees. If you choose to set higher fees, your node will be selected only when other cheaper routes don't exist. Therefore, you will route less frequently but earn more per successful routing.

For most nodes, it is usually best to use the default routing fee values. This way, your node is competing on a mostly level playing field with other nodes who use the default values.

You can also use the routing fee settings to re-balance channels. If most of your channels have the default fees but you want to rebalance a particular channel, just decrease the fees on that specific channel to zero or to very low rates. Then sit back and wait for someone to route a payment over your "cheap" route and re-balance your channels for you as a side-effect.

=== Node management

Managing your Lightning node on the command-line is obviously not easy. It gives you the full flexibility of the node's API and the ability to write your own custom scripts to satisfy your personal requirements. But if you don't want to deal with the complexity of the command line and only need some basic node management capabilities, you should consider installing a web-based user interface that makes node management easier.

There are a number of competing projects that offer web-based Lightning node management. Some of the most popular ones are described below.

==== Ride The Lightning (RTL)



_RTL_ is a graphical web user interface to help users manage Lightning node operations for the three main Lightning node implementations (LND, c-lightning, and Eclair). RTL is an open source project developed by Suheb, Shahana Farooqui, and many other contributors. You can find the RTL software here:

https://github.com/Ride-The-Lightning/RTL

Here is an example screenshot of RTL's web interface, as provided on the project repository:

.Example RTL web interface
image::images/RTL-LND-Dashboard.png[]

==== LNDMon

Lightning Labs, the makers of LND provide a web-based graphical user interface called +lndmon+ to monitor the various metrics of an LND Lightning node. +lndmon+ only works with LND nodes. It is a read-only interface for monitoring and as such does not allow you to actively manage the node. It cannot open channels or make payments. Find +lndmon+ here:

https://github.com/lightninglabs/lndmon


=== Conclusion

As you maintain your node and gain experiences you will learn a lot about the Lightning Network. Being a node operator is a challenging but rewarding task. Mastering these skills will allow you to contribute to the growth and development of this technology and the Lightning Network itself. You will furthermore gain the ability to send and receive Lightning payments with the greatest degree of control and ease. You will play a central role in the network's infrastructure and not just be a participant on the edges. 
