[role="pagenumrestart"]
[[ch03_How_Lightning_Works]]
== Як Працює Lightning Network

Ми прослідкували за тим, як Аліса створила Lightning-гаманець і придбала каву у Боба, а тепер заглянемо під капот і роздивимось ближче різні компоненти Lightning Network, які приймали участь у цьому процесі.
Мета цього розділу - допомогти усвідомити найважливіші концепції та будівельні блоки Lightning Network. Тому в цьому розділі подається високорівневе уявлення без вникнення у всі технічні подробиці.

Якщо у вас є досвід в галузі інформатики, криптографії, Біткоїна та розробки протоколів, то цієї глави має бути достатньо для того, щоб ви змогли самостійно з'єднати всі деталі між собою.
Якщо ви менш досвідчені, то цей розділ дасть вам достатньо хороше загальне уявлення для більш легкого розуміння офіційних специфікацій протоколу, що відомі як BOLT (Basis of Lightning Technology, Основи Lightning Network).
Якщо ви новачок, ця глава допоможе вам краще зрозуміти технічні розділи книги.

Почнемо з визначення того, що таке Lightning Network (LN), і розберемо його у подальшій частині цього розділу.

**Lightning Network (LN) - це однорангова (peer-to-peer) мережа _платіжних каналів_, реалізована у вигляді смарт-контрактів на _блокчейні Біткоїн_, а також комунікаційний протокол, що визначає, як учасники створюють та виконують ці смарт-контракти**

=== Що таке платіжний канал?

Існує кілька способів описати платіжний канал залежно від контексту. Почнемо з високорівневого опису, а потім додамо трохи деталей.

Платіжний канал - це _фінансові відносини_ між двома нодами в Lightning Network, які називаються "партнерами по каналу". Фінансові відносини розподіляють _баланс коштів_ (виражених у мілісатоши) між двома партнерами по каналу.

Платіжний канал управляється _криптографічним протоколом_, тобто заздалегідь визначено заснований на криптографії процес, що використовується партнерами по каналу для перерозподілу балансу каналу на користь того чи іншого партнера по каналу. Криптографічний протокол гарантує, що жоден з партнерів по каналу не зможе обдурити іншого, тому партнерам не потрібно мати довіри між собою.

Криптографічний протокол встановлюється шляхом фінансування 2-з-2 _мультисиг-адреси_, яка вимагає співпраці між двома партнерами по каналу і не дозволяє жодному з партнерів по каналу витрачати кошти в односторонньому порядку.

У підсумку:

Платіжний канал - це фінансові відносини між нодами, що розподіляють кошти з мультисиг-адреси за допомогою чітко визначеного криптографічного протоколу.

=== Основи платіжних каналів

В основі платіжного каналу лежить 2-з-2 мультисиг-адреса на блокчейні Біткоїна, один ключ якої контролюєти ви, а інший ключ - ваш партнер по каналу.

Ви домовляєтеся з вашим партнером по каналу про послідовність транзакцій, які витрачають кошти з цієї адреси. Замість того, аби публікувати в мережу та записувати ці транзакції на блокчейні, ви обидва утримуєте їх у себе.

Остання транзакція в цій послідовності транзакцій визначає, як саме розподілено кошти в каналі між вами та вашим партнером по каналу.

Таким чином, додавання до цієї послідовності транзакцій нової транзакції рівнозначно переказу частини балансу від одного партнера до іншого без інформування мережі Біткоїн про цю подію. Узгоджучи кожну нову транзакцію і змінюючи розподіл коштів у каналі, ви одночасно з цим відкликаєте попередню транзакцію, щоб жодна із сторін не могла повернутися до попереднього стану.

Кожна транзакція з цієї послідовності використовує мову Script Біткоїна, таким чином узгодження коштів між вами та вашим партнером по каналу регулюється смарт-контрактами Біткоїна.
Смарт-контракт передбачає покарання нечесного учасника каналу, який намагається опублікувати скасований раніше стан каналу.

[NOTE]
====
Якщо у вас є неопублікована транзакція, що витрачає кошти з 2-із-2 мультисиг адреси і виплачує частину залишку вам, то наявність підпису іншої сторони гарантує вам можливість самостійно опублікувати цю транзакцію в будь-який момент, лише додавши власний підпис.

Здатність володіння частково підписаною транзакцією і можливість публікації її та заволодіння балансом у будь-який час - є основою Lightning Network.
====

=== Маршрутизація платежів через канали

Якщо кілька учасників мають канали від одного до іншого, платіж також може бути "перенаправлений" з одного платіжного каналу в інший за допомогою встановлення _шляху_, з'єднуючого послідовність платіжних каналів.

Наприклад, якщо Аліса має канал з Бобом, і Боб має канал з Чарлі, то Аліса може надіслати гроші Чарлі. 

Архітектура Lightning Network дозволяє запрограмувати керуючі каналом смарт-контракти у такий спосіб, що Боб не матиме можливості вкрасти кошти, що проходять через його канал.

Смарт-контракт захищає партнерів по каналу так, що їм не потрібно мати взаємну довіру. Так само вся мережа захищає її учасників, щоб ті могли пересилати платежі без довіри до жодного з учасників мережі.

Оскільки канали побудовані на мультисиг адресах, а транзакції оновлення балансу є попередньо підписаними Біткоїн-транзакціями, то вся довіра, необхідна для роботи Lightning Network, походить від довіри до децентралізованої мережі Біткоїн!

Вищезазначені інновації, безумовно, є головним проривом, який дозволив створення Lightning Network.
Однак Lightning Network - це набагато більше, ніж просто криптографічні протоколи поверх мови Script Біткоїна.
Це всеосяжний комунікаційний протокол, який дозволяє рівноправним учасникам мережі обмінюватися Lightning-повідомленнями для пересилання біткоїнів.

Lightning Network також використовує gossip-протокол (протокол "пліток") для розповсюдження серед всіх учасників мережі публічної інформації про канали (про топологію мережі).

Наприклад, щоб Аліса мала змогу побудувати маршрут до Чарлі, їй треба знати про існування каналу між Бобом і Чарлі, тобто їй потрібна інформація про топологію мережі.

І останнє, але не менш важливе: Lightning Network - це не що інше, як додаток поверх Біткоїна, що використовує Біткоїн-транзакції та мову Script. Не існує "Lightning монети" або "Lightning блокчейна".

Поза технічними примітивами, протокол Lightning Network - це креативний спосіб отримати більше переваг від використання Біткоїну за рахунок проведення довільної кількості миттєвих платежів без необхідності довіряти комусь іншому, крім мережі Біткоїн.

=== Платіжні канали

Як ми бачили в попередньому розділі, Аліса використала свій гаманець для створення платіжного каналу між нею та іншим учасником Lightning Network.

Канал обмежений лише трьома речами:
По-перше, час який займає передача через Інтернет кількох сотень байтів даних, необхідних для переміщення коштів з одного кінця каналу на інший.
По-друге, місткість каналу, тобто сума біткоїнів, яка вноситься в канал при його відкритті.
По-третє, ліміт розміру біткоїн-транзакції також обмежує кількість незавершених (таких що виконуються) маршрутизованих платежів, які можна одночасно здійснювати по каналу.

Платіжні канали мають кілька дуже цікавих і корисних властивостей:

* Оскільки час оновлення стану каналу в першу чергу пов’язаний зі швидкістю передачі даних через Інтернет, здійснення платежу через платіжний канал відбувається майже миттєво.

* Якщо канал відкритий, здійснення платежу не вимагає підтвердження блоків Біткоїн. Насправді - доки ви та ваш партнер по каналу дотримуєтесь протоколу - він не вимагає жодної взаємодії з мережею Біткойн або із кимось іншим, крім вашого партнера по каналу.

* Криптографічний протокол побудований таким чином, що не потрібна жодна довіра між партнерами по каналу. Якщо ваш партнер перестає відповідати або намагається вас обдурити, ви можете попросити систему Біткоїн виступити в ролі "суду" за смарт-контрактом, який ви та ваш партнер заключили раніше.

* Платежі, зроблені в платіжному каналі, відомі лише вам і вашому партнеру. У цьому сенсі ви отримуєте більшу конфіденційність порівняно з Біткоїн-транзакціями, де кожна транзакція є публічною. На блокчейні публікується лише остаточний баланс, який є сукупністю всіх платежів у цьому каналі.


Біткоїну було близько 5 років, коли талановиті розробники вперше з'ясували, яким чином можна побудувати платіжні канали. На сьогоднішній день відомо щонайменше три різні методи.
В цьому розділі ми зосередимось на методі побудови каналу, вперше описаному Джозефом Пуном та Тадеушом Дрією у вайтпейпері "Lightning Network" 2015 року. Вони відомі як канали _Пуна-Дрії (Poon-Dryja)_ і на даний момент використовуються в Lightning Network.
Іншими двома методами є канали _Дуплексні Мікроплатежі_ (_Duplex Micropayment_), запропоновані Крістіаном Декером приблизно в той самий час, що й канали "Пуна-Дрії", та канали _eltoo_, запропоновані в 2018 році Крістіаном Декером, Расті Расселом та (співавтором цієї книги) Олаолувою Осунтокуном.

Канали Eltoo мають деякі цікаві властивості та спрощують реалізацію платіжних каналів. Однак, канали eltoo вимагають зміни мови Script Біткоїна, і тому у 2020 році їх ще неможливо реалізувати в мережі Біткоїн.

==== Мультипідписні (мультисиг) адреси

Платіжні канали побудовані на 2-з-2 мультисиг-адресах, блокуванням за часом та виходах SegWi†-транзакцій. Ми не будемо переглядати ці відносно просунуті концепції системи Біткоїн. Натомість у цьому розділі ми розглянемо на високому рівні мультисиг-скрипти, і як вони дозволяють нам будувати платіжні канали.
Якщо ви вже вивчали Біткоїн і знайомі з мультисиг-адресами, можете сміливо пропускати цей розділ.

[TIP]
====
Ця тема глибоко розкрита в розділі 7 книги "Mastering Bitcoin", який можна знайти тут: https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch07.asciidoc.
Крім того, якщо ви не знайомі з P2PKH-адресами, основним форматом та скриптовою мовою Біткоїна, радимо вам вивчити розділ 6 "Mastering Bitcoin", який можна знайти за адресою: https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc.
Також на YouTube-каналі Rene є відео, де він розбирає по бітам і байтам транзакцію витрати P2PKH-виходу: https://youtu.be/1n4g3eYX1UI
====

Скриптова мова Біткоїна має такий будівельний блок (примітив) як мультипідпис (мультисиг), який можна використовувати для створення ескроу-сервісів та складних конфігурацій управління власністю з кількома стейкхолдерами. Механізм, що вимагає використання кількох підписів для витрачання біткоїнів, називається _мультипідписною схемою_ і далі буде позначатися як схема _K-з-N_, де:


* N - загальна кількість підписантів, ідентифікованих в мультипідписній схемі
* K - _кворум_ або _поріг_, мінімальна кількість підписів, потрібна для авторизації витрати


Скрипт K-з-N мультипідпису виглядає так:

----
K <PubKey1> <PubKey2> ... <PubKeyN> N CHECKMULTISIG
----

де N - це загальна кількість перелічених публічних ключів (від PubKey1 до PubKeyN), K - це поріг кількості потрібних підписів для витрати виходу.

Для побудови платіжного каналу Lightning Network використовує мультипідписну схему 2-з-2. Наприклад, платіжний канал між Алісою та Бобом був би побудований на такому 2-з-2 мультисигу:

----
2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG
----

Вищенаведений блокуючий скрипт може бути розблокований скриптом з двома підписами: footnote:[Перший аргумент (0) не несе жодного сенсу, але він потрібен через баг у реалізації мультипідписів в Біткоїні. Ця проблема описана в "Mastering Bitcoin", Розділ 7.]

----
0 <Sig Alice> <Sig Bob>
----

Разом ці два скрипти формують комбінований скрипт валідації:

----
0 <Sig Alice> <Sig Bob> 2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG
----

==== Транзакція Фінансування (Funding Transaction)

Фундаментом платіжного каналу є мультисиг адреса 2-із-2. Два партнери по каналу фінансують платіжний канал, надсилаючи біткоїни на мультисиг адресу. Ця транзакція називається _транзакцією фінансування (funding transaction)_, вона записується в блокчейн. footnote:[В той час як в оригінальному вайтпейпері Lightning описані канали, що фінансуються обома партнерами, поточна специфікація станом на 2020 рік передбачає, що лише один партнер передає кошти в канал.]

Незважаючи на те, що транзакція фінансування видна всім на блокчейні, одразу не очевидно, що вона відповідає саме за платіжний канал Lightning, аж поки він не буде закритий. Крім того, платежі в каналі, розподіл балансу каналу між партнерами не видні нікому, окрім лише самих партнерів по каналу.

Сума на мультисиг адресі, називається _місткість каналу (channel capacity)_ і встановлює максимальну суму, яку можна надіслати через платіжний канал. Однак, оскільки кошти можна надсилати туди-сюди, місткість каналу не є верхньою межею того, скільки суммарно коштів може протікати по каналу. Так відбувається тому, що коли місткість каналу вичерпується платежами в одному напрямку, то його можна використовувати для надсилання платежів у зворотньому напрямку.


[NOTE]
====
Кошти, надіслані в транзакції фінансування на мультисиг адресу іноді називають "заблокованими в Lightning-каналі". Однак на практиці кошти в Lightning-каналі не "блокуються", а навпаки "вивільняються". Кошти в Lightning-каналі більш ліквідні, ніж кошти на блокчейні, оскільки їх можна витратити швидше, дешевше та більш конфіденційно. Відкриття Lightning-каналу вивільняє ваші біткоїни!
====

===== Приклад поганої процедури відкриття каналу

Якщо ви ретельно подумаєте про 2-із-2 мультисиг адреси, то зрозумієте, що розміщення ваших коштів на такій адресі, мабуть, несе певний ризик. Що робити, коли ваш партнер по каналу відмовляється підписати транзакцію, щоб "звільнити" кошти? Вони застрягли назавжди? Давайте розглянемо цей сценарій, і як протокол Lightning Network вирішує цю ситуацію.

Аліса та Боб бажають створити платіжний канал. Кожен з них створює пару ключів (приватний/публічний), після чого вони обмінюються відкритими ключами. Тепер вони можуть створити 2-із-2 мультисиг адресу із двох відкритих ключів, формуючи основу для свого платіжного каналу.

Далі Аліса конструює транзакцію, яка відправляє декілька mBTC на мультисиг адресу, створену з відкритих ключів Аліси та Боба. Якщо б Аліса просто опублікувала цю транзакцію в мережу Біткоїн без жодних додаткових заходів, то їй би довелося довіряти Бобу в тому, що в майбутньому Боб надасть свій підпис, щоб Аліса та Боб могли витратити кошти з цієї мультисиг адреси. В такому випадку у Боба була б можливість шантажувати Алісу, відмовляючи їй в підписі та обмежуючи таким чином Алісі доступ до її коштів.

Для запобігання цьому, Алісі треба створити ще одну транзакцію, яка буде витрачати кошти з мультисиг адреси і повертати їх на її адресу. Далі Аліса просить Боба підписати транзакцію повернення коштів _перед_ тим, як публікувати транзакцію фінансування в мережу Біткоїн. Таким чином, Аліса зможе отримати кошти назад, навіть якщо Боб зникне або перестане співпрацювати.

Транзакція "повернення грошей", яка захищає Алісу, є найпершою в послідовності транзакцій, які називаються _транзакції зобов'язання (commitment transactions)_, які ми детальніше розглянемо далі.

==== Транзакції Зобов'язання (Commitment Transactions)

_Транзакція зобов'язання (commitment transaction)_ - це транзакція, яка сплачує кожному із партнерів по каналу частину балансу та гарантує, що партнерам по каналу не потрібно довіряти один одному. Підписуючи транзакцію зобов'язання, кожен партнер каналу "бере на себе" зобов'язання щодо поточного балансу і надає іншому партнеру можливість отримати свої кошти будь-коли.

Коли у кожного із партнерів по каналу є підписана транзакція зобов’язання, тоді кожен із них може отримати свої кошти навіть без співпраці з іншим партнером по каналу. Це захищає їх обох від того, що інший партнер може зникнути, відмовитись від співпраці або вдатись до шахрайства, порушивши протокол платіжного каналу.

Транзакція зобов’язання, яку Аліса підготувала у попередньому прикладі, була «поверненням» її початкового платежу на мультисиг адресу. Транзакція зобов'язання розподіляє кошти платіжного каналу між партнерами по каналу відповідно до розподілу (балансу), який вони мають. Спочатку весь баланс належить Алісі, тому це просто повернення коштів. Але по мірі руху коштів від Аліси до Боба, вони обмінюватимуться підписами нових транзакцій зобов'язання, що фіксують новий розподіл балансу, причому частина коштів виплачується Алісі, а частина виплачується Бобу.

Припустимо, Аліса відкриває канал з Бобом місткістю 100К сатоші.
Спочатку Аліса володіє 100К сатоші, тобто всіма коштами в каналі. Ось як би працював протокол платіжного каналу:

. Аліса створює нову пару ключів (приватний/публічний) і повідомляє Бобу, що бажає відкрити канал шляхом відправлення йому повідомлення `open_channel` через протокол Lightning Network.
. Боб погоджується прийняти канал від Аліси, створює нову пару ключів (приватний/публічний) і надсилає свій публічний ключ Алісі у повідомленні `accept_channel`.
. Далі Аліса створює транзакцію фінансування зі свого гаманця, якою надсилає 100К сатоші на адресу мультисиг-скрипта +2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG+.
. Аліса ще не публікує в мережу цю транзакцію фінансування, проте надсилає Бобу id транзакції у повідомленні `funding_created`.
. І Аліса, і Боб створюють свої версії першої транзакції зобов'язання. Ця транзакція має витратити вихід транзакції фінансування та відправити усі біткоїни назад на адресу Аліси.
. Алісі та Бобу не потрібно обмінюватися цими транзакціями зобов'язання, оскільки кожен з них може побудувати її самостійно. Їм потрібно лише обмінятися підписами.
. Аліса надає Бобу підпис під транзакцією зобов'язання у повідомленні `funding_created`.
. Боб надає Алісі підпис під транзакцією зобов'язання у повідомленні `funding_signed`.
. Тепер, коли сторони обмінялися підписами, Аліса публікує транзакцію фінансування в мережу Біткоїн.

Слідуючи цього протоколу, Аліса не втрачає права власності на свої 100К сатоші, навіть незважаючи на те, що кошти надсилаються на 2-із-2 мультисиг адресу, від якої лише один ключ знаходиться під контролем Аліси.
Якщо Боб перестане відповідати Алісі, вона зможе опублікувати транзакцію зобов'язання і повернути свої кошти.
Єдиними її витратами будуть комісії за on-chain транзакції.
Поки вона дотримується протоколу, комісії - це її єдиний ризик при відкритті каналу.

Після цього початкового обміну транзакції зобов'язання створюються кожного разу при зміні балансу каналу. Іншими словами, кожного разу, коли між Алісою та Бобом проходить платіж, створюються нові транзакції зобов’язання та відбувається обмін підписами. Кожна нова транзакція зобов’язання кодує останній баланс між Алісою та Бобом.

Якщо Аліса хоче надіслати Бобу 30К сатоші, вони обидва створять нову версію своїх транзакцій зобов'язання, в якій тепер Алісі належить 70К сатоші, а Бобу - 30К сатоші. Кодування нового балансу Аліси та Боба у вигляді нової транзакції зобов'язання є тим засобом, за допомогою якого платіж "відправляється" по каналу.

Тепер, коли ми розуміємо транзакції зобов’язання, розглянемо деякі більш тонкі деталі. Ви могли помітити, що вищенаведений протокол залишає спосіб Алісі або Бобу обдурити свого партнера по каналу.

==== Шахрайство з попереднім станом

Скільки транзакцій зобов’язання є у Аліси після того, як вона заплатить Бобу 30К сатоші? У неї їх дві: в першій транзакції баланс Аліси складає 100К сатоші, в другій - 70К сатоші у Аліси, 30К сатоші у Боба.

У вищенаведеному протоколі каналу ніщо не заважає Алісі опублікувати попередню транзакцію зобов’язань. Аліса-шахрайка може опублікувати транзакцію зобов'язання, яка виплатить їй 100К сатоші.
Оскільки ця транзакція зобов'язання підписана Бобом, то він ніяк не зможе перешкодити Алісі її опублікувати.

Потрібен якийсь механізм, щоб завадити Алісі публікувати стару транзакцію зобов'язання. Спробуємо з’ясувати, як цього досягти і як це дає можливість Lightning Network працювати без необхідності довіри між Алісою та Бобом.

Оскільки Біткоїн стійкий до цензури, ніхто не може перешкодити комусь опублікувати стару транзакцію зобов’язання. Щоб запобігти цьому способу шахрайства, ми маємо будувати такі транзакції зобов’язання, щоб у випадку, коли публікується застаріла транзакція, шахрай міг бути покараний. Роблячи покарання досить великим, ми створюємо сильний стимул проти шахрайства, і це робить систему безпечною.

Покарання працює так, що обманута сторона отримує можливість забрати весь баланс шахрая. Отже, якщо хтось публікує стару транзакцію зобов’язання, в якій йому виплачується більший баланс, інша сторона може покарати шахрая, забравши *обвида* баланси - і свій і шахрая. Шахрай втрачає все.

Знову розглянемо сценарій побудови каналу, додавши механізм покарання за шахрайство:

* Аліса створює канал з Бобом на 100К сатоші.
* Аліса надсилає Бобу 30К сатоші.
* Аліса намагається кинути Боба на 30К сатоші, публікуючи стару транзакцію зобов’язання, забираючи 100К сатоші собі.
* Боб виявляє шахрайство і карає Алісу, забираючи всі 100К сатоші собі.
* В результаті Боб отримує всі 100К сатоші, із яких 70К сатоші він отримує за те, що ловить Алісу на шахрайстві.
* А у Аліси в результаті 0 сатоші.
* Намагаючись обдурити Боба на 30К сатоші, Аліса втратила 70К сатоші, які їй належали.

З таким потужним штрафним механізмом, Аліса не спокушається займатись шахрайством з публікацією старих транзакцій зобов'язання, оскільки так вона ризикує втратити весь свій баланс.

[NOTE]
====
У книзі "Mastering Bitcoin" Andreas Antonopoulos (автор цієї книги) відмічає наступне:
"Ключовою характеристикою Біткоїна є те, що якщо транзакція є валідною, вона залишається такою і не має обмеженого терміна дії. Єдиний спосіб скасувати транзакцію - це зробити подвійну витрату її входів іншою транзакцією перед тим, як вона буде змайнена".
====

Тепер коли ми зрозуміли, _чому_ потрібен штрафний механізм, і як він запобігає шахрайству, давайте детально розберемось, _як_ він працює.

Зазвичай транзакція зобов’язання має два виходи, які платять кожному із партнерів по каналу. Додамо _блокування за часом (timelock delay)_ та _секрет відкликання (revocation secret)_ до одного із виходів. Блокування за часом не дає власнику виходу витратити його відразу, як тільки транзакція зобов'язання буде включена в блок. Секрет відкликання дозволяє кожному партнеру негайно витратити вихід, оминаючи блокування за часом.

Отже, у нашому прикладі Боб володіє транзакцією зобов’язання, яка негайно платить Алісі, але його власний платіж відкладений в часі та може бути відкликаний. Аліса також має транзакцію зобов'язання, але у неї все навпаки: вона платить Бобу негайно, але її власний платіж відкладений в часі та може бути відкликаний.

Два партнери по каналу зберігають половину секрету відкликання, так що жоден з них не володіє повним секретом. Коли вони діляться своєю половиною секрету з партнером, тоді інший партнер по каналу отримує повний секрет і може використовувати його для виконання умови відкликання. Підписуючи нову транзакцію зобов’язання, вони відкликають попереднє зобов’язання, обмінюючи підпис на секрет відкликання.

Простіше кажучи, Аліса підписує нову транзакцію зобов’язання Боба лише в тому випадку, якщо Боб пропонує свою половину секрету відкликання попереднього зобов’язання. Боб підписує нову угоду про зобов'язання Аліси, лише якщо вона передає йому свою половину секрету відкликання попереднього зобов'язання.

З кожним новим зобов'язанням партнери обмінюються секретом, необхідним для "покарання". Цей секрет дозволяє їм ефективно _відкликати_ попередню транзакцію зобов'язання, роблячи її невигідною її публікацію. По суті, вони руйнують можливість використовувати старі зобов’язання після підписання нових. footnote:[Технічно все ще можливо публікувати старі зобов’язання, але механізм штрафних санкцій робить це економічно невигідним.]

Блокування за часом встановлюється на період до 2016 блоків (приблизно два тижні). Якщо хтось із партнерів по каналу опублікує транзакцію зобов’язаня без співпраці з іншим партнером, то для отримання коштів йому доведеться зачекати, поки буде змайнена задана кількість блоків (наприклад, 2 тижні). Інший партнер по каналу може затребувати власний баланс у будь-який час. Крім того, якщо опубліковане зобов'язання було попередньо відкликане, то партнер по каналу може *також* негайно покарати шахрая і забрати залишок шахрая, минаючи блокування за часом.

Тривалість блокування за часом узгоджується між партнерами по каналу. Зазвичай для каналів з більшою місткістю - воно триває довше, а для менших - коротше.

При кожному оновленні балансу в каналі, необхідно створювати і зберігати нові транзакції зобов’язання та нові секрети відкликання. Допоки канал залишається відкритим, всі _коли-небудь створені_ секрети відкликання, повинні зберігатися, оскільки вони можуть знадобитися в майбутньому. На щастя, секрети досить маленькі, і зберігати їх мають лише 2 партнери по каналу, а не вся мережа. Крім того, завдяки розумному механізму утворення секретів відкликання, ми маємо зберігати лише найсвіжіший секрет, оскільки з нього можна отримати всі попередні секрети (Див. <<revocation_secret_derivation>>.)

Тим не менш, управління та зберігання секретів відкликання є однією з найбільш складних частин Lightning-ноди, що вимагає від операторів нод утримувати резервні копії.

[NOTE]
====
Такі технології, як Сторожові Башти (Watchtowers) і заміна конструкції каналу на протокол "eltoo", можуть в майбутньому згладити ці проблеми та зменшити потребу в секретах відкликання, штрафних операціях та резервних копіях каналів.
====

Якщо Боб перестав відповідати, Аліса може закрити канал в будь-який момент, отримуючи свій належний баланс.
Після публікації на блокчейні *останньої* транзакції зобов’язання Аліса має зачекати, поки пройде певний часовий інтервал, перш ніж вона зможе витратити свої кошти з транзакції зобов’язання. Як ми побачимо далі, існує простіший спосіб закриття каналу без очікування, допоки Аліса та Боб перебувають онлайн та співпрацюють над закриттям каналу з корректним розподілом балансів. Але транзакції зобов’язання, які зберігаються кожним партнером по каналу, діють як гарантія того, що кошти не будуть втрачені при виникненні проблем з їх партнером по каналу.

==== Анонсування каналу

Партнери по каналу можуть домовитись про анонсування свого каналу по всій мережі Lightning, роблячи його _публічним каналом_. Для цього вони використовують протокол пліток Lightning Network, щоб повідомити іншим вузлам про існування, місткість та комісію свого каналу.

Публічне анонсування каналів дозволяє іншим нодам використовувати їх для маршрутизації своїх платежів, що в свою чергу дає можливість партнерам по каналу отримувати комісії за маршрутизацію чужих платежів через свій канал.

Партнери по каналу можуть вирішити не анонсувати свій канал, залишивши його _неанонсованим_.


[NOTE]
====
Ви можете зустріти термін "приватний канал" для неанонсованого каналу. Ми уникаємо використання цього терміна, оскільки він вводить в оману та створює хибне відчуття конфіденційності. Незважаючи на те, що анонсований канал не буде відомим іншим, поки він є відкритим, проте факт його існування та місткість будуть обов'язково виявлені в момент закриття каналу, оскільки ці деталі будуть опубліковані на блокчейні в остаточній розрахунковій транзакції. Інформація про існування неанонсованих каналів також може просочуватися різними іншими способами, тому ми уникаємо назви "приватний канал".
====

Неанонсовані канали використовуються для маршрутизації платежів, але лише тими нодами, які в курсі про їх існування або отримують "маршрутизаційні підказки" про шлях, який проходить через неанонсований канал.

Коли канал та його місткість публічно анонсуються за допомогою протоколу пліток, анонс також може містити таку інформацію про канал (метадані), як комісія за маршрутизацію та тривалість блокування за часом.

Коли нові ноди приєднуються до Lightning Network, вони збирають анонси каналів, які отримують по протоколу пліток від своїх пірів, і будують внутрішню "мапу" Lightning Network. Потім цю мапу можна використовувати для пошуку платіжних шляхів, які з’єднують канали один з одним.

==== Закриття каналу

Найкращий спосіб закрити канал - це... не закривати його! 
Для відкриття та закриття каналів потрібні on-chain транзакції, за які стягуються комісії, тому найкраще за все тримати канали відкритими якомога довше. 
Відкритий канал може завжди використовуватися для того, щоб відправляти та маршрутизувати платежі, при наявності достатньої місткостьі на кінці каналу. 
Навіть якщо ви надішлете весь баланс на інший кінець каналу, то ви зможете використовувати канал для отримання платежів від партнера по каналу. 
Ця концепція використання каналу спочатку в одному напрямку, а потім в протилежному, називається "ребалансуванням", ми більш детально розглянемо її в іншому розділі. 
Ребалансування каналу дозволяє лишати канал відкритим необмежено довгий час і використовувати його для по суті необмеженої кількості платежів.

Однак іноді закриття каналу є бажаним або необхідним. Наприклад:

* Ви хочете зменшити залишок коштів, що зберігається у ваших Lightning-каналах з міркувань безпеки, і хочете передати кошти в "холодне сховище".
* Партнер вашого каналу довго не відповідає, і ви більше не можете користуватися цим каналом.
* Канал використовується не часто, оскільки ваш партнер по каналу не є добре з'єднанною нодою, тому ви хочете використати ці кошти для відкриття іншого каналу з краще з'єднанною нодою.
* Ваш партнер по каналу порушив протокол навмисно або сталася помилка програмного забезпечення, і це змушує вас закрити канал, щоб захистити свої кошти.

Існує 3 способи закриття платіжного каналу:

* Взаємне закриття (хороший спосіб)
* Вимушене закриття (поганий спосіб)
* Порушення протоколу (жахливий спосіб)


Кожен спосіб корисний залежно від різних обставин, які ми розглянемо в наступній секції цього розділу.
Наприклад, коли ваш партнер по каналу знаходиться оффлайн, ви не здатні йти "хорошим шляхом", оскільки взаємне закриття неможливе без співпраці з партнером.
Зазвичай, ваше програмне забезпечення Lightning Network автоматично обере найкращий механізм закриття залежно від певних обставин.


===== Взаємне закриття (хороший спосіб)

Взаємне Закриття відбувається тоді, коли одидва партнери по каналу погоджуються закрити канал, цей спосіб завжди є найлішпим способом закриття каналу.

Коли ви вирішите закрити канал, ваша нода Lightning Network повідомить партнера по каналу про ваш намір.
Тепер і ваша нода, і нода партнера по каналу працюють разом над його закриттям.
Жодні нові спроби маршрутизації не будуть прийняті жодним із партнерів по каналу, а всі поточні спроби маршрутизації будуть завершені або видалені за таймаутом.
Фіналізування спроб маршрутизації вимагає часу, тому взаємне закриття також може зайняти деякий час.

Як тільки не лишається очікуючих розгляду спроб маршрутизації, ноди співпрацюють над підготовкою _закриваючої транзакції (closing transaction)_. 
Ця транзакція подібна до транзакції зобов'язання; вона кодує останній баланс каналу, але її виходи НЕ блокуються за часом.

Комісія за закриваючу транзакцію сплачується тим, хто відкривав канал,  а не тим, хто ініціював процедуру закриття. 
Погодившись щодо суми комісії на основі актуальної оцінки on-chain комісій, партнери по каналу підписують закриваючу транзакцію.

Після публікації закриваючої транзакції та підтвердження її мережею Біткоїн, канал закривається, і кожен партнер по каналу отримує свою частку балансу каналу. 
Незважаючи на час очікування, взаємне закриття зазвичай відбувається швидше за вимушене закриття. 

===== Вимушене закриття (поганий спосіб)

Вимушене Закриття відбувається тоді, коли один із партнерів по каналу намагається закрити канал без згоди іншого партнера.

Зазвичай це буває у тому випадку, коли один із партнерів по каналу недоступний, а отже взаємне закриття є неможливим. 
В такому випадку вам доведеться закрити канал в односторонньому порядку і «звільнити» кошти.

Щоб ініціювати вимушене закриття, ви можете просто опублікувати останню транзакцію зобов’язання.
Зрештою, для цього і потрібні транзакції зобов’язання - вони дають гарантію того, що ви не повинні довіряти вашому каналу, щоб отримати свій баланс з нього.


Як тільки ви опублікуєте в мережі Біткоїн останню транзакцію зобов’язання, і ця транзакція отримає підтвердження, вона створить два виходи, один для вас та один для вашого партнера. 
Як ми обговорювали раніше, мережа Біткоїн не має можливості дізнатись, чи ця транзакція зобов’язання є найновішою чи застарілою, що була опублікована з метою вкрасти у вашого партнера.
Отже ця транзакція зобов'язання дасть невелику "перевагу" вашому партнеру.
Вихід того з партнерів, хто ініціював вимушене закриття, матиме блокування за часом, а вихід іншого партнера може бути витрачений негайно.
У випадку, якщо ви опублікували застарілу транзакцію зобов'язання, блокування за часом дає вашому партнеру можливість "оспорити" таку транзакцію, використовуючи секрет відкликання, і покарати вас за шахрайство.
 

При публікації транзакції зобов'язання під час вимушеного закриття комісія буде дещо більшою, ніж взаємне закриття з кількох причин:

. Коли узгоджується транзакція зобов’язання, партнери по каналу не знають, якими будуть комісії в мережі на той час, коли транзакція буде опублікована. Оскільки комісію неможливо змінити без зміни виходів транзакції зобов'язання (потрібні обидва підписи) і оскільки вимушене закриття відбувається, коли партнер по каналу недоступний для підписання, розробники протоколу вирішили бути дуже щедрими при включенні комісії до транзакції зобов'язання. Вона може бути в 5 разів перевищувати оцінку on-chain комісій на момент узгодження транзакції зобов'язання.
. Транзакція зобов’язання включає додаткові виходи для будь-яких очікуючих спроб маршрутизації (HTLC), що робить транзакцію зобов’язання більшою (в байтах), ніж транзакція взаємного закриття. Більші транзакції вимагають більших комісій.
. Будь-які очікуючі спроби маршрутизації повинні бути вирішені on-chain, що спричинює додаткові on-chain транзакції.

[NOTE]
====
Блокуючі за хешем і часом транзакції (Hash Time-Locked Contracts, HTLC), будуть детально розглянуті в <<htlcs>>. 
Поки що вдаватимемо, що це платежі, які маршрутизуються через Ligntning Network, на відміну від платежів, що здійснюються безпосередньо між двома партнерами по каналу. 
Ці HTLC виглядають як додаткові виходи в транзакціях зобов’язання, чим збільшують розмір транзакції та on-chain комісію.
====

В цілому, не рекомендується вдаватися до вимушеного закриття, звісно крім випадків, коли це є необхідним. 
Ваші кошти будуть заблоковані на довший час, і той хто відкрив канал, повинен буде сплатити вищу комісію. 
Крім того, можливо, вам доведеться заплатити комісію за те, щоб скасувати або владнати спроби маршрутизації, навіть якщо ви не відкривали канал.

Якщо вам відомий партнер по каналу, ви можете спробувати зв’язатись з цією особою чи компанією та дізнатись, чому їхня Lightning-нода не працює, і попросити перезапустити її, щоб ви змогли виконати взаємне закриття каналу.

Вам варто розглядати вимушене закриття лише як крайній засіб.

===== Порушення протоколу (жахливий спосіб)

Порушення Протоколу відбувається тоді, коли ваш партнер по каналу намагається змахлювати, навмисно чи ні, публічкуючи застарілу транзакцію зобов'язання в блокчейн Біткоїн, по суті ініціює (нечесне) вимушене закриття зі свого боку.

    Протягом періоду блокування за часом ваша нода має опублікувати , яка забере ваш власний баланс і використає секрет відкликання, щоб також забрати баланс вашого нечесного партнера по каналу.

Щоб засікти це, ваша нода має бути онлайн та спостерігати за новими блоками і транзакціями на блокчейні. 
Оскільки платіж вашому партнеру по каналу буде ускладнений блокуванням за часом, ваша нода має певний час, щоб діяти.
До закінчення блокування за часом, ви маєте помітити порушення протоколу і опублікувати _караючу транзакцію (punishment transaction)_.
Якщо ви успішно виявили порушення протоколу і ініціювали покарання, то ви отримаєте всі кошти з каналу, включно з коштами вашого партнера по каналу.

В такому випадку закриття каналу буде досить швидким.
Щоб опублікувати караючу транзакцію, вам доведеться заплатити комісію, але ваша нода зможе встановити цю комісію відповідно до актуальної оцінки і не переплачувати. 
Як правило, ви хочете заплатити вищу комісію, щоб підтвердження транзакції відбулось якомога швидше.
Але так як зрештою ви отримаєте всі кошти шахрая, то по суті комісію сплатить шахрай.

Якщо вам не вдалось вчасно виявити порушення протоколу, і скінчився час блокування, то ви отримаєте лише ті кошти, які сплачуються вам транзакцією зобов'зання, яку опублікував ваш партнер. 
Будь-які кошти, які ви отримували після, були вкрадені вашим партнером.
Якщо вам зашилився якийсь баланс, то вам доведеться заплатити on-chain комісію, щоб його забрати.

Як і у випадку із вимушеним закриттям, всі очікуючі спроби маршрутизації також повинні бути вирішені у транзакції зобов'язання.

Закриття з порушенням протоколу може відбутись швидше за взаємне закриття, оскільки вам не потрібно домовлятися про закриття з вашим партнером або чекати поки спроби маршрутизації вирішаться або закінчиться їх термін дії, і швидше за вимушене закриття, адже вам не потрібно буде чекати закінчення блокування за часом.

Теорія ігор передбачає, що шахрайство не є привабливою стратегією, оскільки його легко виявити, і шахрай ризикує втратити _всі_ свої кошти, намагаючись отримати тільки те, чим він володів раніше.
Крім того, по мірі розвитку Lightning Network, сторожові вежі (watchtowers) стануть широко доступними, шахрайство зможе виявляти третя сторона, навіть якщо обманутий партнер по каналу знаходиться оффлайн.

Отже, ми не рекомендуємо вдаватись до шахрайства. 
Однак ми рекомендуємо будь-кому, хто зловив шахрая, покарати його, забравши всі його кошти.

Отже, як ви виявляєте шахрайство або порушення протоколу у своїй повсякденній діяльності?

Для цього ви маєте запустити програмне забезпечення, яке відстежує загальнодоступний блокчейн Біткоїна щодо он-лайн транзакцій, які стосуються будь-яких транзакцій зобов’язання для кожного з ваших каналів. 
Серед цього програмного забезпечення:

* Правильно підтримувана Lightning-нода, що працює 24/7 цілодобово та без вихідних.
* _сторожова вежа (watchtower)_, що спостерігає за вашими каналами.
* Стороння нода сторожової вежі, якій ви платите за стеження за вашими каналами.

Ми детальніше розглянемо сторожові вежі в <<watchtowers>>.

Пам’ятайте, що транзакція зобов’язання має період блокування за часом, який вказується у вигляді певної кількості блоків, максимум до 2016 блоків.
Якщо ви запустите свою Lightning-ноду один раз до закінчення періоду блокування, вона буде ловити всі спроби шахрайства. 
Але не бажано вдаватися до такого ризику; простіше тримати ноду в безперервній роботі.

=== Інвойси

Більшість платежів у Lightning Network починаються з інвойса (рахунку-фактури), який генерує отримувач платежу. У нашому попередньому прикладі Боб створює інвойс у відповідь на "запит" платежу від Аліси.

[NOTE]
====
Існує спосіб надіслати "небажаний" платіж без інвойсу в обхід протоколу методом _keysend_. Ми розглянемо це пізніше в <<keysend>>.
====

Інвойс - це проста платіжна інструкція, що містить таку інформацію, як унікальний ідентифікатор платежу, який називається хеш платежу, одержувач, сума та необов’язковий текстовий опис.

Найважливіша частиною інвойсу є хеш платежу, він дозволяє платежу рухатися по кількох каналах в _атомарний_ спосіб. Атомарність означає, що певна дія може бути або повністю успішно виконана, або не виконана взагалі - не буває частково виконаної атомарної дії. У Lightning Network це означає, що платіж або проходить повністю весь шлях, або повністю провалюється. Платіж неможливо виконати частково, щоб якийсь проміжний вузол на шляху міг отримати платіж і залишити його собі.
Не існує такого поняття, як "частковий платіж" або "частково успішний платіж".

Інвойси не передаються через Lightning Network. Натомість вони передаються через будь-який інший механізм зв'язку. Це схоже на те, як Біткоїн-адреси передаються відправникам поза мережею Біткоїн через електронну пошту, у вигляді QR-коду або у текстовому повідомленні. Наприклад, Боб може подати Алісі Lightning-інвойс у вигляді QR-коду або надіслати його електронною поштою або будь-яким іншим способом.

Рахунки, як правило, кодуються у вигляді довгого рядку в кодировці bech32 або у вигляді QR-коду для сканування мобільним Lightning-гаманцем. Інвойс містить запитувану суму біткоїнів та підпис одержувача. Відправник дістає із підпису публічний ключ одержувача (id ноди), щоб відправник знав, куди направити платіж.

Ви помітили, як це контрастує з Біткоїном і які різні терміни використовуються? В Біткоїні одержувач передає відправнику адресу. У Lightning одержувач створює інвойс і відправляє його відправнику. В Біткоїні відправник надсилає кошти на адресу. У Lightning відправник сплачує інвойс, і платіж надходить до одержувача. Біткоїн базується на концепції "адреси", а Lightning - це платіжна мережа і базується на концепції "інвойсу". В Біткоїні ми створюємо "транзакцію", тоді як у Lightning ми надсилаємо "платіж".

==== Хеш та Прообраз Платежу

Найважливішою частиною рахунку-фактури є _хеш платежу_. Конструюючи інвойс, Боб отримує хеш платежу наступним чином:

1. Боб обирає випадкове число +r+. Це випадкове число називається _прообраз_ або _секрет платежу_.
2. Боб обраховує хеш платежу +H+ від +r+, використовуючи хеш-функцію  +SHA256+

latexmath:[H = SHA256(r)].

[NOTE]
====
Термін _preimage_ має математичне походження. Для будь-якої функції _y = f(x)_ всі вхідні значення, при яких функція приймає значення _y_, називаються прообразами _y_. В нашому випадку функцією є алгоритм хешування SHA256, а будь-яке значення _r_, яке має хеш _H_, називається прообразом.
====

Не існує способу знайти обернене значення SHA256 (тобто, вирахувати прообраз за його хешем). Тільки Боб знає значення +r+, тому +r+ - це секрет Боба. Але як тільки Боб оприлюднює +r+, кожен, у кого є хеш +H+, може перевірити, чи є +r+ правильним секретом, обчисливши +SHA256(r)+ і переконавшись, що він дорівнює +H+.

Платіж в Lightning Network є безпечним лише в тому випадку, якщо +r+ вибрано абсолютно випадково. Безпечність платежів покладається на односторонність хеш-функції та неефективність її повного перебору, а отже на те, що ніхто не може знайти +r+, знаючи +H+.

==== Додаткові Метадані

Інвойси можуть включати додаткові корисні метадані, наприклад короткий текстовий опис. Якщо користувач має сплатити кілька інвойсів, він зможе прочитати опис і згадати, про що цей чи інший інвойс.

Інвойс також може містити деякі _поради щодо маршрутизації_, що дозволяють відправнику використати неанонсовані канали для побудови маршруту до одержувача. В порадах про маршрутизацію також можуть бути перелічені публічні канали, наприклад, такі канали, про які одержувач знає, що вони мають достатню вхідну місткість для маршрутизації платежу.

На той випадок, якщо Lightning-нода відправника не може надіслати платіж через Lightning Network, інвойси можуть додатково містити on-chain Біткоїн-адресу, як альтернативу.

[NOTE]
====
Незважаючи на те, що завжди можна "повернутися" до on-chain Біткоїн-транзакцій, натомість краще відкрити новий канал до одержувача. 
Якщо вам в будь-якому випадку доводиться сплачувати on-chain комісію,  то ви можете сплатити її, щоб відкрити канал і зробити платіж через Lightning. Після здійснення платежу у вас залишиться відкритий канал з ліквідністю на стороні одержувача, і він може бути використаний для прийому платежів вашої Lightning-нодою в майбутньому. Така on-chain транзакція дає вам можливість здійснити платіж і мати канал для подальшого використання.
====


Інвойси містять термін придатності. Оскільки одержувач повинен зберігати прообраз +r+ для кожного виставленого інвойса, корисно мати термін дії інвойсів, щоб не зберігати прообрази вічно. Як тільки сплачується інвойс або закінчується термін його дії, одержувач може видалити прообраз.

=== Доставка платежу

Ми бачили вище, як одержувач створює інвойс, що містить хеш платежу. Цей хеш платежу використовується для переміщення платежу через низку платіжних каналів від відправника до одержувача, навіть якщо між ними немає прямого платіжного каналу.

Далі ми заглибимося в ідеї та методи, які використовуються для здійснення платежу через Lightning Network, і використаємо концепції, з якими ми вже познайомились.


Спочатку давайте розглянемо комунікаційний протокол мережі Lightning.

==== Peer-to-peer протокол пліток

Як ми вже згадували раніше, коли платіжний канал створено, партнери по каналу мають можливість зробити його публічним, повідомивши про його існування та його детальну інформацію всій мережі Lightning.

Анонси каналів передаються за допомогою peer-to-peer _протоколу пліток_. Peer-to-peer (або одноранговий) протокол - це комунікаційний протокол, в якому кожна нода підключається до випадкового набору інших нод, як правило, через TCP/IP. Кожна з нод, безпосередньо підключених (через TCP/IP) до вашої ноди, називається _піром (peer)_. Ваша нода, у свою чергу, є одним із їхніх пірів. Майте на увазі, коли ми говоримо, що ваша нода підключена до інших пірів, ми не маємо на увазі, що у вас із ними є платіжні канали, але лише те, що ваша нода спілкується зі своїми пірами за протоколом пліток.

Після відкриття каналу нода може анонсувати його своїм пірам через повідомлення `channel_announcement`.
Кожен пір перевіряє інформацію з повідомлення `channel_announcement` та верифікує відповідну транзакції фінансування на блокчейні Біткоїн.
Після перевірки нода поширює повідомлення серед своїх власних пірів, а ті - серед своїх пірів, і так далі, розповсюджуючи анонс по всій мережі.
Щоб запобігти надмірній комунікації, анонс каналу розповсюджується кожною нодою лише в тому випадку, якщо вона раніше його не розповсюджувала.

Протокол пліток також використовується для анонсування інформації про відомі ноди за допомогою повідомлення `node_announcement`.
Щоб це повідомлення було розповсюджене, нода повинна мати принаймні один публічний канал, анонсований через протокол пліток, знову ж таки з метою уникнення надмірного трафіку.

Платіжні канали мають різні метадані, корисні для інших учасників мережі.
Ці метадані в основному використовуються для прийняття рішень про маршрутизацію.
Оскільки ноди іноді можуть змінювати метадані своїх каналів, ця інформація передається у повідомленні `channel_update`.
Ці повідомлення будуть розповсюджуватися приблизно чотири рази на день (на кожний канал), щоб запобігти надмірній комунікації.
Протокол пліток також має безліч запитів та повідомлень для початкової синхронізації ноди та для оновлення стану ноди після перебування оффлайн.

Основним викликом для учасників Lightning Network є те, що інформація про топологію, що передається через протокол пліток, є лише частковою.
Наприклад, місткість платіжних каналів розповсюджується за протоколом пліток через повідомлення `channel_announcement`.
Однак ця інформація не настільки корисна, скільки інформація про фактичний розподіл місткості на балансах двох партнерів по каналу.
Нода може повідомити тільки загальну кількість біткоїнів в каналі.

Хоча Lightning Network могла би бути спроектований так, що обмінюватись інформацією про баланси партнерів по каналам та про точну топологію мережі, але це не було зроблено з кількох причин:

. Для захисту конфіденційності користувачів, щоб не кричати на всю мережу про кожний платіж. Оновлення інформації про баланс свідчить про те, що по каналу пройшов платіж. Ця інформація може бути співставлена, щоб виявити всі джерела і напрямки платежів.

. Для масштабування кількості платежів, які проводяться через Lightning Network. Не забувайте, що Lightning Network була створена в першу чергу через те, що інформування кожного учасника про кожен платіж в мережі погано масштабується. Тому Lightning Network не може бути спроектована таким чином, щоб оновлення балансу каналів ширилося між учасниками.

. Lightning Network - це динамічна система. Вона змінюється постійно і часто. Додаються нові ноди, інші ноди вимикаються, баланси змінюються і т.д. Навіть якщо розповсюджувати повну інформацію, вона буде актуальною лише короткий проміжок часу. Власне кажучи, інформація часто є застарілою на момент її одержання.

Ми розглянемо протокол пліток в подробицях пізніше.

Наразі важливо лише знати, що існує протокол пліток і що він використовується для обміну інформацією про топологію Lightning Network.
Інформація про топологію має вирішальне значення для доставки платежів через мережу платіжних каналів.


==== Пошук шляху та маршрутизація

Платежі в Lightning Network пересилаються по _шляху (path)_ із каналів, що зв'язують одного учасника з іншим, від джерела платежу до місця призначення платежу. Процес пошуку шляху від джерела до пункту призначення називається _пошуком шляху (path finding)_. Процес використання цього шляху для здійснення платежу називається _машрутизація (routing)_.

[NOTE]
====
Часта критика Lightning Network полягає в тому, що "маршрутизація" - це не вирішена задача або навіть є "невирішуваною" задачею. Насправді маршрутизація є тривіальною. З іншого боку, пошук шляху є складною задачею. Ці два терміни часто плутають, і їх потрібно чітко визначити, щоб визначити, яку саме задачу ми намагаємось вирішити.
====

Як ми побачимо далі, Lightning Network наразі використовує протокол _на основі джерела (source-based)_ для пошуку шляхів та протокол _цибулевої маршрутизації (onion routed)_ для маршрутизації платежів. На основі джерела означає, що відправник платежу повинен знайти шлях через мережу до визначеного пункту призначення. Цибулева (onion) маршрутизація означає, що елементи шляху складаються з шарів (як цибуля), причому кожен шар шифрується так, що його може бачити у розшифрованому вигляді одночасно лише одна нода. Ми обговоримо onion-маршрутизацію в наступній частині розділу.

=== Пошук Шляху На Основі Джерела

Якби ми знали точні баланси кожного каналу, ми могли б легко обчислити шлях платежу, використовуючи будь-який із стандартних алгоритмів пошуку шляхів з курсу інформатики. Це можна навіть вирішити таким чином, щоб оптимізувати комісію, яку беруть ноди за проходження платежу.

Однак інформація про баланси всіх каналів не є і не може бути відома всім учасникам мережі. Нам потрібні більш інноваційні стратегії пошуку шляхів.

Пошук шляхів на основі часткової інформації про топологію мережі є справжнім викликом, і досі проводяться активні дослідження цієї частини Lightning Network. Той факт, що проблема пошуку шляхів не "повністю вирішена" в Lightning Network, є основним пунктом критики цієї технології.

[NOTE]
====
Одним із поширених дорікань щодо пошуку шляхів у Lightning Network є те, що ця задача є нерозв'язною, оскільки вона еквівалентна NP-повній _Задачі Комівояжера_, фундаментальній проблемі в теорії обчислювальної складності. Насправді пошук шляху в Lightning не є еквівалентом Задачі Комівояжера і потрапляє в інший клас проблем. Ми успішно вирішуємо ці типи проблем (пошук шляху на графах з неповною інформацією) кожного разу, коли просимо Google дати нам вказівки щодо руху автомобілем, уникаючи заторів. Ми також успішно вирішуємо цю проблему кожного разу, коли маршрутизуємо платіж по мережі Lightning.
====

Пошук шляхів і маршрутизація можуть бути реалізовані різними способами, і в мережі Lightning можуть існувати безліч алгоритмів пошуку та маршрутизації, як і багато алгоритмів пошуку шляхів і маршрутизації існують для функціювання Інтернету. Пошук шляху на основі джерела є одним із багатьох можливих рішень і є достатньо успішною в сучасних масштабах мережі Lightning.

Стратегія пошуку шляхів, реалізована на даний момент нодами Lightning, полягає у "випробовуванні" шляхів, поки не буде знайдено такий, що матиме достатню ліквідність для проведення платежу. Це ітераційний процес спроб і помилок триває, доки не буде досягнутий успіх або шлях не буде знайдений. В даний час алгоритм не обов'язково знаходить шлях з найнижчими комісіями. Хоча ця спрощена стратегія не є оптимальною і, безумовно, може бути вдосконаленою, але навіть вона працює досить добре.

"Випробовування" шляху виконується Lightning-нодою або гаманцем, користувач не бачить його безпосередньо.
Користувач може зрозуміти, що триває випробовування, лише якщо платіж не завершується миттєво.

[NOTE]
====
В Інтернеті для доставки IP-пакетів від відправника до місця призначення  ми використовуємо алгоритм пересилання IP-пакетів. Хоча ці протоколи мають гарну властивість, що дозволяє Інтернет-хостам спільно знаходити шлях для потоку інформації через Інтернет, ми не можемо використати і адаптувати цей протокол для пересилання платежів по мережі Lightning. На відміну від Інтернету, Lightning-платежі повинні бути _атомарними_, а баланси каналу повинні залишатися _конфіденційними_. Крім того, місткість каналу в Lightning часто змінюється, на відміну від Інтернету, де пропускна здатність є відносно сталою. Ці нюанси потребують нових стратегій.
====

Звісно, пошук шляху є тривіальним, якщо ми хочемо заплатити своєму прямому партнеру по каналу, і на нашій стороні каналу вистачає балансу для цього. У всіх інших випадках наша нода використовує інформацію з протоколу пліток для пошуку шляху. Сюди входять відомі на той момент публічні платіжні канали, відомі ноди, відома топологія (як саме поєднуються відомі ноди), відомі місткості каналів та відомі комісії, встановлені власниками нод.

==== Цибулева (onion) маршрутизація

Lightning Network використовує _протокол цибулевої маршрутизації (onion routing protocol)_, подібний до протоколу знаменитої мережі Tor (The Onion Router).
Протокол onion-маршрутизації, що використовується в Lightning, називається _SPHINX mixformat_ і буде детально пояснений далі.

[NOTE]
====
Onion-маршрутизація Lightning SPHINX mixformat аналогічна маршрутизації мережі Tor лише за концепцією, але як протокол, так і його реалізація повністю відрізняються від тих, що використовуються в мережі Tor.
====

Платіжний пакет, що використовується для маршрутизації, називається "цибулею" (onion). footnote:[Термін "цибуля" відпочатку використовувався в проекті Tor. Більше того, мережу Tor також називають Onion network, і проект використовує цибулю як свій логотип. Доменне ім’я верхнього рівня, що використовується службами Tor в Інтернеті, - ".onion".]

Давайте скористаємося цибулевою аналогією, щоб виконати маршрутизований платіж. На своєму шляху від відправника платежу (платника) до місця призначення (одержувача платежу) цибуля передається від ноди до ноди протягом шляху. Відправник конструює всю цибулю, починаючи із середини назовні. Спочатку відправник створює інформацію про платіж для (кінцевого) одержувача платежу та загортає його у шар шифрування, яке може розшифрувати лише одержувач платежу. Далі відправник обгортає цей шар інструкціями для ноди, яка розташовується на шляху _безпосередньо перед кінцевим одержувачем_ і загортає у шар шифрування, яке може розшифрувати лише ця нода.

Шари конструюються із інструкцій, доки весь шлях не буде закодований у шари. Потім відправник передає повну цибулю першій ноді на шляху, яка може прочитати лише зовнішній шар. Кожна нода знімає шар шифрування і знаходить всередині інструкції, що розкривають інформацію про наступну ноду на шляху, та передає цибулю далі. Оскільки кожна нода здатна зняти лише свій шар шифрування, вона не може прочитати решту цибулі. Все, що вона знає, - це звідки прийшла цибуля і куди вона рухається далі, без жодних вказівок на те, хто є початковим відправником або кінцевим одержувачем.

Так триває до того часу, поки цибуля не досягне місця призначення платежу (тобто, ноди одержувача). Нода одержувача відкриває цибулю і виявляє, що наступні шари для дешифрування відсутні, і може прочитати всередні інформацію про платіж.

[NOTE]
====
На відміну від справжньої цибулі, при знятті кожного шару ноди додають таку ж кількість байт для відступу, щоб розмір цибулі залишався однаковим для наступної ноди. Як ми побачимо, це робить неможливим будь-якій з проміжних нод дізнатись щось про довжину шляху, скільки нод бере участь у маршрутизації, скільки нод передували їм або будуть далі. Це може збільшити конфіденційність, запобігаючи тривіальним атакам аналізу трафіку.
====

Протокол onion-маршрутизації, що використовується в Lightning, має наступні властивості:

. Нода-посередник може бачити лише, по якому каналу вона отримала цибулю і по якому каналу має її переслати. Це означає, що жодна нода в маршруті не може знати, хто саме ініціював платіж і кому він призначений. Це найважливіша властивість, що дає високий рівень конфіденційності.

. Цибулі достатньо малі, щоб вміститися в єдиний TCP/IP пакет і навіть у кадр канального рівня (наприклад, Ethernet). Це суттєво ускладнює аналіз трафіку, також збільшуючи конфіденційність.

. Цибулі побудовані таким чином, що вони завжди мають сталий розмір, незалежно від положення обробляючої ноди вздовж шляху. Коли «знімається» шар шифрування, цибуля доповнюється «сміттям», щоб її розмір не змінювався. Це заважає нодам-посередникам дізнатись своє положення на шляху.

. Цибулі мають HMAC (Hashed Message Authentication code, Хеш-код Аутентифікації Повідомлень) на кожному шарі, тому маніпуляції з цибулею неможливі на практиці.

. Цибулі можуть мати до 20 хопів (хоп в термінології комп'ютерних мереж - це перехід пакету данних від одного сегменту мережі до іншого) або цибулевих шарів, якщо хочете. Цим забезпечуються достатньо довгі шляхи.

. Для шифрування цибулі на кожному хопі використовуються різні тимчасові ключі шифрування. Якщо ключ (зокрема, приватний ключ ноди) буде вкрадено зловмисником в якийсь момент часу, він не зможе розшифрувати цибулі. Простими словами, для досягнення більшої безпеки ключі ніколи не використовуються повторно.

. Повідомлення про помилки можуть бути відправлені з ноди, яка генерує помилку, початковому відправнику за тим самим протоколом цибулевої маршрутизації. Для зовнішнього спостерігача та нод-посередників цибулі помилок не відрізняються від цибуль маршрутизації. Маршрутизація помилок використовується при "випробуванні" шляху методом спроб і помилок, який використовується для пошуку шляху, що має достатню місткість для успішної маршрутизації платежу.

Onion-маршрутизація буде детально розглянута в <<onion_routing>>.

==== Алгоритм Пересилання Платежів

Як тільки відправник платежу знаходить можливий шлях у мережі та створює цибулю, платіж пересилається кожною нодою із шляху. Кожна нода обробляє один шар цибулі та пересилає її далі по шляху наступній ноді.

Кожна проміжна нода отримує Lightning-повідомлення під назвою `update_add_htlc` із хешем платежу та цибулею. Проміжна нода виконує ряд кроків, які називаються _алгоритмом пересилання платежів (payment forwarding algorithm)_:

. Нода розшифровує зовнішній шар цибулі та перевіряє цілісність повідомлення.

. Нода підтверджує, що може виконати підказки щодо маршрутизації, виходячи з доступної місткості на вихідному каналі та комісії.

. Нода співпрацює зі своїм партнером по вхідному каналу для оновлення стану каналу.

. Оскільки нода видаляє деякі дані на початку цибулі, вона додає відступ на кінці, щоб розмір цибулі не змінювався.

. Нода слідує підказкам щодо маршрутизації, щоб переслати модифікований onion-пакет на свій вихідний платіжний канал, надсилаючи повідомлення `update_add_htlc`, яке включає той самий хеш платежу та цибулю.

. Вона співпрацює зі своїм партнером по вихідному каналу для оновлення стану каналу.

Звісно, в разі помилки ці кроки перериваються і припиняються, а ініціатору повідомлення `update_add_htlc` відправляється повідомлення про помилку. Повідомлення про помилку надсилається в onion-форматі назад на вхідний канал.

Коли помилка поширюється назад кожному каналу по шляху, партнери по каналу видаляють очікуючий платіж, відкочуючи платіж.

Якщо платіж не проходить швидко, є велика ймовірність помилки платежу, проте нода ніколи не повинна ініціювати повторну спробу платежу по іншому шляху, доки їй не повернеться цибуля з помилкою. Інакше, відправник сплачував би двічі, якщо обидві спроби оплати врешті-решт мали б успіх.

=== Шифрування P2P-Комунікації

Lightning Network - це p2p-протокол між його учасниками. Як ми бачили в попередніх розділах, мережа виконує дві функції, які утворюють дві логічні мережі, що разом складають _Lightning Network_:

1. Широка p2p-мережа, що використовує протокол пліток для розповсюдження інформації про топологію, і в якій випадковим чином піри з’єднуються між собою. Піри не обов’язково мають між собою платіжні канали, тому вони не завжди є партнерами по каналах.

2. Мережа платіжних каналів між партнерами по каналам. Партнери по каналу також пліткують між собою про топологію, тобто вони є пірами у протоколі пліток.

Вся комунікація між пірами відбувається шляхом відправленням повідомлень під назвою _Lightning Messages_. Всі ці повідомлення зашифровані із використанням криптографічного фреймворку _Noise Protocol Framework_. Цей фреймворк дозволяє створювати криптографічні протоколи зв'язку, що пропонують аутентифікацію, шифрування, пряму секретність та конфіденційність особи. Noise Protocol Framework також використовується в ряді популярних комунікаційних систем з наскрізним шифруванням, таких як WhatsApp, Wireguard та I2P. Більше інформації можна знайти тут:

https://noiseprotocol.org/

Використання Framework Noise Protocol в Lightning Network гарантує, що кожне повідомлення в мережі одночасно аутентифіковане і зашифроване, що підвищує конфіденційність та стійкість мережі до аналізу трафіку, глибокої інспекції пакетів та прослуховування. Однак тут є побічний ефект, адже це робить розробку і тестування протоколів дещо складнішими, оскільки не можна просто спостерігати за мережею за допомогою перехоплення пакетів або такого інструменту для аналізу мережі, як Wireshark. Натомість розробники повинні використовувати спеціалізовані плагіни, які розшифровують протокол з точки зору ноди, наприклад, _lightning dissector_, плагін для Wireshark:

https://github.com/nayutaco/lightning-dissector

=== Думки щодо Довіри
Поки людина дотримується протоколу і захищає свою ноду, вона не несе великого ризику втратити кошти через участь в Lightning Network.
Однак існує необхідність сплати комісій при відкритті каналу.
Будь-які витрати повинні мати відповідну вигоду.
У нашому випадку винагородою для Аліси за покриття витрат на відкриття каналу є те, що Аліса може відправляти та після того, як посуне деякі кошти на інший кінець каналу, отримувати біткоїни через Lightning Network в будь-який час, і що вона може заробляти комісії в біткоїнах, пересилаючи платежі інших людей.
Аліса знає, що теоретично Боб може закрити канал відразу після відкриття, за що Аліса буде змушена сплатити on-chain комісію.
Алісі потрібно мати невелику довіру до Боба.
Аліса була в кафе Боба, і, очевидно, Боб був зацікавлений продати свою каву, тому Аліса могла довіряти Бобу в цьому сенсі.
І Аліса, і Боб мають взаємну вигоду.
Аліса вирішує, що вона отримує для себе достатньо плюсів, щоб взяти на себе оплату on-chain комісії за створення каналу до Боба.
На відміну від цього, Аліса не відкриватиме канал із якимось незнайомцем, який щойно надіслав їй неочікуваний електронний лист із проханням відкрити канал до нього.

=== Порівняння з Біткоїном

Хоча мережа Lightning побудована поверх Біткоїна і успадковує багато її особливостей та властивостей, існують важливі відмінності, про які повинні знати користувачі обох мереж.

Деякі відмінності присутні в термінології. Також існують архітектурні відмінності та відмінності в користувацькому досвіді. У наступних кількох секціях ми розглянемо відмінності та схожість, пояснимо термінологію та скоригуємо наші очікування.

==== Адреси vs Інвойси, Транзакції vs Платежі

Зазвичай при оплаті у Біткоїні користувач отримує біткоїн-адресу (наприклад, відсканувавши QR-код на веб-сторінці або отримавши текстову адресу від друга через швидке повідомлення або e-mail). Потім він використовує свій Біткоїн-гаманець для створення транзакції для відправлення коштів на цю адресу.

В Lightning Network отримувач платежу створює інвойс. Lightning-інвойс можна розглядати як аналог Біткоїн-адреси. Одержувач дає відправнику Lightning-інвойс у вигляді QR-коду або тексту, як і у випадку Біткоїн-адреси.

Відправник використовує свій Lightning-гаманець для оплати інвойсу, скопіювавши текст інвойсу або відсканувавши його QR-код. Lightning-платіж є аналогом Біткоїн-"транзакції".

Однак існують деякі відмінності в користувацькому досвіді. Біткоїн-адреса може бути _використана багаторазово_. Біткоїн-адреси  не мають терміну придатності, і допоки власник адреси володіє ключем, кошти, що знаходяться на відповідній адресі, завжди доступні. Відправник може надіслати будь-яку кількість біткоїнів на раніше використану адресу, а одержувач може опублікувати одну постійну адресу, щоб отримати на неї багато платежів. Хоча це суперечить найкращим практикам з міркувань конфіденційності, технічно це можливо і насправді досить часто відбувається.

Однак у Lightning кожен інвойс можна використовувати лише один раз і лише для визначеної суми платежу. Ви не можете платити більше або менше визначеної суми, ви не можете використовувати інвойс кілька разів, кожен інвойс має вбудований термін придатності. У Lightning одержувач має створити окремий новий інвойс для кожного платежу, заздалегідь вказавши суму платежу. З цього є виняток, а саме механізм під назвою _keysend_, який ми розглянемо в <<keysend>>.

==== Вибір Виходів vs Пошук Шляху

Для того, щоб здійснити платіж у мережі Біткоїн, відправник повинен використати один або кілька невитрачених виходів транзакцій (UTXO).
Якщо користувач має кілька UTXO, їм (вірніше, їх гаманцю) потрібно буде вибрати, які саме UTXO витратити.
Наприклад, користувач, який здійснює платіж у розмірі 1 BTC, може використати один вихід з 1 BTC, два виходи на 0.25 BTC і на 0.75 BTC або чотири виходи по 0.25 BTC кожен.

В Lightning платежі не потребують входів для витрати, замість цього кожен платіж призводить до оновлення балансу каналу, перерозподіляючи кошти між двома партнерами по каналу. Відправник бачить це як "переміщення" балансу каналу з його кінця каналу на інший кінець до свого партнера по каналу. Lightning-платежі використовують ряд каналів для маршрутизації платежу від відправника до одержувача. Кожен із цих каналів повинен мати достатню місткість для маршрутизації платежу.

Оскільки для здійснення платежу можна використовувати безліч можливих каналів і шляхів, то вибір каналів та шляхів Lightning-користувачем є в деякому сенсі аналогічним вибору UTXO Біткоїн-користувачем.

Завдяки таким технологіям, як Atomic Multi-Path (AMP, Атомарний Мульти-Шлях) і Multi-Path Payments (MPP, Мульти-Шляхові Платежі), які ми розглянемо в наступних розділах, кілька шляхів Lightning можна об'єднати в один атомарний платіж, як і кілька UTXO можна об'єднати в одну атомарну Біткоїн-транзакцію.

==== Решта у Біткоїні vs Відсутність Решти у Lightning

Щоб виконати платіж у мережі Біткоїн, відправник повинен використати один або кілька невитрачених виходів транзакцій (UTXO). UTXO можна витратити тільки повністю, його не можна розділити та витратити частково. Отже, якщо користувач хоче заплатити 0,8 BTC, але має лише один UTXO на 1 BTC, тоді йому потрібно витратити весь цей 1 BTC UTXO, при цьому відправити 0,8 BTC одержувачу і відправити 0,2 BTC назад собі в якості решти. Виплата решти 0,2 BTC створює новий UTXO, він називається "вихід з рештою".

У Lightning при відкриванні каналу транзакція фінансування витрачає деякі UTXO і створює мультисиговий UTXO. Після того, як певна сума біткоїнів заблокована в каналі, її можна пересилати туди-сюди по каналу частинами і без решти.
Так відбувається тому, що партнери по каналу просто оновлюють баланс каналу і створюють нові UTXO лише тоді, коли канал врешті-решт закривається транзакцією закриття.

==== Комісії за Майнинг vs Комісії за Маршрутизацію

У мережі Біткоїн користувачі платять комісії майнерам за включення їх транзакцій у блок. Ці комісії отримує майнер відповідного блоку.
Розмір комісії залежить від _розміру_ транзакції в _байтах_, які займає транзакція в блоці, а також від того, як швидко користувач хоче, щоб ця транзакція була змайнена.
Оскільки майнери зазвичай спочатку майнять найвигідніші транзакції, то користувач, який хоче, щоб його транзакція була змайнена негайно, буде змушений платити _вищу_ комісію за байт, тоді як користувач, який не поспішає, може сплатити _меншу_ комісію за байт.

У Lightning Network користувачі платять комісії іншим користувачам (нодам-посередникам) за маршрутизацію платежів через їх канали.
Щоб маршрутизувати платіж, нода-посередник має перемістити кошти в двох або більше своїх каналах, а також передати дані щодо платежу. Зазвичай посередник стягує з відправника комісію, виходячи з _суми_ платежу, встановлюючи мінімальну _base fee (базову комісію)_ (фіксовану комісію за кожен платіж) та _fee rate (відсоток)_ (пропорційно до суми платежу). Таким чином, маршрутизація платежів на більшу суму коштує дорожче, формується ринок ліквідності, де різні користувачі беруть різну комісію за маршрутизацію платежів через свої канали.

==== Змінні Комісії Залежно від Навантаження vs Анонсовані Комісії

В мережі Біткоїн майнери працюють заради прибутку, тому зазвичай вони намагаються включити якомога більше транзакцій у блок, не перевищуючи місткість блоку, що називається _block weight (вага блоку)_.

Якщо в черзі (що називається mempool/мемпул) знаходиться більше транзакцій, ніж може вміститися в блок, майнери майнять ті транзакції, що мають найбільшу комісію за одиницю (байт) _ваги транзакції_.
Тому коли в черзі знаходиться багато транзакцій, користувачі мають платити вищу комісію, щоб їх транзакції були включені до наступного блоку, або вони мають зачекати, поки в черзі стане менше транзакцій.
Це, очевидно, призводить до появи ринку комісій, коли суми комісій залежать від того наскільки терміново користувачам потрібно, щоб їх транзакція була включена до наступного блоку.

У мережі Біткоїн простір блоків є дефіцитним ресурсом. Користувачі змагаються за місця в блоках. Ринок комісій базується на доступному просторі блоків. Дефіцитним ресурсом в мережі Lightning є ліквідність каналів (кількість коштів, доступних для маршрутизації через канали), і з'єднанність каналів між собою (скільки добре з'єднаних нод є досяжними до ваших каналів). Користувачі Lightning конкурують між собою за місткість та з'єднаність, і тому ринок комісій Lightning керується місткістю та з'єднаністю.

У Lightning Network користувачі платять комісію тим, хто маршрутизує їх платежі. Маршрутизація платежу в економічному сенсі - це не що інше, як надання та присвоєння місткості відправнику. Звичайно, маршрутизуючі ноди, які беруть меншу плату за однакову ємність, будуть більш привабливими для проходження платежів. Таким чином, існує ринок плати, де маршрутизуючі ноди конкурують між собою за збори, які вони беруть за маршрутизацію платежів по своїм каналам.

==== Публічні Біткоїн-Транзакції vs Приватні Lightning-Платежі

У мережі Біткоїн кожна транзакція опублікована у блокчейні. Хоча адреси псевдонімні і, як правило, не прив’язані до особи, кожен користувач мережі бачить і перевіряє всі транзакції.
Крім того, компанії, що стежать за блокчейном, збирають та масово аналізують ці дані та продають їх зацікавленим сторонам, таким як приватні фірми, уряди та спецслужби.

Натомість платежі Lightning Network є майже повністю приватними. Зазвичай лише відправник та одержувач повністю знають про джерело, отримувача та суму окремо взятого платежу. Більш того, одержувач може навіть не знати джерела платежу. Оскільки платежі здійснюються методом цибулевої маршрутизації, користувачі, які маршрутизують платіж, знають лише про суму платежу, але не можуть встановити ні відправника, ні отримувача.

Таким чином, Біткоїн-транзакції транслюються публічно та зберігаються назавжди. Lightning-платежі виконуються кількома вибраними пірами, і інформація про них зберігається приватно і лише до закриття каналу. Створення засобів масового спостереження та аналізу, еквівалентних тим, що використовуються у Біткоїн-мережі, буде значно складнішим у Lightning.

==== Очікування Підтвердження vs Миттєвий Розрахунок

У Біткоїн-мережі транзакції вважаються завершеними лише після включення їх в блок. В цьому випадку кажуть, що транзакція «підтверджена» у відповідному блоці. По мірі видобування наступних блоків транзакція отримує більше "підтверджень" і вважається більш безпечною.

У Lightning Network підтвердження мають значення лише для відкриття та закриття каналів on-chain. Як тільки транзакція фінансування отримує відповідну кількість підтверджень (наприклад, 3), партнери по каналу вважають канал відкритим. Оскільки біткоїни в каналі управляються смарт-контрактом, платежі завершуються _моментально_ після отримання кінцевим одержувачем.
На практиці миттєве завершення платежу означає, що для здійснення та завершення платежу потрібно лише кілька секунд. Як і у випадку з Біткоїном, платежі Lightning не є оборотними.

Нарешті, при закритті каналу в мережі Біткоїн здійснюється транзакція, після підтвердження якої, канал вважається закритим.

==== Відправлення Довільних Сум vs Обмеження Місткості

У Біткоїн-мережі користувач може без обмежень відправити будь-яку кількість своїх біткоїнів іншому користувачеві. Теоретично, однією транзакцією можна відправити до 21 мільйона біткоїнів.

У Lightning Network користувач може надіслати партнеру по каналу лише ту суму біткоїнів, скільки зараз є на його боці в цьому каналі. Наприклад, якщо користувач володіє одним каналом з 0,4 BTC на його боці, і іншим каналом з 0,2 BTC на його боці, то він може надіслати одним платежем максимум 0,4 BTC. Це справедливо незалежно від того, скільки біткоїнів користувач має у своєму Біткоїн-гаманці.

Атомарні Мульти-Шляхові Платежі (Atomic Multi-Path Payments, AMP) - це фіча, яка дозволяє користувачу з вищенаведеного прикладу скомбінувати обидва канали на суми 0.4 BTC і 0.2 BTC, щоб відправити сумарно 0.6 BTC одним платежем. AMP-и на даний момент тестуються у Lightning Network, і очікується, що будуть широко використовуватись, коли ця книга буде завершена. Більш детально про AMP-и: <<atomic_multipath_payments>>.

Якщо платіж маршрутизується, то кожна нода на шляху повинна мати канали з місткістю не менше суми платежу, що маршрутизується. Ця умова має виконуватися для кожного каналу, через який маршрутизується платіж. Пропускна здатність каналу найменшої місткості на шляху встановлює верхню межу пропускної здатності всього шляху.

Отже, місткість та з'єднаність є критичними та дефіцитними ресурсами в мережі Lightning.

==== Стимулювання Платежів на Великі Суми vs Платежі на Малі Суми

Комісія в Біткоїн не залежить від суми, що надсилається у транзакції.
Транзакція на мільйон доларів має таку ж комісію, як і транзакція на 1 долар, якщо розміри цих транзакцій в байтах однакові.
У Lightning комісія складається із фіксованої величини плюс відсоток від суми транзакції.
Тому в Lightning комісія зростає із збільшенням суми платежу.
Ці різні структури комісій створюють різні стимули та призводять до різного використання мереж в залежності від суми транзакції.
Транзакція на більшу суму буде дешевша в мережі Біткоїн, а отже, користувачі віддадуть перевагу Біткоїн-мережі для транзакцій на великі суми. А для транзакцій на невеликі суми користувачі віддадуть перевагу Lightning.

==== Використання Блокчейну в якості Книги Обліку vs в якості Судової Системи

У мережі Біткоїн, кожна транзакція врешті-решт записується в блок.
Таким чином, блокчейн формує повну історію кожної транзакції з моменту створення Біткоїна і надає спосіб повного аудиту кожного існуючого біткоїна.
Як тільки транзакція включена в блокчейн, вона стає остаточною.
Таким чином, не може виникнути жодних суперечок щодо того, скільки біткоїнів контролюється певною адресою в певній точці блокчейну.

У Lightning Network баланс біткоїнів в каналі у визначений час відомий лише двом партнерам по каналу і стає видимим для решти мережі тільки коли канал закривається.
Коли канал закрито, кінцевий баланс каналу оприлюднюється в блокчейні, і кожен партнер отримує свою частку біткоїнів в цьому каналі.
Наприклад, якщо при відкритті каналу на балансі у Аліси було 1 BTC, Аліса відправила 0.3 BTC Бобу, то остаточний баланс каналу становить 0.7 BTC у Аліси і 0.3 BTC у Боба.
Якщо Аліса вдається до шахрайства, оприлюднюючи в блокчейн стан каналу на момент його відкриття, коли баланс Аліси складав 1 BTC, а баланс Боба - 0 BTC, то Боб може покарати Алісу, оприлюднивши справжній кінцевий стан каналу, а також створити штрафну транзакцію, яка віддасть йому всі біткоїни в каналі.
Для Lightning-мережі Біткоїн-блокчейн діє як судова система.
Біткоїн, як робот-суддя, реєструє початковий та кінцевий баланс кожного каналу та затверджує штрафи на той випадок, якщо одна зі сторін намагається вдатися до шахрайства.

==== Оффлайн vs Онлайн, Асинхронність vs Синхронність

Коли користувач мережі Біткоїн надсилає кошти на адресу призначення, йому не потрібно нічого знати про одержувача. Одержувач може бути як в режимі офлайн, так і онлайн, для цього не потрібно жодної взаємодії між відправником та одержувачем. Взаємодія відбувається між відправником та блокчейном Біткоїн. Отримання біткоїнів у блокчейні - це _пасивна_ і _асинхронна_ дія, яка не вимагає будь-якої взаємодії з одержувачем або необхідності перебування одержувача онлайн в будь-який час. Біткоїн-адреси можна навіть генерувати оффлайн і ніколи не «реєструвати» в мережі Біткоїн. Тільки витрата біткоїнів вимагає взаємодії.

У Lightning отримувач повинен бути "онлайн", щоб платіж було здійснено перед тим, як скінчиться його строк дії.
Одержувач повинен мати запущену ноду або мати когось, хто запустить ноду замість нього (сторонній кастодіальний сервіс). Точніше кажучи, обидві ноди відправника та одержувача повинні бути онлайн під час здійснення платежу та координувати між собою діяльність. Отримання платежу Lightning - це _активний_ та _синхронний_ процес за участі відправника та одержувача, але без участі більшої частини мережі Lightning або мережі Біткоїн (за винятком посередницьких нод маршрутизації, якщо такі є).

Синхронна та онлайнова природа мережі Lightning мабуть становить найбільшу різницю в користувацькому досвіді і часто бентежить користувачів, які звикли до Біткоїна.

==== Сатоші vs мілі-сатоші

В Біткоїні найменша неділима сума - це _сатоші_. Lightning в цьому плані ще більш гнучка система, адже ноди Lightning працюють з _мілі-сатоші_ (тисячна доля сатоші). Це дозволяє надсилати через Lightning зовсім крихітні платежі. Через платіжний канал може бути надісланий платіж на суму в мілі-сатоші, платежі з настільки малою сумою слід характеризувати як _наноплатіж_.

Звісно, мілі-сатоші неможливо записати у блокчейні. Після закриття каналу залишки округлюються до сатоші. Але протягом життя каналу можуть бути мільйони наноплатежів на суми, вимірювані у мілі-сатоші. Lightning Network пробиває бар’єр мікроплатежів.

=== Спільне між Біткоїн та Lightning

==== Грошова Одиниця

І мережа Біткоїн, і мережа Lightning використовують спільну грошову одиницю - біткоїн. У Lightning-платежах використовуються ті самі біткоїни, що і у біткоїн-транзакціях. Як наслідок, оскільки грошова одиниця однакова, то і ліміт грошей також однаковий: 21 мільйон біткоїнів. Із 21 мільйона всіх біткоїнів, деякі вже знаходяться на 2-із-2 мультисиг адресах, що складають платіжні канали в Lightning Network.

==== Незворотність і остаточність платежів

І Біткоїн-транзакції, і Lightning-платежі незворотні і незмінні. Для обох систем не існує можливості "скасування" або "повернення платежу". В обох системах відправник повинен діяти відповідально, а одержувачу гарантується остаточність операцій.

==== Довіра та ризик контрагента

Так само, як і Біткоїн, Lightning вимагає від користувача лише довіри до математики, шифрування та відсутності критичних помилок у програмному забезпеченні. Ні Біткоїн, ні Lightning не вимагають від користувача довіри до особи, компанії, установи чи уряду.
Оскільки Lightning працює поверх Біткоїна і покладається на Біткоїн як на нижележачий базовий рівень, очевидно, що модель безпеки Lightning зводиться до безпеки Біткоїна. Це означає, що Lightning пропонує в більшості випадків таку ж безпеку, як і Біткоїн, із незначним зниженням рівня безпеки лише за деяких обмежених обставин.

==== Операції, що не потребують дозволу

І Біткоїн, і Lightning може використовувати кожен, хто має доступ до Інтернету та підходяще програмне забезпечення (нода і гаманець).
Жодна із цих мереж не вимагає від користувачів отримання дозволу, проходження перевірки або авторизації від сторонніх осіб, компаній, установ чи уряду. Уряди в межах своєї юрисдикції можуть оголосоти Біткоїн або Lightning поза законом, але вони не здатні перешкодити їх глобальному використанню.

==== Відкритий код і відкрита система

І Біткоїн, і Lightning - це програмні системи з відкритим кодом, побудовані децентралізованою світовою спільнотою добровольців, доступні за відкритими ліцензіями. Обидві базуються на відкритих та сумісних протоколах, що функціонують як відкриті системи та відкриті мережі. Глобальні, відкриті та вільні.

=== Висновок

У цьому розділі ми розглянули, як насправді працює мережа Lightning та всі її складові частини. Ми розглянули кожен крок побудови, використання та закриття каналу. Ми розібрались, як маршрутизуються платежі. Нарешті ми порівняли Lightning та Біткоїн та проаналізували їх відмінності та спільні якості.

У наступних кількох главах ми переглянемо всі ці теми, але набагато детальніше.
