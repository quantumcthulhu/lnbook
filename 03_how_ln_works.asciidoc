[role="pagenumrestart"]
[[ch03_How_Lightning_Works]]
== Як Працює Lightning Network

Ми прослідкували за тим, як Аліса створила Lightning-гаманець і придбала каву у Боба, а тепер заглянемо під капот і роздивимось ближче різні компоненти Lightning Network, які приймали участь у цьому процесі.
Мета цього розділу - допомогти усвідомити найважливіші концепції та будівельні блоки Lightning Network. Тому в цьому розділі подається високорівневе уявлення без вникнення у всі технічні подробиці.

Якщо у вас є досвід в галузі інформатики, криптографії, Біткоїна та розробки протоколів, то цієї глави має бути достатньо для того, щоб ви змогли самостійно з'єднати всі деталі між собою.
Якщо ви менш досвідчені, то цей розділ дасть вам достатньо хороше загальне уявлення для більш легкого розуміння офіційних специфікацій протоколу, що відомі як BOLT (Basis of Lightning Technology, Основи Lightning Network).
Якщо ви новачок, ця глава допоможе вам краще зрозуміти технічні розділи книги.

Почнемо з визначення того, що таке Lightning Network (LN), і розберемо його у подальшій частині цього розділу.

**Lightning Network (LN) - це однорангова (peer-to-peer) мережа _платіжних каналів_, реалізована у вигляді смарт-контрактів на _блокчейні Біткоїн_, а також комунікаційний протокол, що визначає, як учасники створюють та виконують ці смарт-контракти**

=== Основи платіжних каналів

Ми побачимо, що платіжний канал - це просто 2-із-2 мультисиг адреса, один ключ якої контролюєти ви, а інший ключ - ваш партнер по каналу.
Ви домовляєтеся з вашим партнером по каналу про послідовність транзакцій, які витрачають кошти з цієї адреси. Замість того, аби публікувати в мережу та записувати ці транзакції на блокчейні, ви обидва утримуєте їх у себе.
Остання транзакція в цій послідовності транзакцій визначає, як саме розподілено кошти в каналі між вами та вашим партнером по каналу.
Таким чином, додавання до цієї послідовності транзакцій нової транзакції рівнозначно переказу частини балансу від одного партнера до іншого без інформування мережі Біткоїн про цю подію. Узгоджучи кожну нову транзакцію і змінюючи розподіл коштів у каналі, ви одночасно з цим відкликаєте попередню транзакцію, щоб жодна із сторін не могла повернутися до попереднього стану.
Кожна транзакція з цієї послідовності використовує мову Script Біткоїна, таким чином узгодження коштів між вами та вашим партнером по каналу регулюється смарт-контрактами Біткоїна.
Смарт-контракт передбачає покарання нечесного учасника каналу, який намагається опублікувати скасований раніше стан каналу.

[NOTE]
====
Якщо у вас є неопублікована транзакція, що витрачає кошти з 2-із-2 мультисиг адреси і виплачує частину залишку вам, то наявність підпису іншої сторони гарантує вам можливість самостійно опублікувати цю транзакцію в будь-який момент, лише додавши власний підпис.

Здатність володіння частково підписаною транзакцією і можливість публікації її та заволодіння балансом у будь-який час - є основою Lightning Network.
====

=== Маршрутизація платежів через канали

Якщо кілька учасників мають канали від одного до іншого, платіж також може бути "перенаправлений" з одного платіжного каналу в інший за допомогою встановлення _шляху_, з'єднуючого послідовність платіжних каналів.

Наприклад, якщо Аліса має канал з Бобом, і Боб має канал з Чарлі, то Аліса може надіслати гроші Чарлі. 

Архітектура Lightning Network дозволяє запрограмувати керуючі каналом смарт-контракти у такий спосіб, що Боб не матиме можливості вкрасти кошти, що проходять через його канал.

Смарт-контракт захищає партнерів по каналу так, що їм не потрібно мати взаємну довіру. Так само вся мережа захищає її учасників, щоб ті могли пересилати платежі без довіри до жодного з учасників мережі.

Оскільки канали побудовані на мультисиг адресах, а транзакції оновлення балансу є попередньо підписаними Біткоїн-транзакціями, то вся довіра, необхідна для роботи Lightning Network, походить від довіри до децентралізованої мережі Біткоїн!

Вищезазначені інновації, безумовно, є головним проривом, який дозволив створення Lightning Network.
Однак Lightning Network - це набагато більше, ніж просто криптографічні протоколи поверх мови Script Біткоїна.
Це всеосяжний комунікаційний протокол, який дозволяє рівноправним учасникам мережі обмінюватися Lightning-повідомленнями для пересилання біткоїнів.

Lightning Network також використовує gossip-протокол (протокол "пліток") для розповсюдження серед всіх учасників мережі публічної інформації про канали (про топологію мережі).

Наприклад, щоб Аліса мала змогу побудувати маршрут до Чарлі, їй треба знати про існування каналу між Бобом і Чарлі, тобто їй потрібна інформація про топологію мережі.

І останнє, але не менш важливе: Lightning Network - це не що інше, як додаток поверх Біткоїна, що використовує Біткоїн-транзакції та мову Script. Не існує "Lightning монети" або "Lightning блокчейна".

Поза технічними примітивами, протокол Lightning Network - це креативний спосіб отримати більше переваг від використання Біткоїну за рахунок проведення довільної кількості миттєвих платежів без необхідності довіряти комусь іншому, крім мережі Біткоїн.

=== Платіжні канали

Як ми бачили в попередньому розділі, Аліса використала свій гаманець для створення платіжного каналу між нею та іншим учасником Lightning Network.
З точки зору інформатики платіжний канал - це криптографічний комунікаційний протокол між вами та вашим партнером по каналу.
Це дозволяє партнерам по каналу надсилати кошти туди-сюди з довільною частотою.

Канал обмежений лише двома речами:
по-перше, час який займає передача через Інтернет кількох байтів даних, необхідних для переміщення коштів з одного кінця каналу на інший.
По-друге, місткість каналу, тобто сума біткоїнів, яка вноситься в канал при його відкритті.

Платіжні канали мають кілька дуже цікавих і корисних властивостей:

* Оскільки час оновлення стану каналу в першу чергу пов’язаний зі швидкістю передачі даних через Інтернет, здійснення платежу через платіжний канал відбувається майже миттєво.

* Якщо канал відкритий, здійснення платежу не вимагає підтвердження блоків Біткоїн. Насправді - доки ви та ваш партнер по каналу дотримуєтесь протоколу - він не вимагає жодної взаємодії з мережею Біткойн або із кимось іншим, крім вашого партнера по каналу.

* Криптографічний протокол побудований таким чином, що не потрібна жодна довіра між партнерами по каналу. Якщо ваш партнер перестає відповідати або намагається вас обдурити, ви можете попросити систему Біткоїн виступити в ролі "суду" за смарт-контрактом, який ви та ваш партнер заключили раніше.

* Платежі, зроблені в платіжному каналі, відомі лише вам і вашому партнеру. У цьому сенсі ви отримуєте більшу конфіденційність порівняно з Біткоїн-транзакціями, де кожна транзакція є публічною. На блокчейні публікується лише остаточний баланс, який є сукупністю всіх платежів у цьому каналі.


Біткоїну було близько 5 років, коли талановиті розробники вперше з'ясували, яким чином можна побудувати платіжні канали. На сьогоднішній день відомо щонайменше три різні методи.
В цьому розділі ми зосередимось на методі побудови каналу, вперше описаному Джозефом Пуном та Тадеушом Дрією у вайтпейпері "Lightning Network" 2015 року. Вони відомі як канали _Пуна-Дрії (Poon-Dryja)_ і на даний момент використовуються в Lightning Network.
Іншими двома методами є канали _Дуплексні Мікроплатежі_ (_Duplex Micropayment_), запропоновані Крістіаном Декером приблизно в той самий час, що й канали "Пуна-Дрії", та канали _eltoo_, запропоновані в 2018 році Крістіаном Декером, Расті Расселом та (співавтором цієї книги) Олаолувою Осунтокуном.

Канали Eltoo мають деякі цікаві властивості та спрощують реалізацію платіжних каналів. Однак, канали eltoo вимагають зміни мови Script Біткоїна, і тому наразі їх неможливо реалізувати в мережі Біткоїн.

==== Мультисиг адреси

Payment channels are built on top of 2-of-2 multisignature addresses, timelocks and Segregated Witness transaction outputs. We will not revise these relatively advanced concepts of the Bitcoin system. Instead, in this section we will provide a high-level overview of multisignature scripts and how they allow us to construct payment channels.
If you have already studied Bitcoin and are familiar with multisignature addresses, feel free to skip this section.

[TIP]
====
A deep dive into the topic discussed here is presented in chapter 7 of Mastering Bitcoin which can be found at: https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch07.asciidoc.
Also, in case you are not familiar with P2PKH addresses and the basic format and scripting language of Bitcoin we encourage you to study chapter 6 of Mastering Bitcoin which can be found at: https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc.
There is also a video on Rene's YouTube channel which dissects the bits and bytes of a transaction spending from a P2PKH output at: https://youtu.be/1n4g3eYX1UI
====

The Bitcoin scripting language provides a multisignature building block (primitive), that can be used to build escrow services and complex ownership configurations between several stakeholders. An arrangement that requires multiple signatures to spend Bitcoin is called a _multisignature scheme_, further specified as an _K-of-N_ scheme, where:


* N is the total number of signers identified in the multisignature scheme, and
* K is the _quorum_ or _threshold_ - the minimum number of signatures to authorize spending.

The script for an K-of-N multisignature is:

----
K <PubKey1> <PubKey2> ... PubKeyN N CHECKMULTISIG
----

where N is the total number of listed public keys (Public Key 1 through Public Key N) and K is the threshold of required signatures to spend the output.

The Lightning Network uses a 2-of-2 multisignature scheme to build a payment channel. For example, a payment channel between Alice and Bob would be build on a 2-of-2 multisignature like this:

----
2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG
----

The preceding locking script can be satisfied with an unlocking script containing a pair of signatures:

----
0 <Sig Alice> <Sig Bob>
----
The two scripts together would form the combined validation script:

----
0 <Sig Alice> <Sig Bob> 2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG
----

==== Транзакція Фінансування (Funding Transaction)

Фундаментом платіжного каналу є мультисиг адреса 2-із-2. Два партнери по каналу фінансують платіжний канал, надсилаючи біткоїни на мультисиг адресу. Ця транзакція називається _транзакцією фінансування (funding transaction)_, вона записується в блокчейн.

Незважаючи на те, що транзакція фінансування видна всім на блокчейні, одразу не очевидно, що вона відповідає саме за платіжний канал Lightning, аж поки він не буде закритий. Крім того, платежі в каналі, розподіл балансу каналу між партнерами не видні нікому, окрім лише самих партнерів по каналу.

Сума на мультисиг адресі, називається _місткість каналу (channel capacity)_ і встановлює максимальну суму, яку можна надіслати через платіжний канал. Однак, оскільки кошти можна надсилати туди-сюди, місткість каналу не є верхньою межею того, скільки суммарно коштів може протікати по каналу. Так відбувається тому, що коли місткість каналу вичерпується платежами в одному напрямку, то його можна використовувати для надсилання платежів у зворотньому напрямку.


[NOTE]
====
Кошти, надіслані в транзакції фінансування на мультисиг адресу іноді називають "заблокованими в Lightning-каналі". Однак на практиці кошти в Lightning-каналі не "блокуються", а навпаки "вивільняються". Кошти в Lightning-каналі більш ліквідні, ніж кошти на блокчейні, оскільки їх можна витратити швидше, дешевше та більш конфіденційно. Відкриття Lightning-каналу вивільняє ваші біткоїни!
====

===== Приклад поганої процедури відкриття каналу

Якщо ви ретельно подумаєте про 2-із-2 мультисиг адреси, то зрозумієте, що розміщення ваших коштів на такій адресі, мабуть, несе певний ризик. Що робити, коли ваш партнер по каналу відмовляється підписати транзакцію, щоб "звільнити" кошти? Вони застрягли назавжди? Давайте розглянемо цей сценарій, і як протокол Lightning Network вирішує цю ситуацію.

Аліса та Боб бажають створити платіжний канал. Кожен з них створює пару ключів (приватний/публічний), після чого вони обмінюються відкритими ключами. Тепер вони можуть створити 2-із-2 мультисиг адресу із двох відкритих ключів, формуючи основу для свого платіжного каналу.

Далі Аліса конструює транзакцію, яка відправляє декілька mBTC на мультисиг адресу, створену з відкритих ключів Аліси та Боба. Якщо б Аліса просто опублікувала цю транзакцію в мережу Біткоїн без жодних додаткових заходів, то їй би довелося довіряти Бобу в тому, що в майбутньому Боб надасть свій підпис, щоб Аліса та Боб могли витратити кошти з цієї мультисиг адреси. В такому випадку у Боба була б можливість шантажувати Алісу, відмовляючи їй в підписі та обмежуючи таким чином Алісі доступ до її коштів.

Для запобігання цьому, Алісі треба створити ще одну транзакцію, яка буде витрачати кошти з мультисиг адреси і повертати їх на її адресу. Далі Аліса просить Боба підписати транзакцію повернення коштів _перед_ тим, як публікувати транзакцію фінансування в мережу Біткоїн. Таким чином, Аліса зможе отримати кошти назад, навіть якщо Боб зникне або перестане співпрацювати.

Транзакція "повернення грошей", яка захищає Алісу, є найпершою в послідовності транзакцій, які називаються _транзакції зобов'язання (commitment transactions)_, які ми детальніше розглянемо далі.

==== Транзакції Зобов'язання (Commitment Transactions)

_Транзакція зобов'язання (commitment transaction)_ - це транзакція, яка сплачує кожному із партнерів по каналу частину балансу та гарантує, що партнерам по каналу не потрібно довіряти один одному. Підписуючи транзакцію зобов'язання, кожен партнер каналу "бере на себе" зобов'язання щодо поточного балансу і надає іншому партнеру можливість отримати свої кошти будь-коли.

Коли у кожного із партнерів по каналу є підписана транзакція зобов’язання, тоді кожен із них може отримати свої кошти навіть без співпраці з іншим партнером по каналу. Це захищає їх обох від того, що інший партнер може зникнути, відмовитись від співпраці або вдатись до шахрайства, порушивши протокол платіжного каналу.

Транзакція зобов’язання, яку Аліса підготувала у попередньому прикладі, була «поверненням» її початкового платежу на мультисиг адресу. Транзакція зобов'язання розподіляє кошти платіжного каналу між партнерами по каналу відповідно до розподілу (балансу), який вони мають. Спочатку весь баланс належить Алісі, тому це просто повернення коштів. Але по мірі руху коштів від Аліси до Боба, вони обмінюватимуться підписами нових транзакцій зобов'язання, що фіксують новий розподіл балансу, причому частина коштів виплачується Алісі, а частина виплачується Бобу.

Припустимо, Аліса відкриває канал з Бобом місткістю 100К сатоші.
Спочатку Аліса володіє 100К сатоші, тобто всіма коштами в каналі. Ось як би працював протокол платіжного каналу:

. Аліса створює нову пару ключів (приватний/публічний) і повідомляє Бобу, що бажає відкрити канал шляхом відправлення йому повідомлення `open_channel` через протокол Lightning Network.
. Боб погоджується прийняти канал від Аліси, створює нову пару ключів (приватний/публічний) і надсилає свій публічний ключ Алісі у повідомленні `accept_channel`.
. Далі Аліса створює транзакцію фінансування зі свого гаманця, якою надсилає 100К сатоші на адресу мультисиг-скрипта +2 <PubKey Alice> <PubKey Bob> 2 CHECKMULTISIG+.
. Аліса ще не публікує в мережу цю транзакцію фінансування, проте надсилає Бобу id транзакції у повідомленні `funding_created`.
. І Аліса, і Боб створюють свої версії першої транзакції зобов'язання. Ця транзакція має витратити вихід транзакції фінансування та відправити усі біткоїни назад на адресу Аліси.
. Алісі та Бобу не потрібно обмінюватися цими транзакціями зобов'язання, оскільки кожен з них може побудувати її самостійно. Їм потрібно лише обмінятися підписами.
. Аліса надає Бобу підпис під транзакцією зобов'язання у повідомленні `funding_created`.
. Боб надає Алісі підпис під транзакцією зобов'язання у повідомленні `funding_signed`.
. Тепер, коли сторони обмінялися підписами, Аліса публікує транзакцію фінансування в мережу Біткоїн.

Слідуючи цього протоколу, Аліса не втрачає права власності на свої 100К сатоші, навіть незважаючи на те, що кошти надсилаються на 2-із-2 мультисиг адресу, від якої лише один ключ знаходиться під контролем Аліси.
Якщо Боб перестане відповідати Алісі, вона зможе опублікувати транзакцію зобов'язання і повернути свої кошти.
Єдиними її витратами будуть комісії за on-chain транзакції.
Поки вона дотримується протоколу, комісії - це її єдиний ризик при відкритті каналу.

Після цього початкового обміну транзакції зобов'язання створюються кожного разу при зміні балансу каналу. Іншими словами, кожного разу, коли між Алісою та Бобом проходить платіж, створюються нові транзакції зобов’язання та відбувається обмін підписами. Кожна нова транзакція зобов’язання кодує останній баланс між Алісою та Бобом.

Якщо Аліса хоче надіслати Бобу 30К сатоші, вони обидва створять нову версію своїх транзакцій зобов'язання, в якій тепер Алісі належить 70К сатоші, а Бобу - 30К сатоші. Кодування нового балансу Аліси та Боба у вигляді нової транзакції зобов'язання є тим засобом, за допомогою якого платіж "відправляється" по каналу.

Тепер, коли ми розуміємо транзакції зобов’язання, розглянемо деякі більш тонкі деталі. Ви могли помітити, що вищенаведений протокол залишає спосіб Алісі або Бобу обдурити свого партнера по каналу.

==== Шахрайство з попереднім станом

Скільки транзакцій зобов’язання є у Аліси після того, як вона заплатить Бобу 30К сатоші? У неї їх дві: в першій транзакції баланс Аліси складає 100К сатоші, в другій - 70К сатоші у Аліси, 30К сатоші у Боба.

У вищенаведеному протоколі каналу ніщо не заважає Алісі опублікувати попередню транзакцію зобов’язань. Аліса-шахрайка може опублікувати транзакцію зобов'язання, яка виплатить їй 100К сатоші.
Оскільки ця транзакція зобов'язання підписана Бобом, то він ніяк не зможе перешкодити Алісі її опублікувати.

Потрібен якийсь механізм, щоб завадити Алісі публікувати стару транзакцію зобов'язання. Спробуємо з’ясувати, як цього досягти і як це дає можливість Lightning Network працювати без необхідності довіри між Алісою та Бобом.

Оскільки Біткоїн стійкий до цензури, ніхто не може перешкодити комусь опублікувати стару транзакцію зобов’язання. Щоб запобігти цьому способу шахрайства, ми маємо будувати такі транзакції зобов’язання, щоб у випадку, коли публікується застаріла транзакція, шахрай міг бути покараний. Роблячи покарання досить великим, ми створюємо сильний стимул проти шахрайства, і це робить систему безпечною.

Покарання працює так, що обманута сторона отримує можливість забрати весь баланс шахрая. Отже, якщо хтось публікує стару транзакцію зобов’язання, в якій йому виплачується більший баланс, інша сторона може покарати шахрая, забравши *обвида* баланси - і свій і шахрая. Шахрай втрачає все.

Знову розглянемо сценарій побудови каналу, додавши механізм покарання за шахрайство:

* Аліса створює канал з Бобом на 100К сатоші.
* Аліса надсилає Бобу 30К сатоші.
* Аліса намагається кинути Боба на 30К сатоші, публікуючи стару транзакцію зобов’язання, забираючи 100К сатоші собі.
* Боб виявляє шахрайство і карає Алісу, забираючи всі 100К сатоші собі.
* В результаті Боб отримує всі 100К сатоші, із яких 70К сатоші він отримує за те, що ловить Алісу на шахрайстві.
* А у Аліси в результаті 0 сатоші.
* Намагаючись обдурити Боба на 30К сатоші, Аліса втратила 70К сатоші, які їй належали.

З таким потужним штрафним механізмом, Аліса не спокушається займатись шахрайством з публікацією старих транзакцій зобов'язання, оскільки так вона ризикує втратити весь свій баланс.

[NOTE]
====
У книзі "Освоєння Bitcoin" Андреас елегантно відмічає:
"Ключовою характеристикою Біткоїна є те, що якщо транзакція є валідною, вона залишається такою і не має обмеженого терміна дії. Єдиний спосіб скасувати транзакцію - це зробити подвійну витрату її входів іншою транзакцією перед тим, як вона буде змайнена".
====

Тепер коли ми зрозуміли, _чому_ потрібен штрафний механізм, і як він запобігає шахрайству, давайте детально розберемось, _як_ він працює.

Зазвичай транзакція зобов’язання має два виходи, які платять кожному із партнерів по каналу. Додамо _блокування за часом (timelock delay)_ та _секрет відкликання (revocation secret)_ до одного із виходів. Блокування за часом не дає власнику виходу витратити його відразу, як тільки транзакція зобов'язання буде включена в блок. Секрет відкликання дозволяє кожному партнеру негайно витратити вихід, оминаючи блокування за часом.

Отже, у нашому прикладі Боб володіє транзакцією зобов’язання, яка негайно платить Алісі, але його власний платіж відкладений в часі та може бути відкликаний. Аліса також має транзакцію зобов'язання, але у неї все навпаки: вона платить Бобу негайно, але її власний платіж відкладений в часі та може бути відкликаний.

Два партнери по каналу зберігають половину секрету відкликання, так що жоден з них не володіє повним секретом. Коли вони діляться своєю половиною секрету з партнером, тоді інший партнер по каналу отримує повний секрет і може використовувати його для виконання умови відкликання. Підписуючи нову транзакцію зобов’язання, вони відкликають попереднє зобов’язання, обмінюючи підпис на секрет відкликання.

Простіше кажучи, Аліса підписує нову транзакцію зобов’язання Боба лише в тому випадку, якщо Боб пропонує свою половину секрету відкликання попереднього зобов’язання. Боб підписує нову угоду про зобов'язання Аліси, лише якщо вона передає йому свою половину секрету відкликання попереднього зобов'язання.

З кожним новим зобов'язанням партнери обмінюються секретом, необхідним для "покарання". Цей секрет дозволяє їм ефективно _відкликати_ попередню транзакцію зобов'язання, роблячи її невигідною її публікацію. По суті, вони руйнують можливість використовувати старі зобов’язання після підписання нових. footnote:[Технічно все ще можливо публікувати старі зобов’язання, але механізм штрафних санкцій робить це економічно невигідним.]

Блокування за часом встановлюється на період до 2016 блоків (приблизно два тижні). Якщо хтось із партнерів по каналу опублікує транзакцію зобов’язаня без співпраці з іншим партнером, то для отримання коштів йому доведеться зачекати, поки буде змайнена задана кількість блоків (наприклад, 2 тижні). Інший партнер по каналу може затребувати власний баланс у будь-який час. Крім того, якщо опубліковане зобов'язання було попередньо відкликане, то партнер по каналу може *також* негайно покарати шахрая і забрати залишок шахрая, минаючи блокування за часом.

Тривалість блокування за часом узгоджується між партнерами по каналу. Зазвичай для каналів з більшою місткістю - воно триває довше, а для менших - коротше.

При кожному оновленні балансу в каналі, необхідно створювати і зберігати нові транзакції зобов’язання та нові секрети відкликання. Допоки канал залишається відкритим, всі _коли-небудь створені_ секрети відкликання, повинні зберігатися, оскільки вони можуть знадобитися в майбутньому. На щастя, секрети досить маленькі, і зберігати їх мають лише 2 партнери по каналу, а не вся мережа. Крім того, завдяки розумному механізму утворення секретів відкликання, ми маємо зберігати лише найсвіжіший секрет, оскільки з нього можна отримати всі попередні секрети (Див. <<revocation_secret_derivation>>.)

Тим не менш, управління та зберігання секретів відкликання є однією з найбільш складних частин Lightning-ноди, що вимагає від операторів нод утримувати резервні копії.

[NOTE]
====
Такі технології, як Сторожові Башти (Watchtowers) і заміна конструкції каналу на протокол "eltoo", можуть в майбутньому згладити ці проблеми та зменшити потребу в секретах відкликання, штрафних операціях та резервних копіях каналів.
====

Якщо Боб перестав відповідати, Аліса може закрити канал в будь-який момент, отримуючи свій належний баланс.
Після публікації на блокчейні *останньої* транзакції зобов’язання Аліса має зачекати, поки пройде певний часовий інтервал, перш ніж вона зможе витратити свої кошти з транзакції зобов’язання. Як ми побачимо далі, існує простіший спосіб закриття каналу без очікування, допоки Аліса та Боб перебувають онлайн та співпрацюють над закриттям каналу з корректним розподілом балансів. Але транзакції зобов’язання, які зберігаються кожним партнером по каналу, діють як гарантія того, що кошти не будуть втрачені при виникненні проблем з їх партнером по каналу.

==== Анонсування каналу

Партнери по каналу можуть домовитись про анонсування свого каналу по всій мережі Lightning, роблячи його _публічним каналом_. Для цього вони використовують протокол пліток Lightning Network, щоб повідомити іншим вузлам про існування, місткість та комісію свого каналу.

Публічне анонсування каналів дозволяє іншим нодам використовувати їх для маршрутизації своїх платежів, що в свою чергу дає можливість партнерам по каналу отримувати комісії за маршрутизацію чужих платежів через свій канал.

Партнери по каналу можуть вирішити не анонсувати свій канал, залишивши його _неанонсованим_.


[NOTE]
====
Ви можете зустріти термін "приватний канал" для неанонсованого каналу. Ми уникаємо використання цього терміна, оскільки він вводить в оману та створює хибне відчуття конфіденційності. Незважаючи на те, що анонсований канал не буде відомим іншим, поки він є відкритим, проте факт його існування та місткість будуть обов'язково виявлені в момент закриття каналу, оскільки ці деталі будуть опубліковані на блокчейні в остаточній розрахунковій транзакції. Інформація про існування неанонсованих каналів також може просочуватися різними іншими способами, тому ми уникаємо назви "приватний канал".
====

Неанонсовані канали використовуються для маршрутизації платежів, але лише тими нодами, які в курсі про їх існування або отримують "маршрутизаційні підказки" про шлях, який проходить через неанонсований канал.

Коли канал та його місткість публічно анонсуються за допомогою протоколу пліток, анонс також може містити таку інформацію про канал (метадані), як комісія за маршрутизацію та тривалість блокування за часом.

Коли нові ноди приєднуються до Lightning Network, вони збирають анонси каналів, які отримують по протоколу пліток від своїх пірів, і будують внутрішню "мапу" Lightning Network. Потім цю мапу можна використовувати для пошуку платіжних шляхів, які з’єднують канали один з одним.

==== Закриття каналу

Найкращий спосіб закрити канал - це... не закривати його! Для відкриття та закриття каналів потрібні on-chain транзакції, за які стягуються комісії. Тому найкраще за все тримати канали відкритими якомога довше. Ви можете продовжувати використовувати свій канал для того, щоб робити свої власні платежі та маршрутизувати чужі платежі, якщо у вас є достатня місткість на кінці каналу. Навіть якщо ви надішлете весь баланс на інший кінець каналу, то ви зможете використовувати канал для отримання платежів від партнера каналу. Ця концепція використання каналу спочатку в одному напрямку, а потім в протилежному називається "ребалансування", і ми більш детально розглянемо її в іншому розділі. Ребалансування каналу може лишати його відкритим майже необмежений час і дозволяє використовувати канал для тисяч платежів.

Однак іноді закриття каналу є бажаним або необхідним. Наприклад:

* Ви хочете зменшити залишок коштів, що зберігається у ваших Lightning-каналах з міркувань безпеки, і хочете передати кошти в "холодне сховище".
* Партнер вашого каналу довго не відповідає, і ви більше не можете користуватися цим каналом.
* Канал використовується не часто, оскільки ваш партнер по каналу не є добре з'єднанною нодою, тому ви хочете використати ці кошти для відкриття іншого каналу з краще з'єднанною нодою.
* Ваш партнер по каналу порушив протокол навмисно або сталася помилка програмного забезпечення, і це змушує вас закрити канал, щоб захистити свої кошти.

Існує 3 способи закриття платіжного каналу:

* Хороший спосіб - Взаємне закриття
* Поганий спосіб - Вимушене закриття
* Жахливий спосіб - Порушення протоколу


Яким чином ви закриєте канал, залежить від обставин. Наприклад, якщо ваш партнер по каналу знаходиться оффлайн, ви не зможете йти "хорошим шляхом", оскільки взаємне закриття неможливе без співпраці з партнером.
Зазвичай, ваше програмне забезпечення Lightning Network автоматично обере найкращий механізм закриття залежно від певних обставин.

Незалежно від того, ви (користувач) даєте команду на закриття каналу, або програмне забезпечення Lightning Network автоматично закриває канал через виявлену аномалію (наприклад, через спробу шахрайства з боку партнера по каналу), як правило, саме програмне забезпечення Lightning Network обирає підходящий спосіб закриття каналу.


===== Хороший спосіб - Взаємне закриття

Хорошим способом закрити канал є взаємне закриття, і цей спосіб завжди є найлішпим, якщо він є можливим. Коли ви вирішите закрити канал, ваша нода Lightning Network повідомить партнера про ваш намір. Тепер і ваша нода, і нода партнера по каналу працюють разом над його закриттям. Жодні нові спроби маршрутизації не будуть прийняті жодним із партнерів по каналу, а всі поточні спроби маршрутизації будуть завершені або видалені після таймауту. Фіналізування спроб маршрутизації вимагає часу, тому взаємне закриття також може зайняти деякий час.

Як тільки не лишається очікуючих розгляду спроб маршрутизації, ноди співпрацюють над підготовкою _закриваючої транзакції (closing transaction)_. Ця транзакція подібна до транзакції зобов'язання, так як розподіляє баланс каналу кожному із партнерів відповідно до останнього зобов'язання. На відміну від останньої транзакції зобов'язання, виходи закриваючої транзакції не блокуються за часом.

Комісія за закриваючу транзакцію сплачується тим, хто відкривав канал,  а не тим, хто ініціював процедуру закриття. Погодившись щодо суми комісії на основі актуальної оцінки on-chain комісій, партнери по каналу підписують закриваючу транзакцію.

Після публікації закриваючої транзакції та підтвердження її мережею Біткоїн, канал закривається, і кожен партнер по каналу отримує свою частку балансу каналу. Взаємне закриття, як правило, це найшвидший спосіб закрити канал.

===== Поганий спосіб - Вимушене закриття

Взаємне закриття не завжди є можливим. Іноді, наприклад, не вдається встановити зв'язок з вашим партнером по каналу, в такому випадку вам доведеться закрити канал в односторонньому порядку, щоб «звільнити» кошти. Закриття каналу в односторонньому порядку називається _вимушеним закриттям (force close)_. Щоб здійснити вимушене закриття, Аліса може просто опублікувати останню транзакцію зобов’язання. Зрештою, для цього і потрібні транзакції зобов’язання - вони дають гарантію того, що Алісі не потрібно довіряти Бобу, щоб отримати баланс каналу, який їй належить.

Як тільки Аліса опублікує свою останню транзакцію зобов’язання в Біткоїн-мережу, і ця транзакція отримає підтвердження, вона створить два виходи - один для Аліси та один для Боба. Як ми вже обговорювали раніше, оскільки ця транзакція зобов'язання проводиться Алісою, це дає невелику "перевагу" Бобу. Вихід Аліси матиме блокування за часом, а вихід Боба може бути витрачений негайно. Це потрібно для захисту Боба, щоб Аліса не могла опублікувати стару транзакцію зобов’язання і вкрасти частину балансу Боба. Блокування за часом дає Бобу змогу "оспорити" таку транзакцію, використовуючи секрет відкликання, і покарати Алісу за шахрайство.

При публікації транзакції зобов'язання під час вимушеного закриття комісія буде дещо більшою, ніж взаємне закриття з кількох причин:

. Коли узгоджується транзакція зобов’язання, партнери по каналу не знають, якими будуть комісії в мережі на той час, коли транзакція буде опублікована. Оскільки комісію неможливо змінити без зміни виходів транзакції зобов'язання (потрібні обидва підписи) і оскільки вимушене закриття відбувається, коли партнер по каналу недоступний для підписання, розробники протоколу вирішили бути дуже щедрими при включенні комісії до транзакції зобов'язання. Вона може бути в 5 разів перевищувати оцінку on-chain комісій на момент узгодження транзакції зобов'язання.
. Транзакція зобов’язання включає додаткові виходи для будь-яких очікуючих спроб маршрутизації (HTLC), що робить транзакцію зобов’язання більшою, ніж транзакція взаємного закриття. Більші транзакції вимагають більших комісій.
. Будь-які очікуючі спроби маршрутизації повинні бути вирішені on-chain, що спричинює додаткові on-chain транзакції.

[NOTE]
====
Блокуючі за хешем і часом транзакції (Hash Time-Locked Contracts, HTLC), будуть детально розглянуті в <<htlcs>>. Поки що вдаватимемо, що це платежі, які маршрутизуються через Ligntning Network, на відміну від платежів, що здійснюються безпосередньо між двома партнерами по каналу. Ці HTLC виглядають як додаткові виходи в транзакціях зобов’язання, чим збільшують розмір транзакції та on-chain комісію.
====

Загалом, ви не повинні проводити "вимушене закриття", звісно якщо це не є необхідним. Ваші кошти будуть заблоковані на довший час, і той хто відкрив канал, повинен буде сплатити вищу комісію. Крім того, можливо, вам доведеться заплатити комісію за те, щоб скасувати або владнати спроби маршрутизації, навіть якщо ви не відкривали канал.

Якщо вам відомий партнер по каналу, ви можете спробувати зв’язатись з цією особою чи компанією та дізнатись, чому їхня Lightning-нода не працює, і попросити перезапустити її, щоб ви змогли виконати взаємне закриття каналу.

Вам варто розглядати вимушене закриття лише як крайній засіб.

===== Жахливий спосіб - Порушення протоколу

Якщо ваш партнер по каналу публікує стару (відкликану) транзакцію зобов’язання - навмисно чи ні - ваша нода повинна мати можливість виявити це порушення протоколу. Для цього ваша нода має бути онлайн та спостерігати за новими блоками та транзакціями на блокчейні Біткоїна. Оскільки вихід вашого партнера по каналу матиме блокування за часом, ваша нода матиме деякий час, щоб діяти, перш ніж ваш партнер по каналу зможе витратити вихід і отримати прибуток від порушення протоколу.

Протягом періоду блокування за часом ваша нода має опублікувати _караючу транзакцію (punishment transaction)_, яка забере ваш власний баланс і використає секрет відкликання, щоб також забрати баланс вашого нечесного партнера по каналу.

В такому випадку закриття каналу буде досить швидким. Щоб опублікувати караючу транзакцію, вам доведеться заплатити комісію, але ваша нода зможе встановити цю комісію відповідно до актуальної оцінки та не переплачувати. Крім того, ви також заберете кошти з балансу свого партнера по каналу, тому комісія навряд чи буде важливим фактором.

Якщо ваша нода не в онлайні, і час дії блокування закінчується, то ваш партнер по каналу зможе забрати баланс із будь-якого старого зобов’язання, можливо навіть весь баланс каналу. Якщо якийсь баланс належить вам, то вам доведеться заплатити on-chain комісію, щоб забрати цей залишок.

Також всі очікуючі спроби маршрутизації повинні бути вирішені так само, як ми бачили у сценарії вимушеного закриття.

"Жахливий спосіб" закриття каналу може бути виконаний швидше, ніж "хороший" і "поганий" способи, оскільки ви можете негайно опублікувати караючу транзакцію і зібрати всі кошти.

Теорія ігор передбачає, що шахрайство не є успішною стратегією, оскільки його легко виявити, і шахрай втратить всі кошти, вкладені в канал.

Отже, ми не рекомендуємо вдаватись до шахрайства. Однак ми рекомендуємо будь-кому, хто зловив шахрая, покарати його, забравши всі його кошти.

Отже, як ви вловлюєте шахрайство або порушення протоколу у своїй повсякденній діяльності?

Для цього ви маєте запустити програмне забезпечення, яке відстежує загальнодоступний Біткоїн-блокчейн щодо он-лайн транзакцій, які стосуються будь-яких транзакцій зобов’язання для кожного з ваших каналів. Це програмне забезпечення:

* Правильно підтримувана Lightning-нода, що працює 24/7 цілодобово та без вихідних.
* _Сторожова Вежа (watchtower)_, що спостерігає за вашими каналами.
* Стороння нода Сторожової Вежі, які ви платите за спостереження своїх каналів.

Ми детальніше розглянемо сторожові вежі в <<watchtowers>>.

Пам’ятайте, що транзакція зобов’язання має період блокування за часом, який вказується у вигляді певної кількості блоків, максимум до 2016.
Якщо ви запустите свою Lightning-ноду один раз до закінчення періоду блокування, вона буде ловити всі спроби шахрайства. Але не бажано вдаватися до такого ризику; простіше тримати ноду в безперервній роботі.

=== Інвойси

Більшість платежів у Lightning Network починаються з інвойса (рахунку-фактури), який генерує отримувач платежу. У нашому попередньому прикладі Боб створює інвойс у відповідь на "запит" платежу від Аліси.

[NOTE]
====
Існує спосіб надіслати "небажаний" платіж без інвойсу в обхід протоколу методом _keysend_. Ми розглянемо це пізніше в <<keysend>>.
====

Інвойс - це проста платіжна інструкція, що містить таку інформацію, як унікальний ідентифікатор платежу, який називається хеш платежу, одержувач, сума та необов’язковий текстовий опис.

Найважливіша частиною інвойсу є хеш платежу, він дозволяє платежу рухатися по кількох каналах в _атомарний_ спосіб. Атомарність означає, що певна дія може бути або повністю успішно виконана, або не виконана взагалі - не буває частково виконаної атомарної дії. У Lightning Network це означає, що платіж або проходить повністю весь шлях, або повністю провалюється. Платіж неможливо виконати частково, щоб якийсь проміжний вузол на шляху міг отримати платіж і залишити його собі.
Не існує такого поняття, як "частковий платіж" або "частково успішний платіж".

Інвойси не передаються через Lightning Network. Натомість вони передаються через будь-який інший механізм зв'язку. Це схоже на те, як Біткоїн-адреси передаються відправникам поза мережею Біткоїн через електронну пошту, у вигляді QR-коду або у текстовому повідомленні. Наприклад, Боб може подати Алісі Lightning-інвойс у вигляді QR-коду або надіслати його електронною поштою або будь-яким іншим способом.

Рахунки, як правило, кодуються у вигляді довгого рядку в кодировці bech32 або у вигляді QR-коду для сканування мобільним Lightning-гаманцем. Інвойс містить запитувану суму біткоїнів та підпис одержувача. Відправник дістає із підпису публічний ключ одержувача (id ноди), щоб відправник знав, куди направити платіж.

Ви помітили, як це контрастує з Біткоїном і які різні терміни використовуються? В Біткоїні одержувач передає відправнику адресу. У Lightning одержувач створює інвойс і відправляє його відправнику. В Біткоїні відправник надсилає кошти на адресу. У Lightning відправник сплачує інвойс, і платіж надходить до одержувача. Біткоїн базується на концепції "адреси", а Lightning - це платіжна мережа і базується на концепції "інвойсу". В Біткоїні ми створюємо "транзакцію", тоді як у Lightning ми надсилаємо "платіж".

==== Хеш та Прообраз Платежу

Найважливішою частиною рахунку-фактури є _хеш платежу_. Конструюючи інвойс, Боб отримує хеш платежу наступним чином:

1. Боб обирає випадкове число +r+. Це випадкове число називається _прообраз_ або _секрет платежу_.
2. Боб обраховує хеш платежу +H+ від +r+, використовуючи хеш-функцію  +SHA256+

latexmath:[H = SHA256(r)].

[NOTE]
====
Термін _preimage_ має математичне походження. Для будь-якої функції _y = f(x)_ всі вхідні значення, при яких функція приймає значення _y_, називаються прообразами _y_. В нашому випадку функцією є алгоритм хешування SHA256, а будь-яке значення _r_, яке має хеш _H_, називається прообразом.
====

Не існує способу знайти обернене значення SHA256 (тобто, вирахувати прообраз за його хешем). Тільки Боб знає значення +r+, тому +r+ - це секрет Боба. Але як тільки Боб оприлюднює +r+, кожен, у кого є хеш +H+, може перевірити, чи є +r+ правильним секретом, обчисливши +SHA256(r)+ і переконавшись, що він дорівнює +H+.

Платіж в Lightning Network є безпечним лише в тому випадку, якщо +r+ вибрано абсолютно випадково. Безпечність платежів покладається на односторонність хеш-функції та неефективність її повного перебору, а отже на те, що ніхто не може знайти +r+, знаючи +H+.

==== Додаткові Метадані

Інвойси можуть включати додаткові корисні метадані, наприклад короткий текстовий опис. Якщо користувач має сплатити кілька інвойсів, він зможе прочитати опис і згадати, про що цей чи інший інвойс.

Інвойс також може містити деякі _поради щодо маршрутизації_ - це інформація про неанонсовані канали, які можуть бути використані відправником для побудови маршруту до одержувача. В порадах про маршрутизацію також можуть бути перелічені публічні канали, наприклад, такі канали, про які одержувач знає, що вони мають достатню вхідну місткість для маршрутизації платежу.

На той випадок, якщо Lightning-нода відправника не може надіслати платіж через Lightning Network, інвойси можуть додатково містити on-chain Біткоїн-адресу, як альтернативу.

[NOTE]
====
Незважаючи на те, що завжди можна "повернутися" до on-chain Біткоїн-транзакцій, натомість краще відкрити новий канал до одержувача. 
Якщо вам в будь-якому випадку доводиться сплачувати on-chain комісію,  то ви можете сплатити її, щоб відкрити канал і зробити платіж через Lightning. Після здійснення платежу у вас залишиться відкритий канал з ліквідністю на стороні одержувача, і він може бути використаний для прийому платежів вашої Lightning-нодою в майбутньому. Така on-chain транзакція дає вам можливість здійснити платіж і мати канал для подальшого використання.
====


Інвойси містять термін придатності. Оскільки одержувач повинен зберігати прообраз +r+ для кожного виставленого інвойса, корисно мати термін дії інвойсів, щоб не зберігати прообрази вічно. Як тільки сплачується інвойс або закінчується термін його дії, одержувач може видалити прообраз.

=== Доставка платежу

Ми бачили вище, як одержувач створює інвойс, що містить хеш платежу. Цей хеш платежу використовується для переміщення платежу через низку платіжних каналів від відправника до одержувача, навіть якщо між ними немає прямого платіжного каналу.

Далі ми заглибимося в ідеї та методи, які використовуються для здійснення платежу через Lightning Network, і використаємо концепції, з якими ми вже познайомились.


Спочатку давайте розглянемо комунікаційний протокол мережі Lightning.

==== Peer-to-peer протокол пліток

Як ми вже згадували раніше, коли платіжний канал створено, партнери по каналу мають можливість зробити його публічним, повідомивши про його існування та його детальну інформацію всій мережі Lightning.

Анонси каналів передаються за допомогою peer-to-peer _протоколу пліток_. Peer-to-peer (або одноранговий) протокол - це комунікаційний протокол, в якому кожна нода підключається до випадкового набору інших нод, як правило, через TCP/IP. Кожна з нод, безпосередньо підключених (через TCP/IP) до вашої ноди, називається _піром (peer)_. Ваша нода, у свою чергу, є одним із їхніх пірів. Майте на увазі, коли ми говоримо, що ваша нода підключена до інших пірів, ми не маємо на увазі, що у вас із ними є платіжні канали, але лише те, що ваша нода спілкується зі своїми пірами за протоколом пліток.

Після відкриття каналу нода може анонсувати його своїм пірам через повідомлення `channel_announcement`.
Кожен пір перевіряє інформацію з повідомлення `channel_announcement` та верифікує відповідну транзакції фінансування на блокчейні Біткоїн.
Після перевірки нода поширює повідомлення серед своїх власних пірів, а ті - серед своїх пірів, і так далі, розповсюджуючи анонс по всій мережі.
Щоб запобігти надмірній комунікації, анонс каналу розповсюджується кожною нодою лише в тому випадку, якщо вона раніше його не розповсюджувала.

Протокол пліток також використовується для анонсування інформації про відомі ноди за допомогою повідомлення `node_announcement`.
Щоб це повідомлення було розповсюджене, нода повинна мати принаймні один публічний канал, анонсований через протокол пліток, знову ж таки з метою уникнення надмірного трафіку.

Платіжні канали мають різні метадані, корисні для інших учасників мережі.
Ці метадані в основному використовуються для прийняття рішень про маршрутизацію.
Оскільки ноди іноді можуть змінювати метадані своїх каналів, ця інформація передається у повідомленні `channel_update`.
Ці повідомлення будуть розповсюджуватися приблизно чотири рази на день (на кожний канал), щоб запобігти надмірній комунікації.
Протокол пліток також має безліч запитів та повідомлень для початкової синхронізації ноди та для оновлення стану ноди після перебування оффлайн.

Основним викликом для учасників Lightning Network є те, що інформація про топологію, що передається через протокол пліток, є лише частковою.
Наприклад, місткість платіжних каналів розповсюджується за протоколом пліток через повідомлення `channel_announcement`.
Однак ця інформація не настільки корисна, скільки інформація про фактичний розподіл місткості на балансах двох партнерів по каналу.
Нода може повідомити тільки загальну кількість біткоїнів в каналі.

Хоча Lightning Network могла би бути спроектований так, що обмінюватись інформацією про баланси партнерів по каналам та про точну топологію мережі, але це не було зроблено з кількох причин:

. Для захисту конфіденційності користувачів, щоб не кричати на всю мережу про кожний платіж. Оновлення інформації про баланс свідчить про те, що по каналу пройшов платіж. Ця інформація може бути співставлена, щоб виявити всі джерела і напрямки платежів.

. Для масштабування кількості платежів, які проводяться через Lightning Network. Не забувайте, що Lightning Network була створена в першу чергу через те, що інформування кожного учасника про кожен платіж в мережі погано масштабується. Тому Lightning Network не може бути спроектована таким чином, щоб оновлення балансу каналів ширилося між учасниками.

. Lightning Network - це динамічна система. Вона змінюється постійно і часто. Додаються нові ноди, інші ноди вимикаються, баланси змінюються і т.д. Навіть якщо розповсюджувати повну інформацію, вона буде актуальною лише короткий проміжок часу. Власне кажучи, інформація часто є застарілою на момент її одержання.

Ми розглянемо протокол пліток в подробицях пізніше.

Наразі важливо лише знати, що існує протокол пліток і що він використовується для обміну інформацією про топологію Lightning Network.
Інформація про топологію має вирішальне значення для доставки платежів через мережу платіжних каналів.


==== Пошук шляху та маршрутизація

Платежі в Lightning Network пересилаються по _шляху (path)_ із каналів, що зв'язують одного учасника з іншим, від джерела платежу до місця призначення платежу. Процес пошуку шляху від джерела до пункту призначення називається _пошуком шляху (path finding)_. Процес використання цього шляху для здійснення платежу називається _машрутизація (routing)_.

[NOTE]
====
Часта критика Lightning Network полягає в тому, що "маршрутизація" - це не вирішена задача або навіть є "невирішуваною" задачею. Насправді маршрутизація є тривіальною. З іншого боку, пошук шляху є складною задачею. Ці два терміни часто плутають, і їх потрібно чітко визначити, щоб визначити, яку саме задачу ми намагаємось вирішити.
====

Як ми побачимо далі, Lightning Network наразі використовує протокол _на основі джерела (source-based)_ для пошуку шляхів та протокол _цибулевої маршрутизації (onion routed)_ для маршрутизації платежів. На основі джерела означає, що відправник платежу повинен знайти шлях через мережу до визначеного пункту призначення. Цибулева (onion) маршрутизація означає, що елементи шляху складаються з шарів (як цибуля), причому кожен шар шифрується так, що його може бачити у розшифрованому вигляді одночасно лише одна нода. Ми обговоримо onion-маршрутизацію в наступній частині розділу.

=== Пошук Шляху На Основі Джерела

Якби ми знали точні баланси кожного каналу, ми могли б легко обчислити шлях платежу, використовуючи будь-який із стандартних алгоритмів пошуку шляхів з курсу інформатики. Це можна навіть вирішити таким чином, щоб оптимізувати комісію, яку беруть ноди за проходження платежу.

Однак інформація про баланси всіх каналів не є і не може бути відома всім учасникам мережі. Нам потрібні більш інноваційні стратегії пошуку шляхів.

Пошук шляхів на основі часткової інформації про топологію мережі є справжнім викликом, і досі проводяться активні дослідження цієї частини Lightning Network. Той факт, що проблема пошуку шляхів не "повністю вирішена" в Lightning Network, є основним пунктом критики цієї технології.

[NOTE]
====
Одним із поширених дорікань щодо пошуку шляхів у Lightning Network є те, що ця задача є нерозв'язною, оскільки вона еквівалентна NP-повній _Задачі Комівояжера_, фундаментальній проблемі в теорії обчислювальної складності. Насправді пошук шляху в Lightning не є еквівалентом Задачі Комівояжера і потрапляє в інший клас проблем. Ми успішно вирішуємо ці типи проблем (пошук шляху на графах з неповною інформацією) кожного разу, коли просимо Google дати нам вказівки щодо руху автомобілем, уникаючи заторів. Ми також успішно вирішуємо цю проблему кожного разу, коли маршрутизуємо платіж по мережі Lightning.
====

Пошук шляхів і маршрутизація можуть бути реалізовані різними способами, і в мережі Lightning можуть існувати безліч алгоритмів пошуку та маршрутизації, як і багато алгоритмів маршрутизації в Інтернеті. Маршрутизація на основі джерела є одним із багатьох можливих рішень і є достатньо успішною в сучасних масштабах мережі Lightning.

Стратегія пошуку шляхів, реалізована на даний момент нодами Lightning, полягає у "випробовуванні" шляхів, поки не буде знайдено такий, що матиме достатню ліквідність для проведення платежу. Це ітераційний процес спроб і помилок триває, доки не буде досягнутий успіх або шлях не буде знайдений. В даний час алгоритм не обов'язково знаходить шлях з найнижчими комісіями. Хоча ця спрощена стратегія не є оптимальною і, безумовно, може бути вдосконаленою, але навіть вона працює досить добре.

"Випробовування" шляху виконується Lightning-нодою або гаманцем, користувач не бачить його безпосередньо.
Користувач може зрозуміти, що триває випробовування, лише якщо платіж не завершується миттєво.

[NOTE]
====
В Інтернеті для доставки IP-пакетів від відправника до місця призначення  ми використовуємо алгоритм пересилання IP-пакетів. Хоча ці протоколи мають гарну властивість, що дозволяє Інтернет-хостам спільно знаходити шлях для потоку інформації через Інтернет, ми не можемо використати і адаптувати цей протокол для пересилання платежів по мережі Lightning. На відміну від Інтернету, Lightning-платежі повинні бути _атомарними_, а баланси каналу повинні залишатися _конфіденційними_. Крім того, місткість каналу в Lightning часто змінюється, на відміну від Інтернету, де пропускна здатність є відносно сталою. Ці нюанси потребують нових стратегій.
====

Звісно, пошук шляху є тривіальним, якщо ми хочемо заплатити своєму прямому партнеру по каналу, і на нашій стороні каналу вистачає балансу для цього. У всіх інших випадках наша нода використовує інформацію з протоколу пліток для пошуку шляху. Сюди входять відомі на той момент публічні платіжні канали, відомі ноди, відома топологія (як саме поєднуються відомі ноди), відомі місткості каналів та відомі комісії, встановлені власниками нод.

==== Цибулева (onion) маршрутизація

Lightning Network використовує _протокол цибулевої маршрутизації (onion routing protocol)_, подібний до протоколу знаменитої мережі TOR (The Onion Router).
Протокол onion-маршрутизації, що використовується в Lightning, називається _SPHINX mixformat_ і буде детально пояснений далі.

[NOTE]
====
Onion-маршрутизація Lightning SPHINX mixformat аналогічна маршрутизації мережі TOR лише за концепцією, але як протокол, так і його реалізація повністю відрізняються від тих, що використовуються в мережі TOR.
====

Платіжний пакет, що використовується для маршрутизації, називається "цибулею" (onion). footnote:[Термін "цибуля" відпочатку використовувався в проекті TOR. Більше того, мережу Tor також називають Onion network, і проект використовує цибулю як свій логотип. Доменне ім’я верхнього рівня, що використовується службами TOR в Інтернеті, - ".onion".]

Давайте скористаємося цибулевою аналогією, щоб виконати маршрутизований платіж. На своєму шляху від відправника платежу (платника) до місця призначення (одержувача платежу) цибуля передається від ноди до ноди протягом шляху. Відправник конструює всю цибулю, починаючи із середини назовні. Спочатку відправник створює інформацію про платіж для (кінцевого) одержувача платежу та загортає його у шар шифрування, яке може розшифрувати лише одержувач платежу. Далі відправник обгортає цей шар інструкціями для ноди, яка розташовується на шляху _безпосередньо перед кінцевим одержувачем_ і загортає у шар шифрування, яке може розшифрувати лише ця нода.

Шари конструюються із інструкцій, доки весь шлях не буде закодований у шари. Потім відправник передає повну цибулю першій ноді на шляху, яка може прочитати лише зовнішній шар. Кожна нода знімає шар шифрування і знаходить всередині інструкції, що розкривають інформацію про наступну ноду на шляху, та передає цибулю далі. Оскільки кожна нода здатна зняти лише свій шар шифрування, вона не може прочитати решту цибулі. Все, що вона знає, - це звідки прийшла цибуля і куди вона рухається далі, без жодних вказівок на те, хто є початковим відправником або кінцевим одержувачем.

Так триває до того часу, поки цибуля не досягне місця призначення платежу (тобто, ноди одержувача). Нода одержувача відкриває цибулю і виявляє, що наступні шари для дешифрування відсутні, і може прочитати всередні інформацію про платіж.

[NOTE]
====
На відміну від справжньої цибулі, при знятті кожного шару ноди додають таку ж кількість байт для відступу, щоб розмір цибулі залишався однаковим для наступної ноди. Як ми побачимо, це робить неможливим будь-якій з проміжних нод дізнатись щось про довжину шляху, скільки нод бере участь у маршрутизації, скільки нод передували їм або будуть далі. Це може збільшити конфіденційність, запобігаючи тривіальним атакам аналізу трафіку.
====

Протокол onion-маршрутизації, що використовується в Lightning, має наступні властивості:

. Нода-посередник може бачити лише, по якому каналу вона отримала цибулю і по якому каналу має її переслати. Це означає, що жодна нода в маршруті не може знати, хто саме ініціював платіж і кому він призначений. Це найважливіша властивість, що дає високий рівень конфіденційності.

. Цибулі достатньо малі, щоб вміститися в єдиний TCP/IP пакет і навіть у кадр канального рівня (наприклад, Ethernet). Це суттєво ускладнює аналіз трафіку, також збільшуючи конфіденційність.

. Цибулі побудовані таким чином, що вони завжди мають сталий розмір, незалежно від положення обробляючої ноди вздовж шляху. Коли «знімається» шар шифрування, цибуля доповнюється «сміттям», щоб її розмір не змінювався. Це заважає нодам-посередникам дізнатись своє положення на шляху.

. Цибулі мають HMAC (Hashed Message Authentication code, Хеш-код Аутентифікації Повідомлень) на кожному шарі, тому маніпуляції з цибулею неможливі на практиці.

. Цибулі можуть мати до 20 хопів (хоп в термінології комп'ютерних мереж - це перехід пакету данних від одного сегменту мережі до іншого) або цибулевих шарів, якщо хочете. Цим забезпечуються достатньо довгі шляхи.

. Для шифрування цибулі на кожному хопі використовуються різні тимчасові ключі шифрування. Якщо ключ (зокрема, приватний ключ ноди) буде вкрадено зловмисником в якийсь момент часу, він не зможе розшифрувати цибулі. Простими словами, для досягнення більшої безпеки ключі ніколи не використовуються повторно.

. Повідомлення про помилки можуть бути відправлені з ноди, яка генерує помилку, початковому відправнику за тим самим протоколом цибулевої маршрутизації. Для зовнішнього спостерігача та нод-посередників цибулі помилок не відрізняються від цибуль маршрутизації. Маршрутизація помилок використовується при "випробуванні" шляху методом спроб і помилок, який використовується для пошуку шляху, що має достатню місткість для успішної маршрутизації платежу.

Onion-маршрутизація буде детально розглянута в <<onion_routing>>.

==== Алгоритм Пересилання Платежів

Як тільки відправник платежу знаходить можливий шлях у мережі та створює цибулю, платіж пересилається кожною нодою із шляху. Кожна нода обробляє один шар цибулі та пересилає її далі по шляху наступній ноді.

Кожна проміжна нода отримує Lightning-повідомлення під назвою `update_add_htlc` із хешем платежу та цибулею. Проміжна нода виконує ряд кроків, які називаються _алгоритмом пересилання платежів (payment forwarding algorithm)_:

. Нода розшифровує зовнішній шар цибулі та перевіряє цілісність повідомлення.

. Нода підтверджує, що може виконати підказки щодо маршрутизації, виходячи з доступної місткості на вихідному каналі та комісії.

. Нода співпрацює зі своїм партнером по вхідному каналу для оновлення стану каналу.

. Оскільки нода видаляє деякі дані на початку цибулі, вона додає відступ на кінці, щоб розмір цибулі не змінювався.

. Нода слідує підказкам щодо маршрутизації, щоб переслати модифікований onion-пакет на свій вихідний платіжний канал, надсилаючи повідомлення `update_add_htlc`, яке включає той самий хеш платежу та цибулю.

. Вона співпрацює зі своїм партнером по вихідному каналу для оновлення стану каналу.

Звісно, в разі помилки ці кроки перериваються і припиняються, а ініціатору повідомлення `update_add_htlc` відправляється повідомлення про помилку. Повідомлення про помилку надсилається в onion-форматі назад на вхідний канал.

Коли помилка поширюється назад кожному каналу по шляху, партнери по каналу видаляють очікуючий платіж, відкочуючи платіж.

Якщо платіж не проходить швидко, є велика ймовірність помилки платежу, проте нода ніколи не повинна ініціювати повторну спробу платежу по іншому шляху, доки їй не повернеться цибуля з помилкою. Інакше, відправник сплачував би двічі, якщо обидві спроби оплати врешті-решт мали б успіх.

=== Шифрування P2P-Комунікації

Lightning Network - це p2p-протокол між його учасниками. Як ми бачили в попередніх розділах, мережа виконує дві функції, які утворюють дві логічні мережі, що разом складають _Lightning Network_:

1. Широка p2p-мережа, що використовує протокол пліток для розповсюдження інформації про топологію, і в якій випадковим чином піри з’єднуються між собою. Піри не обов’язково мають між собою платіжні канали, тому вони не завжди є партнерами по каналах.

2. Мережа платіжних каналів між партнерами по каналам. Партнери по каналу також пліткують між собою про топологію, тобто вони є пірами у протоколі пліток.

Вся комунікація між пірами відбувається шляхом відправленням повідомлень під назвою _Lightning Messages_. Всі ці повідомлення зашифровані із використанням криптографічного фреймворку _Noise Protocol Framework_. Цей фреймворк дозволяє створювати криптографічні протоколи зв'язку, що пропонують аутентифікацію, шифрування, пряму секретність та конфіденційність особи. Noise Protocol Framework також використовується в ряді популярних комунікаційних систем з наскрізним шифруванням, таких як WhatsApp, Wireguard та I2P. Більше інформації можна знайти тут:

https://noiseprotocol.org/

Використання Framework Noise Protocol в Lightning Network гарантує, що кожне повідомлення в мережі одночасно аутентифіковане і зашифроване, що підвищує конфіденційність та стійкість мережі до аналізу трафіку, глибокої інспекції пакетів та прослуховування. Однак тут є побічний ефект, адже це робить розробку і тестування протоколів дещо складнішими, оскільки не можна просто спостерігати за мережею за допомогою перехоплення пакетів або такого інструменту для аналізу мережі, як wireshark. Натомість розробники повинні використовувати спеціалізовані плагіни, які розшифровують протокол з точки зору ноди, наприклад, _lightning dissector_, плагін для wireshark:

https://github.com/nayutaco/lightning-dissector

=== Думки щодо Довіри
Поки людина дотримується протоколу і захищає свою ноду, вона не несе великого ризику втратити кошти через участь в Lightning Network.
Однак існує необхідність сплати комісій при відкритті каналу.
Будь-які витрати повинні мати відповідну вигоду.
У нашому випадку винагородою для Аліси за покриття витрат на відкриття каналу є те, що Аліса може відправляти та отримувати біткоїни через Lightning Network в будь-який час, і що вона може заробляти комісії в біткоїнах, пересилаючи платежі інших людей.
Аліса знає, що теоретично Боб може закрити канал відразу після відкриття, за що Аліса буде змушена сплатити on-chain комісію.
Алісі потрібно мати невелику довіру до Боба.
Аліса була в кафе Боба, і, очевидно, Боб був зацікавлений продати свою каву, тому Аліса могла довіряти Бобу в цьому сенсі.
І Аліса, і Боб мають взаємну вигоду.
Аліса вирішує, що вона отримує для себе достатньо плюсів, щоб взяти на себе оплату on-chain комісії за створення каналу до Боба.
На відміну від цього, Аліса не відкриватиме канал із кимось невідомим з чужої країни, хто щойно надіслав їй неочікуваний електронний лист із проханням відкрити канал до нього.

=== Порівняння з Біткоїном

Хоча мережа Lightning побудована поверх Біткоїна і успадковує багато її особливостей та властивостей, існують важливі відмінності, про які повинні знати користувачі обох мереж.

Деякі відмінності присутні в термінології. Також існують архітектурні відмінності та відмінності в користувацькому досвіді. У наступних кількох секціях ми розглянемо відмінності та схожість, пояснимо термінологію та скоригуємо наші очікування.

==== Адреси vs Інвойси, Транзакції vs Платежі

Зазвичай при оплаті у Біткоїні користувач отримує біткоїн-адресу (наприклад, відсканувавши QR-код на веб-сторінці або отримавши текстову адресу від друга через швидке повідомлення або e-mail). Потім він використовує свій Біткоїн-гаманець для створення транзакції для відправлення коштів на цю адресу.

В Lightning Network отримувач платежу створює інвойс. Lightning-інвойс можна розглядати як аналог Біткоїн-адреси. Одержувач дає відправнику Lightning-інвойс у вигляді QR-коду або тексту, як і у випадку Біткоїн-адреси.

Відправник використовує свій Lightning-гаманець для оплати інвойсу, скопіювавши текст інвойсу або відсканувавши його QR-код. Lightning-платіж є аналогом Біткоїн-"транзакції".

Однак існують деякі відмінності в користувацькому досвіді. Біткоїн-адреса може бути _використана багаторазово_. Біткоїн-адреси  не мають терміну придатності, і допоки власник адреси володіє ключем, кошти, що знаходяться на відповідній адресі, завжди доступні. Відправник може надіслати будь-яку кількість біткоїнів на раніше використану адресу, а одержувач може опублікувати одну постійну адресу, щоб отримати на неї багато платежів. Хоча це суперечить найкращим практикам з міркувань конфіденційності, технічно це можливо і насправді досить часто відбувається.

Однак у Lightning кожен інвойс можна використовувати лише один раз і лише для визначеної суми платежу. Ви не можете платити більше або менше визначеної суми, ви не можете використовувати інвойс кілька разів, кожен інвойс має вбудований термін придатності. У Lightning одержувач має створити окремий новий інвойс для кожного платежу, заздалегідь вказавши суму платежу. З цього є виняток, а саме механізм під назвою _keysend_, який ми розглянемо в <<keysend>>.

==== Вибір Виходів vs Пошук Шляху

Для того, щоб здійснити платіж у мережі Біткоїн, відправник повинен використати один або кілька невитрачених виходів транзакцій (UTXO).
Якщо користувач має кілька UTXO, їм (вірніше, їх гаманцю) потрібно буде вибрати, які саме UTXO витратити.
Наприклад, користувач, який здійснює платіж у розмірі 1 BTC, може використати один вихід з 1 BTC, два виходи на 0.25 BTC і на 0.75 BTC або чотири виходи по 0.25 BTC кожен.

В Lightning платежі не потребують входів для трати, замість цього кожен платіж призводить до оновлення балансу каналу, перерозподіляючи кошти між двома партнерами по каналу. Відправник бачить це як "переміщення" балансу каналу з його кінця каналу на інший кінець до свого партнера по каналу. Lightning-платежі використовують ряд каналів для маршрутизації платежу від відправника до одержувача. Кожен із цих каналів повинен мати достатню місткість для маршрутизації платежу.

Оскільки для здійснення платежу можна використовувати безліч можливих каналів і шляхів, то вибір каналів та шляхів Lightning-користувачем є в деякому сенсі аналогічним вибору UTXO Біткоїн-користувачем.

Завдяки таким технологіям, як Atomic Multi-Path (AMP, Атомарний Мульти-Шлях) і Multi-Path Payments (MPP, Мульти-Шляхові Платежі), які ми розглянемо в наступних розділах, кілька шляхів Lightning можна об'єднати в один атомарний платіж, як і кілька UTXO можна об'єднати в одну атомарну Біткоїн-транзакцію.

==== Решта у Біткоїні vs Відсутність Решти у Lightning

Щоб виконати платіж у мережі Біткоїн, відправник повинен використати один або кілька невитрачених виходів транзакцій (UTXO). UTXO можна витратити тільки повністю, його не можна розділити та витратити частково. Отже, якщо користувач хоче заплатити 0,8 BTC, але має лише один UTXO на 1 BTC, тоді йому потрібно витратити весь цей 1 BTC UTXO, при цьому відправити 0,8 BTC одержувачу і відправити 0,2 BTC назад собі в якості решти. Виплата решти 0,2 BTC створює новий UTXO, він називається "вихід з рештою".

У Lightning при відкриванні каналу транзакція фінансування витрачає деякі UTXO і створює мультисиговий UTXO. Після того, як певна сума біткоїнів заблокована в каналі, її можна пересилати туди-сюди по каналу частинами і без решти.
Так відбувається тому, що партнери по каналу просто оновлюють баланс каналу і створюють нові UTXO лише тоді, коли канал врешті-решт закривається транзакцією закриття.

==== Комісії за Майнинг vs Комісії за Маршрутизацію

У мережі Біткоїн користувачі платять комісії майнерам за включення їх транзакцій у блок. Ці комісії отримує майнер відповідного блоку.
Розмір комісії залежить від _розміру_ транзакції в _байтах_, які займає транзакція в блоці, а також від того, як швидко користувач хоче, щоб ця транзакція була змайнена.
Оскільки майнери зазвичай спочатку майнять найвигідніші транзакції, то користувач, який хоче, щоб його транзакція була змайнена негайно, буде змушений платити _вищу_ комісію за байт, тоді як користувач, який не поспішає, може сплатити _меншу_ комісію за байт.

У Lightning Network користувачі платять комісії іншим користувачам (нодам-посередникам) за маршрутизацію платежів через їх канали.
Щоб маршрутизувати платіж, нода-посередник має перемістити кошти в двох або більше своїх каналах, а також передати дані щодо платежу. Зазвичай посередник стягує з відправника комісію, виходячи з _суми_ платежу, встановлюючи мінімальну _base fee (базову комісію)_ (фіксовану комісію за кожен платіж) та _fee rate (відсоток)_ (пропорційно до суми платежу). Таким чином, маршрутизація платежів на більшу суму коштує дорожче, формується ринок ліквідності, де різні користувачі беруть різну комісію за маршрутизацію платежів через свої канали.


==== Varying Fees Depending Traffic vs Announced Fees

On the Bitcoin network, miners are profit-seeking and will typically include as many transactions in a block as possible, while staying within the block capacity called the _block weight_.

If there are more transactions in the queue (called the mempool) than can fit in a block, they will begin by mining the transactions that pay the highest fees per unit (bytes) of _transaction weight_.
Thus, when there are many transactions in the queue, users have to pay a higher fee to be included in the next block, or they have to wait until there are fewer transactions in the queue.
This naturally leads to the emergence of a fee market where users pay based on how urgently they need their transaction included in the next block.

The scarce resource on the Bitcoin network is the space in the blocks. Bitcoin users compete for block space. And the Bitcoin fee market is based on available block space. The scarce resource in the Lightning network is the channel liquidity (capacity of funds available for routing in channels) and channel connectivity (how many and well connected nodes your channels can reach). Lightning users compete for capacity and connectivity and therefore the Lightning fee market is driven by capacity and connectivity.

On the Lightning Network, users are paying fees to the users routing their payments. Routing a payment, in economic terms, is nothing more than providing and assigning capacity to the sender. Naturally, routers who charge lower fees for the same capacity will be more attractive to route through. Thus a fee market exists where routers are in competition with each other over the fees they charge to route payments through their channels.

==== Public Bitcoin Transactions vs Private Lightning Payments

On the Bitcoin network, every transaction is publicly visible on the Bitcoin blockchain. While the addresses involved are pseudonymous and are not typically tied to identity, they are still seen and validated by every other user on the network.
In addition, blockchain surveillance companies collect and analyze this data en-masse and sell it to interested parties such as private firms, governments and intelligence agencies.

Lightning Network payments, on the other hand, are almost completely private. Typically only the sender and the recipient are fully aware of the source, destination, and amount transacted in a particular payment. Furthermore, the receiver may not even know the source of the payment. As payments are onion-routed, the users who route the payment are only aware of the amount of the payment, but can neither determine the source nor the destination.

In summary, Bitcoin transactions are broadcast publicly and stored forever. Lightning payments are executed between a few selected peers and information about them is privately stored and only until the channel is closed. Creating mass surveillance and analysis tools equivalent to those used on Bitcoin will be impossible on Lightning.

==== Waiting for Confirmations vs Instant Settlement

On the Bitcoin network, transactions are only settled once they have been included in a block, in which case they are said to be "confirmed" in that block. As more blocks are mined, the transaction acquires more "confirmations" and is considered more secure.

On the Lightning Network, confirmations only matter for opening and closing channels on-chain. Once a funding transaction has reached a suitable number of confirmations (e.g. 3), the channel partners consider the channel open. As the bitcoin in the channel is secured by a smart contract that manages that channel, payments settle _instantly_ once received by the final recipient.
In practical terms, instant settlement means that payments take only a few seconds to execute and settle. As with Bitcoin, Lightning payments are not reversible.

Finally, when the channel is closed, a transaction is made on the Bitcoin network and once that transaction is confirmed the channel is considered closed.

==== Sending Arbitrary Amounts vs Capacity Restrictions

On the Bitcoin network, a user can send any amount of bitcoin that they own to another user, without capacity restrictions. A single transaction can theoretically send up to 21 million bitcoin as a payment.

On the Lightning Network, a user can only send as much bitcoin as currently exists on their side of a particular channel to a channel partner. For instance, if a user owns one channel with 0.4 BTC on their side, and another channel with 0.2 BTC on their side, then the maximum they can send with one payment is 0.4 BTC. This is true regardless of how much bitcoin the user currently has in their Bitcoin wallet.

Atomic Multi-Path Payments (AMPs) is a feature which, in the above example, allows the user to combine both their 0.4 BTC and 0.2 BTC channels to send a maximum of 0.6 BTC with one payment. AMPs are currently being tested across the Lightning Network, and are expected to be widely available and used by the time this book is completed. For more detail on AMPs, see <<atomic_multipath_payments>>.

If the payment is routed, every routing node along the routing path must have channels with capacity at least the same as the payment amount being routed. This must hold true for every single channel that the payment is routed through. The capacity of the lowest-capacity channel in a path sets the upper limit for the capacity of the entire path.

Hence, capacity and connectivity are critical and scarce resources in the Lightning network.

==== Incentives for Large Value Payment vs. Small Value Payments

The fee structure in Bitcoin is independent of the transaction value.
A $1 million transaction has the same fee as a $1 transaction on Bitcoin, assuming similar transaction size in bytes.
In Lightning the fee is a fixed base fee plus a percentage of the transaction value.
Therefore, in Lightning the payment fee increases with payment value.
These opposing fee structures create different incentives and lead to different usage in regards to transaction value.
A transaction of greater value will be cheaper on Bitcoin and hence users will prefer Bitcoin for large value transactions. Similarly, on the other end of the scale, users will prefer Lightning for small value transactions.

==== Using the Blockchain as a Ledger vs as a Court System

On the Bitcoin Network, every transaction is eventually recorded in a block on the blockchain.
The blockchain thus forms a complete history of every transaction since Bitcoin's creation, and a way to fully audit every bitcoin in existence.
Once a transaction is included in the blockchain it is final.
Thus, no disputes can arise and it is unambiguous how much bitcoin is controlled by a particular address at a particular point in the blockchain.

On the Lightning Network, the balance in a channel at a particular time is known only to the two channel partners, and is only made visible to the rest of the network when the channel is closed.
When the channel is closed, the final balance of the channel is submitted to the Bitcoin blockchain, and each partner receives their share of the bitcoin in that channel.
For instance, if the opening balance was 1 BTC paid by Alice, and Alice made a payment of 0.3 BTC to Bob, then the final balance of the channel is 0.7 BTC for Alice and 0.3 BTC for Bob.
If Alice tries to cheat by submitting the opening state of the channel to the Bitcoin blockchain, with 1 BTC for Alice and 0 BTC for Bob, then Bob can retaliate by submitting the true final state of the channel, as well as create a penalty transaction that gives him all bitcoin in the channel.
For the Lightning network, the Bitcoin blockchain acts as a court system.
Like a robotic judge, Bitcoin records the initial and final balances of each channel, and approves penalties if one of the parties tries to cheat.

==== Offline vs Online, Asynchronous vs Synchronous

When a Bitcoin user sends funds to a destination address he does not need to know anything about the recipient. The recipient might be offline or online, and no interaction between sender and recipient is needed. The interaction is between sender and the Bitcoin blockchain. Receiving bitcoin on the Bitcoin blockchain is a _passive_ and _asynchronous_ activity that does not require any interaction by the recipient, or for the recipient to be online at any time. Bitcoin addresses can even be generated offline and are never "registered" with the Bitcoin network. Only spending bitcoin requires interaction.

In Lightning, the recipient must be "online" in order to complete the payment before it expires.
The recipient must run a node or have someone that runs a node on their behalf (a third-party custodian). To be precise, both nodes, the sender's and the recipient's must be online at the time of payment and must coordinate. Receiving a Lightning payment is an _active_ and _synchronous_ activity between sender and recipient, without the participation of most of the Lightning network or the Bitcoin network (except for the intermediary routing nodes, if any).

The synchronous and always-online nature of the Lightning network is probably the biggest difference in the user experience and often confounds users who are accustomed to Bitcoin.

==== Satoshis vs. milli-satoshis

On Bitcoin the smallest amount is a _satoshi_ which cannot be divided any further. Lightning is a bit more flexible, and Lightning nodes work with _milli-satoshis_ (thousandths of a satoshi). This allows tiny payments to be sent via Lightning. A single milli-satoshi payment can be sent across a payment channel, an amount so small it should properly be characterized as a _nanopayment_.

The milli-satoshi unit cannot, of course, be settled on the Bitcoin blockchain at that granularity. Upon channel closure, balances are rounded to the nearest satoshi. But over the lifetime of a channel, millions of nanopayments are possible at milli-satoshi levels. The Lightning network breaks throught the micropayment barrier.

=== Commonality of Bitcoin and Lightning

==== Monetary Unit

Both the Bitcoin network and the Lightning network use the same monetary units: bitcoin. Lightning payments use the very same bitcoin as Bitcoin transactions. As an implication, because the monetary unit is the same, the monetary limit is the same: less than 21 million bitcoin. Of Bitcoin's 21 million total bitcoin, some are already allocated to 2-of-2 multi-signature addresses as part of payment channel on the Lightning Network.

==== Irreversibility and finality of payments

Both Bitcoin transactions and Lightning payments are irreversible and immutable. There is no "undo" operation or "chargeback" for either system. As a sender of either one you have to act responsibly, but also, as a recipient you are guaranteed finality of your transactions.

==== Trust and counterparty risk

Just as Bitcoin, Lightning requires the user only to trust mathematics, encryption, and that the software does not have any critical bugs. Neither Bitcoin nor Lightning require the user to trust a person, a company, an institution, or a government.
Since Lightning sits on top of Bitcoin and relies on Bitcoin as its underlying base layer, it is clear that the security model of Lightning reduces to the security of Bitcoin. This means that Lightning offers broadly the same security as Bitcoin under most circumstances, with only a slight reduction in security under some narrow circumstances.

==== Permissionless operation

Both Bitcoin and Lightning can be used by anybody with access to the Internet and to the appropriate software, e.g. node and wallet.
Neither network requires users to get permission, vetting, or authorization from third-parties, companies, institutions or a government. Governments can outlaw Bitcoin or Lightning within their jurisdiction, but cannot prevent their global use.

==== Open source and open system

Both, Bitcoin and Lightning are open-source software systems built by a decentralized global community of volunteers, available under open licenses. Both are based on open and interoperable protocols, which operate as open systems and open networks. Global, open and free.

=== Conclusion

In this chapter we looked at how the Lightning network actually works and all of the constituent components. We examined each step in constructing, operating and closing a channel. We looked at how payments are routed. Finally we compared Lightinng and Bitcoin and analyzed their differences and commonalities.

In the next several chapters we will revisit all these topics, but in much more detail.
